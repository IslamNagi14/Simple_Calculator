
S_Claculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  000044a4  00004518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003924  00000000  00000000  00004648  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000013e5  00000000  00000000  00007f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  00009351  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000020e  00000000  00000000  00009511  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000268b  00000000  00000000  0000971f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014d1  00000000  00000000  0000bdaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ab  00000000  00000000  0000d27b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000e528  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fb  00000000  00000000  0000e708  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a0a  00000000  00000000  0000ea03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000f40d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <main>
      7a:	0c 94 50 22 	jmp	0x44a0	; 0x44a0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 1d 04 	call	0x83a	; 0x83a <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 19 22 	jmp	0x4432	; 0x4432 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a7 e7       	ldi	r26, 0x77	; 119
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 35 22 	jmp	0x446a	; 0x446a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 25 22 	jmp	0x444a	; 0x444a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 41 22 	jmp	0x4482	; 0x4482 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 25 22 	jmp	0x444a	; 0x444a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 41 22 	jmp	0x4482	; 0x4482 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 19 22 	jmp	0x4432	; 0x4432 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	87 e7       	ldi	r24, 0x77	; 119
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 35 22 	jmp	0x446a	; 0x446a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 21 22 	jmp	0x4442	; 0x4442 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	67 e7       	ldi	r22, 0x77	; 119
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 3d 22 	jmp	0x447a	; 0x447a <__epilogue_restores__+0x10>

0000077a <__nesf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 25 22 	jmp	0x444a	; 0x444a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__nesf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__nesf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__nesf2+0x58>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 41 22 	jmp	0x4482	; 0x4482 <__epilogue_restores__+0x18>

000007da <__gtsf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 25 22 	jmp	0x444a	; 0x444a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gtsf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gtsf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gtsf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 41 22 	jmp	0x4482	; 0x4482 <__epilogue_restores__+0x18>

0000083a <__gesf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 25 22 	jmp	0x444a	; 0x444a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 41 22 	jmp	0x4482	; 0x4482 <__epilogue_restores__+0x18>

0000089a <__ltsf2>:
     89a:	a8 e1       	ldi	r26, 0x18	; 24
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 25 22 	jmp	0x444a	; 0x444a <__prologue_saves__+0x18>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	2d 83       	std	Y+5, r18	; 0x05
     8b0:	3e 83       	std	Y+6, r19	; 0x06
     8b2:	4f 83       	std	Y+7, r20	; 0x07
     8b4:	58 87       	std	Y+8, r21	; 0x08
     8b6:	89 e0       	ldi	r24, 0x09	; 9
     8b8:	e8 2e       	mov	r14, r24
     8ba:	f1 2c       	mov	r15, r1
     8bc:	ec 0e       	add	r14, r28
     8be:	fd 1e       	adc	r15, r29
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	b7 01       	movw	r22, r14
     8c6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5e       	subi	r16, 0xEF	; 239
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	ce 01       	movw	r24, r28
     8d2:	05 96       	adiw	r24, 0x05	; 5
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     8da:	89 85       	ldd	r24, Y+9	; 0x09
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	40 f0       	brcs	.+16     	; 0x8f0 <__ltsf2+0x56>
     8e0:	89 89       	ldd	r24, Y+17	; 0x11
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	28 f0       	brcs	.+10     	; 0x8f0 <__ltsf2+0x56>
     8e6:	c7 01       	movw	r24, r14
     8e8:	b8 01       	movw	r22, r16
     8ea:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__ltsf2+0x58>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	68 96       	adiw	r28, 0x18	; 24
     8f4:	e6 e0       	ldi	r30, 0x06	; 6
     8f6:	0c 94 41 22 	jmp	0x4482	; 0x4482 <__epilogue_restores__+0x18>

000008fa <__floatsisf>:
     8fa:	a8 e0       	ldi	r26, 0x08	; 8
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e3 e8       	ldi	r30, 0x83	; 131
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	0c 94 22 22 	jmp	0x4444	; 0x4444 <__prologue_saves__+0x12>
     906:	9b 01       	movw	r18, r22
     908:	ac 01       	movw	r20, r24
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	89 83       	std	Y+1, r24	; 0x01
     90e:	da 01       	movw	r26, r20
     910:	c9 01       	movw	r24, r18
     912:	88 27       	eor	r24, r24
     914:	b7 fd       	sbrc	r27, 7
     916:	83 95       	inc	r24
     918:	99 27       	eor	r25, r25
     91a:	aa 27       	eor	r26, r26
     91c:	bb 27       	eor	r27, r27
     91e:	b8 2e       	mov	r11, r24
     920:	21 15       	cp	r18, r1
     922:	31 05       	cpc	r19, r1
     924:	41 05       	cpc	r20, r1
     926:	51 05       	cpc	r21, r1
     928:	19 f4       	brne	.+6      	; 0x930 <__floatsisf+0x36>
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	89 83       	std	Y+1, r24	; 0x01
     92e:	3a c0       	rjmp	.+116    	; 0x9a4 <__floatsisf+0xaa>
     930:	88 23       	and	r24, r24
     932:	a9 f0       	breq	.+42     	; 0x95e <__floatsisf+0x64>
     934:	20 30       	cpi	r18, 0x00	; 0
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	38 07       	cpc	r19, r24
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	48 07       	cpc	r20, r24
     93e:	80 e8       	ldi	r24, 0x80	; 128
     940:	58 07       	cpc	r21, r24
     942:	29 f4       	brne	.+10     	; 0x94e <__floatsisf+0x54>
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	9f ec       	ldi	r25, 0xCF	; 207
     94c:	30 c0       	rjmp	.+96     	; 0x9ae <__floatsisf+0xb4>
     94e:	ee 24       	eor	r14, r14
     950:	ff 24       	eor	r15, r15
     952:	87 01       	movw	r16, r14
     954:	e2 1a       	sub	r14, r18
     956:	f3 0a       	sbc	r15, r19
     958:	04 0b       	sbc	r16, r20
     95a:	15 0b       	sbc	r17, r21
     95c:	02 c0       	rjmp	.+4      	; 0x962 <__floatsisf+0x68>
     95e:	79 01       	movw	r14, r18
     960:	8a 01       	movw	r16, r20
     962:	8e e1       	ldi	r24, 0x1E	; 30
     964:	c8 2e       	mov	r12, r24
     966:	d1 2c       	mov	r13, r1
     968:	dc 82       	std	Y+4, r13	; 0x04
     96a:	cb 82       	std	Y+3, r12	; 0x03
     96c:	ed 82       	std	Y+5, r14	; 0x05
     96e:	fe 82       	std	Y+6, r15	; 0x06
     970:	0f 83       	std	Y+7, r16	; 0x07
     972:	18 87       	std	Y+8, r17	; 0x08
     974:	c8 01       	movw	r24, r16
     976:	b7 01       	movw	r22, r14
     978:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__clzsi2>
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	18 16       	cp	r1, r24
     980:	19 06       	cpc	r1, r25
     982:	84 f4       	brge	.+32     	; 0x9a4 <__floatsisf+0xaa>
     984:	08 2e       	mov	r0, r24
     986:	04 c0       	rjmp	.+8      	; 0x990 <__floatsisf+0x96>
     988:	ee 0c       	add	r14, r14
     98a:	ff 1c       	adc	r15, r15
     98c:	00 1f       	adc	r16, r16
     98e:	11 1f       	adc	r17, r17
     990:	0a 94       	dec	r0
     992:	d2 f7       	brpl	.-12     	; 0x988 <__floatsisf+0x8e>
     994:	ed 82       	std	Y+5, r14	; 0x05
     996:	fe 82       	std	Y+6, r15	; 0x06
     998:	0f 83       	std	Y+7, r16	; 0x07
     99a:	18 87       	std	Y+8, r17	; 0x08
     99c:	c8 1a       	sub	r12, r24
     99e:	d9 0a       	sbc	r13, r25
     9a0:	dc 82       	std	Y+4, r13	; 0x04
     9a2:	cb 82       	std	Y+3, r12	; 0x03
     9a4:	ba 82       	std	Y+2, r11	; 0x02
     9a6:	ce 01       	movw	r24, r28
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     9ae:	28 96       	adiw	r28, 0x08	; 8
     9b0:	e9 e0       	ldi	r30, 0x09	; 9
     9b2:	0c 94 3e 22 	jmp	0x447c	; 0x447c <__epilogue_restores__+0x12>

000009b6 <__fixsfsi>:
     9b6:	ac e0       	ldi	r26, 0x0C	; 12
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	e1 ee       	ldi	r30, 0xE1	; 225
     9bc:	f4 e0       	ldi	r31, 0x04	; 4
     9be:	0c 94 29 22 	jmp	0x4452	; 0x4452 <__prologue_saves__+0x20>
     9c2:	69 83       	std	Y+1, r22	; 0x01
     9c4:	7a 83       	std	Y+2, r23	; 0x02
     9c6:	8b 83       	std	Y+3, r24	; 0x03
     9c8:	9c 83       	std	Y+4, r25	; 0x04
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	be 01       	movw	r22, r28
     9d0:	6b 5f       	subi	r22, 0xFB	; 251
     9d2:	7f 4f       	sbci	r23, 0xFF	; 255
     9d4:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     9d8:	8d 81       	ldd	r24, Y+5	; 0x05
     9da:	82 30       	cpi	r24, 0x02	; 2
     9dc:	61 f1       	breq	.+88     	; 0xa36 <__fixsfsi+0x80>
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	50 f1       	brcs	.+84     	; 0xa36 <__fixsfsi+0x80>
     9e2:	84 30       	cpi	r24, 0x04	; 4
     9e4:	21 f4       	brne	.+8      	; 0x9ee <__fixsfsi+0x38>
     9e6:	8e 81       	ldd	r24, Y+6	; 0x06
     9e8:	88 23       	and	r24, r24
     9ea:	51 f1       	breq	.+84     	; 0xa40 <__fixsfsi+0x8a>
     9ec:	2e c0       	rjmp	.+92     	; 0xa4a <__fixsfsi+0x94>
     9ee:	2f 81       	ldd	r18, Y+7	; 0x07
     9f0:	38 85       	ldd	r19, Y+8	; 0x08
     9f2:	37 fd       	sbrc	r19, 7
     9f4:	20 c0       	rjmp	.+64     	; 0xa36 <__fixsfsi+0x80>
     9f6:	6e 81       	ldd	r22, Y+6	; 0x06
     9f8:	2f 31       	cpi	r18, 0x1F	; 31
     9fa:	31 05       	cpc	r19, r1
     9fc:	1c f0       	brlt	.+6      	; 0xa04 <__fixsfsi+0x4e>
     9fe:	66 23       	and	r22, r22
     a00:	f9 f0       	breq	.+62     	; 0xa40 <__fixsfsi+0x8a>
     a02:	23 c0       	rjmp	.+70     	; 0xa4a <__fixsfsi+0x94>
     a04:	8e e1       	ldi	r24, 0x1E	; 30
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	82 1b       	sub	r24, r18
     a0a:	93 0b       	sbc	r25, r19
     a0c:	29 85       	ldd	r18, Y+9	; 0x09
     a0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a10:	4b 85       	ldd	r20, Y+11	; 0x0b
     a12:	5c 85       	ldd	r21, Y+12	; 0x0c
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__fixsfsi+0x68>
     a16:	56 95       	lsr	r21
     a18:	47 95       	ror	r20
     a1a:	37 95       	ror	r19
     a1c:	27 95       	ror	r18
     a1e:	8a 95       	dec	r24
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__fixsfsi+0x60>
     a22:	66 23       	and	r22, r22
     a24:	b1 f0       	breq	.+44     	; 0xa52 <__fixsfsi+0x9c>
     a26:	50 95       	com	r21
     a28:	40 95       	com	r20
     a2a:	30 95       	com	r19
     a2c:	21 95       	neg	r18
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
     a30:	4f 4f       	sbci	r20, 0xFF	; 255
     a32:	5f 4f       	sbci	r21, 0xFF	; 255
     a34:	0e c0       	rjmp	.+28     	; 0xa52 <__fixsfsi+0x9c>
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	09 c0       	rjmp	.+18     	; 0xa52 <__fixsfsi+0x9c>
     a40:	2f ef       	ldi	r18, 0xFF	; 255
     a42:	3f ef       	ldi	r19, 0xFF	; 255
     a44:	4f ef       	ldi	r20, 0xFF	; 255
     a46:	5f e7       	ldi	r21, 0x7F	; 127
     a48:	04 c0       	rjmp	.+8      	; 0xa52 <__fixsfsi+0x9c>
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e8       	ldi	r21, 0x80	; 128
     a52:	b9 01       	movw	r22, r18
     a54:	ca 01       	movw	r24, r20
     a56:	2c 96       	adiw	r28, 0x0c	; 12
     a58:	e2 e0       	ldi	r30, 0x02	; 2
     a5a:	0c 94 45 22 	jmp	0x448a	; 0x448a <__epilogue_restores__+0x20>

00000a5e <__clzsi2>:
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	7b 01       	movw	r14, r22
     a68:	8c 01       	movw	r16, r24
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	e8 16       	cp	r14, r24
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	f8 06       	cpc	r15, r24
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	08 07       	cpc	r16, r24
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	18 07       	cpc	r17, r24
     a7a:	88 f4       	brcc	.+34     	; 0xa9e <__clzsi2+0x40>
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
     a7e:	e8 16       	cp	r14, r24
     a80:	f1 04       	cpc	r15, r1
     a82:	01 05       	cpc	r16, r1
     a84:	11 05       	cpc	r17, r1
     a86:	31 f0       	breq	.+12     	; 0xa94 <__clzsi2+0x36>
     a88:	28 f0       	brcs	.+10     	; 0xa94 <__clzsi2+0x36>
     a8a:	88 e0       	ldi	r24, 0x08	; 8
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	a0 e0       	ldi	r26, 0x00	; 0
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	17 c0       	rjmp	.+46     	; 0xac2 <__clzsi2+0x64>
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	a0 e0       	ldi	r26, 0x00	; 0
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	12 c0       	rjmp	.+36     	; 0xac2 <__clzsi2+0x64>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	e8 16       	cp	r14, r24
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	f8 06       	cpc	r15, r24
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	08 07       	cpc	r16, r24
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	18 07       	cpc	r17, r24
     aae:	28 f0       	brcs	.+10     	; 0xaba <__clzsi2+0x5c>
     ab0:	88 e1       	ldi	r24, 0x18	; 24
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x64>
     aba:	80 e1       	ldi	r24, 0x10	; 16
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	a0 e0       	ldi	r26, 0x00	; 0
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	20 e2       	ldi	r18, 0x20	; 32
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	28 1b       	sub	r18, r24
     acc:	39 0b       	sbc	r19, r25
     ace:	4a 0b       	sbc	r20, r26
     ad0:	5b 0b       	sbc	r21, r27
     ad2:	04 c0       	rjmp	.+8      	; 0xadc <__clzsi2+0x7e>
     ad4:	16 95       	lsr	r17
     ad6:	07 95       	ror	r16
     ad8:	f7 94       	ror	r15
     ada:	e7 94       	ror	r14
     adc:	8a 95       	dec	r24
     ade:	d2 f7       	brpl	.-12     	; 0xad4 <__clzsi2+0x76>
     ae0:	f7 01       	movw	r30, r14
     ae2:	e1 58       	subi	r30, 0x81	; 129
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
     ae6:	80 81       	ld	r24, Z
     ae8:	28 1b       	sub	r18, r24
     aea:	31 09       	sbc	r19, r1
     aec:	41 09       	sbc	r20, r1
     aee:	51 09       	sbc	r21, r1
     af0:	c9 01       	movw	r24, r18
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	08 95       	ret

00000afc <__pack_f>:
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	fc 01       	movw	r30, r24
     b08:	e4 80       	ldd	r14, Z+4	; 0x04
     b0a:	f5 80       	ldd	r15, Z+5	; 0x05
     b0c:	06 81       	ldd	r16, Z+6	; 0x06
     b0e:	17 81       	ldd	r17, Z+7	; 0x07
     b10:	d1 80       	ldd	r13, Z+1	; 0x01
     b12:	80 81       	ld	r24, Z
     b14:	82 30       	cpi	r24, 0x02	; 2
     b16:	48 f4       	brcc	.+18     	; 0xb2a <__pack_f+0x2e>
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	a0 e1       	ldi	r26, 0x10	; 16
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	e8 2a       	or	r14, r24
     b22:	f9 2a       	or	r15, r25
     b24:	0a 2b       	or	r16, r26
     b26:	1b 2b       	or	r17, r27
     b28:	a5 c0       	rjmp	.+330    	; 0xc74 <__pack_f+0x178>
     b2a:	84 30       	cpi	r24, 0x04	; 4
     b2c:	09 f4       	brne	.+2      	; 0xb30 <__pack_f+0x34>
     b2e:	9f c0       	rjmp	.+318    	; 0xc6e <__pack_f+0x172>
     b30:	82 30       	cpi	r24, 0x02	; 2
     b32:	21 f4       	brne	.+8      	; 0xb3c <__pack_f+0x40>
     b34:	ee 24       	eor	r14, r14
     b36:	ff 24       	eor	r15, r15
     b38:	87 01       	movw	r16, r14
     b3a:	05 c0       	rjmp	.+10     	; 0xb46 <__pack_f+0x4a>
     b3c:	e1 14       	cp	r14, r1
     b3e:	f1 04       	cpc	r15, r1
     b40:	01 05       	cpc	r16, r1
     b42:	11 05       	cpc	r17, r1
     b44:	19 f4       	brne	.+6      	; 0xb4c <__pack_f+0x50>
     b46:	e0 e0       	ldi	r30, 0x00	; 0
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	96 c0       	rjmp	.+300    	; 0xc78 <__pack_f+0x17c>
     b4c:	62 81       	ldd	r22, Z+2	; 0x02
     b4e:	73 81       	ldd	r23, Z+3	; 0x03
     b50:	9f ef       	ldi	r25, 0xFF	; 255
     b52:	62 38       	cpi	r22, 0x82	; 130
     b54:	79 07       	cpc	r23, r25
     b56:	0c f0       	brlt	.+2      	; 0xb5a <__pack_f+0x5e>
     b58:	5b c0       	rjmp	.+182    	; 0xc10 <__pack_f+0x114>
     b5a:	22 e8       	ldi	r18, 0x82	; 130
     b5c:	3f ef       	ldi	r19, 0xFF	; 255
     b5e:	26 1b       	sub	r18, r22
     b60:	37 0b       	sbc	r19, r23
     b62:	2a 31       	cpi	r18, 0x1A	; 26
     b64:	31 05       	cpc	r19, r1
     b66:	2c f0       	brlt	.+10     	; 0xb72 <__pack_f+0x76>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	2a c0       	rjmp	.+84     	; 0xbc6 <__pack_f+0xca>
     b72:	b8 01       	movw	r22, r16
     b74:	a7 01       	movw	r20, r14
     b76:	02 2e       	mov	r0, r18
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__pack_f+0x86>
     b7a:	76 95       	lsr	r23
     b7c:	67 95       	ror	r22
     b7e:	57 95       	ror	r21
     b80:	47 95       	ror	r20
     b82:	0a 94       	dec	r0
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__pack_f+0x7e>
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__pack_f+0x9c>
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	aa 1f       	adc	r26, r26
     b96:	bb 1f       	adc	r27, r27
     b98:	2a 95       	dec	r18
     b9a:	d2 f7       	brpl	.-12     	; 0xb90 <__pack_f+0x94>
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	a1 09       	sbc	r26, r1
     ba0:	b1 09       	sbc	r27, r1
     ba2:	8e 21       	and	r24, r14
     ba4:	9f 21       	and	r25, r15
     ba6:	a0 23       	and	r26, r16
     ba8:	b1 23       	and	r27, r17
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	21 f0       	breq	.+8      	; 0xbba <__pack_f+0xbe>
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	9a 01       	movw	r18, r20
     bbc:	ab 01       	movw	r20, r22
     bbe:	28 2b       	or	r18, r24
     bc0:	39 2b       	or	r19, r25
     bc2:	4a 2b       	or	r20, r26
     bc4:	5b 2b       	or	r21, r27
     bc6:	da 01       	movw	r26, r20
     bc8:	c9 01       	movw	r24, r18
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	90 70       	andi	r25, 0x00	; 0
     bce:	a0 70       	andi	r26, 0x00	; 0
     bd0:	b0 70       	andi	r27, 0x00	; 0
     bd2:	80 34       	cpi	r24, 0x40	; 64
     bd4:	91 05       	cpc	r25, r1
     bd6:	a1 05       	cpc	r26, r1
     bd8:	b1 05       	cpc	r27, r1
     bda:	39 f4       	brne	.+14     	; 0xbea <__pack_f+0xee>
     bdc:	27 ff       	sbrs	r18, 7
     bde:	09 c0       	rjmp	.+18     	; 0xbf2 <__pack_f+0xf6>
     be0:	20 5c       	subi	r18, 0xC0	; 192
     be2:	3f 4f       	sbci	r19, 0xFF	; 255
     be4:	4f 4f       	sbci	r20, 0xFF	; 255
     be6:	5f 4f       	sbci	r21, 0xFF	; 255
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <__pack_f+0xf6>
     bea:	21 5c       	subi	r18, 0xC1	; 193
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	4f 4f       	sbci	r20, 0xFF	; 255
     bf0:	5f 4f       	sbci	r21, 0xFF	; 255
     bf2:	e0 e0       	ldi	r30, 0x00	; 0
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	20 30       	cpi	r18, 0x00	; 0
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	3a 07       	cpc	r19, r26
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	4a 07       	cpc	r20, r26
     c00:	a0 e4       	ldi	r26, 0x40	; 64
     c02:	5a 07       	cpc	r21, r26
     c04:	10 f0       	brcs	.+4      	; 0xc0a <__pack_f+0x10e>
     c06:	e1 e0       	ldi	r30, 0x01	; 1
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	79 01       	movw	r14, r18
     c0c:	8a 01       	movw	r16, r20
     c0e:	27 c0       	rjmp	.+78     	; 0xc5e <__pack_f+0x162>
     c10:	60 38       	cpi	r22, 0x80	; 128
     c12:	71 05       	cpc	r23, r1
     c14:	64 f5       	brge	.+88     	; 0xc6e <__pack_f+0x172>
     c16:	fb 01       	movw	r30, r22
     c18:	e1 58       	subi	r30, 0x81	; 129
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	d8 01       	movw	r26, r16
     c1e:	c7 01       	movw	r24, r14
     c20:	8f 77       	andi	r24, 0x7F	; 127
     c22:	90 70       	andi	r25, 0x00	; 0
     c24:	a0 70       	andi	r26, 0x00	; 0
     c26:	b0 70       	andi	r27, 0x00	; 0
     c28:	80 34       	cpi	r24, 0x40	; 64
     c2a:	91 05       	cpc	r25, r1
     c2c:	a1 05       	cpc	r26, r1
     c2e:	b1 05       	cpc	r27, r1
     c30:	39 f4       	brne	.+14     	; 0xc40 <__pack_f+0x144>
     c32:	e7 fe       	sbrs	r14, 7
     c34:	0d c0       	rjmp	.+26     	; 0xc50 <__pack_f+0x154>
     c36:	80 e4       	ldi	r24, 0x40	; 64
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	a0 e0       	ldi	r26, 0x00	; 0
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <__pack_f+0x14c>
     c40:	8f e3       	ldi	r24, 0x3F	; 63
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e8 0e       	add	r14, r24
     c4a:	f9 1e       	adc	r15, r25
     c4c:	0a 1f       	adc	r16, r26
     c4e:	1b 1f       	adc	r17, r27
     c50:	17 ff       	sbrs	r17, 7
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x162>
     c54:	16 95       	lsr	r17
     c56:	07 95       	ror	r16
     c58:	f7 94       	ror	r15
     c5a:	e7 94       	ror	r14
     c5c:	31 96       	adiw	r30, 0x01	; 1
     c5e:	87 e0       	ldi	r24, 0x07	; 7
     c60:	16 95       	lsr	r17
     c62:	07 95       	ror	r16
     c64:	f7 94       	ror	r15
     c66:	e7 94       	ror	r14
     c68:	8a 95       	dec	r24
     c6a:	d1 f7       	brne	.-12     	; 0xc60 <__pack_f+0x164>
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <__pack_f+0x17c>
     c6e:	ee 24       	eor	r14, r14
     c70:	ff 24       	eor	r15, r15
     c72:	87 01       	movw	r16, r14
     c74:	ef ef       	ldi	r30, 0xFF	; 255
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	6e 2f       	mov	r22, r30
     c7a:	67 95       	ror	r22
     c7c:	66 27       	eor	r22, r22
     c7e:	67 95       	ror	r22
     c80:	90 2f       	mov	r25, r16
     c82:	9f 77       	andi	r25, 0x7F	; 127
     c84:	d7 94       	ror	r13
     c86:	dd 24       	eor	r13, r13
     c88:	d7 94       	ror	r13
     c8a:	8e 2f       	mov	r24, r30
     c8c:	86 95       	lsr	r24
     c8e:	49 2f       	mov	r20, r25
     c90:	46 2b       	or	r20, r22
     c92:	58 2f       	mov	r21, r24
     c94:	5d 29       	or	r21, r13
     c96:	b7 01       	movw	r22, r14
     c98:	ca 01       	movw	r24, r20
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	08 95       	ret

00000ca6 <__unpack_f>:
     ca6:	fc 01       	movw	r30, r24
     ca8:	db 01       	movw	r26, r22
     caa:	40 81       	ld	r20, Z
     cac:	51 81       	ldd	r21, Z+1	; 0x01
     cae:	22 81       	ldd	r18, Z+2	; 0x02
     cb0:	62 2f       	mov	r22, r18
     cb2:	6f 77       	andi	r22, 0x7F	; 127
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	22 1f       	adc	r18, r18
     cb8:	22 27       	eor	r18, r18
     cba:	22 1f       	adc	r18, r18
     cbc:	93 81       	ldd	r25, Z+3	; 0x03
     cbe:	89 2f       	mov	r24, r25
     cc0:	88 0f       	add	r24, r24
     cc2:	82 2b       	or	r24, r18
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	99 1f       	adc	r25, r25
     cca:	99 27       	eor	r25, r25
     ccc:	99 1f       	adc	r25, r25
     cce:	11 96       	adiw	r26, 0x01	; 1
     cd0:	9c 93       	st	X, r25
     cd2:	11 97       	sbiw	r26, 0x01	; 1
     cd4:	21 15       	cp	r18, r1
     cd6:	31 05       	cpc	r19, r1
     cd8:	a9 f5       	brne	.+106    	; 0xd44 <__unpack_f+0x9e>
     cda:	41 15       	cp	r20, r1
     cdc:	51 05       	cpc	r21, r1
     cde:	61 05       	cpc	r22, r1
     ce0:	71 05       	cpc	r23, r1
     ce2:	11 f4       	brne	.+4      	; 0xce8 <__unpack_f+0x42>
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	37 c0       	rjmp	.+110    	; 0xd56 <__unpack_f+0xb0>
     ce8:	82 e8       	ldi	r24, 0x82	; 130
     cea:	9f ef       	ldi	r25, 0xFF	; 255
     cec:	13 96       	adiw	r26, 0x03	; 3
     cee:	9c 93       	st	X, r25
     cf0:	8e 93       	st	-X, r24
     cf2:	12 97       	sbiw	r26, 0x02	; 2
     cf4:	9a 01       	movw	r18, r20
     cf6:	ab 01       	movw	r20, r22
     cf8:	67 e0       	ldi	r22, 0x07	; 7
     cfa:	22 0f       	add	r18, r18
     cfc:	33 1f       	adc	r19, r19
     cfe:	44 1f       	adc	r20, r20
     d00:	55 1f       	adc	r21, r21
     d02:	6a 95       	dec	r22
     d04:	d1 f7       	brne	.-12     	; 0xcfa <__unpack_f+0x54>
     d06:	83 e0       	ldi	r24, 0x03	; 3
     d08:	8c 93       	st	X, r24
     d0a:	0d c0       	rjmp	.+26     	; 0xd26 <__unpack_f+0x80>
     d0c:	22 0f       	add	r18, r18
     d0e:	33 1f       	adc	r19, r19
     d10:	44 1f       	adc	r20, r20
     d12:	55 1f       	adc	r21, r21
     d14:	12 96       	adiw	r26, 0x02	; 2
     d16:	8d 91       	ld	r24, X+
     d18:	9c 91       	ld	r25, X
     d1a:	13 97       	sbiw	r26, 0x03	; 3
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	13 96       	adiw	r26, 0x03	; 3
     d20:	9c 93       	st	X, r25
     d22:	8e 93       	st	-X, r24
     d24:	12 97       	sbiw	r26, 0x02	; 2
     d26:	20 30       	cpi	r18, 0x00	; 0
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	38 07       	cpc	r19, r24
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	48 07       	cpc	r20, r24
     d30:	80 e4       	ldi	r24, 0x40	; 64
     d32:	58 07       	cpc	r21, r24
     d34:	58 f3       	brcs	.-42     	; 0xd0c <__unpack_f+0x66>
     d36:	14 96       	adiw	r26, 0x04	; 4
     d38:	2d 93       	st	X+, r18
     d3a:	3d 93       	st	X+, r19
     d3c:	4d 93       	st	X+, r20
     d3e:	5c 93       	st	X, r21
     d40:	17 97       	sbiw	r26, 0x07	; 7
     d42:	08 95       	ret
     d44:	2f 3f       	cpi	r18, 0xFF	; 255
     d46:	31 05       	cpc	r19, r1
     d48:	79 f4       	brne	.+30     	; 0xd68 <__unpack_f+0xc2>
     d4a:	41 15       	cp	r20, r1
     d4c:	51 05       	cpc	r21, r1
     d4e:	61 05       	cpc	r22, r1
     d50:	71 05       	cpc	r23, r1
     d52:	19 f4       	brne	.+6      	; 0xd5a <__unpack_f+0xb4>
     d54:	84 e0       	ldi	r24, 0x04	; 4
     d56:	8c 93       	st	X, r24
     d58:	08 95       	ret
     d5a:	64 ff       	sbrs	r22, 4
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <__unpack_f+0xbe>
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	8c 93       	st	X, r24
     d62:	12 c0       	rjmp	.+36     	; 0xd88 <__unpack_f+0xe2>
     d64:	1c 92       	st	X, r1
     d66:	10 c0       	rjmp	.+32     	; 0xd88 <__unpack_f+0xe2>
     d68:	2f 57       	subi	r18, 0x7F	; 127
     d6a:	30 40       	sbci	r19, 0x00	; 0
     d6c:	13 96       	adiw	r26, 0x03	; 3
     d6e:	3c 93       	st	X, r19
     d70:	2e 93       	st	-X, r18
     d72:	12 97       	sbiw	r26, 0x02	; 2
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	8c 93       	st	X, r24
     d78:	87 e0       	ldi	r24, 0x07	; 7
     d7a:	44 0f       	add	r20, r20
     d7c:	55 1f       	adc	r21, r21
     d7e:	66 1f       	adc	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	8a 95       	dec	r24
     d84:	d1 f7       	brne	.-12     	; 0xd7a <__unpack_f+0xd4>
     d86:	70 64       	ori	r23, 0x40	; 64
     d88:	14 96       	adiw	r26, 0x04	; 4
     d8a:	4d 93       	st	X+, r20
     d8c:	5d 93       	st	X+, r21
     d8e:	6d 93       	st	X+, r22
     d90:	7c 93       	st	X, r23
     d92:	17 97       	sbiw	r26, 0x07	; 7
     d94:	08 95       	ret

00000d96 <__fpcmp_parts_f>:
     d96:	1f 93       	push	r17
     d98:	dc 01       	movw	r26, r24
     d9a:	fb 01       	movw	r30, r22
     d9c:	9c 91       	ld	r25, X
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	08 f4       	brcc	.+2      	; 0xda4 <__fpcmp_parts_f+0xe>
     da2:	47 c0       	rjmp	.+142    	; 0xe32 <__fpcmp_parts_f+0x9c>
     da4:	80 81       	ld	r24, Z
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	08 f4       	brcc	.+2      	; 0xdac <__fpcmp_parts_f+0x16>
     daa:	43 c0       	rjmp	.+134    	; 0xe32 <__fpcmp_parts_f+0x9c>
     dac:	94 30       	cpi	r25, 0x04	; 4
     dae:	51 f4       	brne	.+20     	; 0xdc4 <__fpcmp_parts_f+0x2e>
     db0:	11 96       	adiw	r26, 0x01	; 1
     db2:	1c 91       	ld	r17, X
     db4:	84 30       	cpi	r24, 0x04	; 4
     db6:	99 f5       	brne	.+102    	; 0xe1e <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	68 2f       	mov	r22, r24
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	61 1b       	sub	r22, r17
     dc0:	71 09       	sbc	r23, r1
     dc2:	3f c0       	rjmp	.+126    	; 0xe42 <__fpcmp_parts_f+0xac>
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	21 f0       	breq	.+8      	; 0xdd0 <__fpcmp_parts_f+0x3a>
     dc8:	92 30       	cpi	r25, 0x02	; 2
     dca:	31 f4       	brne	.+12     	; 0xdd8 <__fpcmp_parts_f+0x42>
     dcc:	82 30       	cpi	r24, 0x02	; 2
     dce:	b9 f1       	breq	.+110    	; 0xe3e <__fpcmp_parts_f+0xa8>
     dd0:	81 81       	ldd	r24, Z+1	; 0x01
     dd2:	88 23       	and	r24, r24
     dd4:	89 f1       	breq	.+98     	; 0xe38 <__fpcmp_parts_f+0xa2>
     dd6:	2d c0       	rjmp	.+90     	; 0xe32 <__fpcmp_parts_f+0x9c>
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	1c 91       	ld	r17, X
     ddc:	11 97       	sbiw	r26, 0x01	; 1
     dde:	82 30       	cpi	r24, 0x02	; 2
     de0:	f1 f0       	breq	.+60     	; 0xe1e <__fpcmp_parts_f+0x88>
     de2:	81 81       	ldd	r24, Z+1	; 0x01
     de4:	18 17       	cp	r17, r24
     de6:	d9 f4       	brne	.+54     	; 0xe1e <__fpcmp_parts_f+0x88>
     de8:	12 96       	adiw	r26, 0x02	; 2
     dea:	2d 91       	ld	r18, X+
     dec:	3c 91       	ld	r19, X
     dee:	13 97       	sbiw	r26, 0x03	; 3
     df0:	82 81       	ldd	r24, Z+2	; 0x02
     df2:	93 81       	ldd	r25, Z+3	; 0x03
     df4:	82 17       	cp	r24, r18
     df6:	93 07       	cpc	r25, r19
     df8:	94 f0       	brlt	.+36     	; 0xe1e <__fpcmp_parts_f+0x88>
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	bc f0       	brlt	.+46     	; 0xe2e <__fpcmp_parts_f+0x98>
     e00:	14 96       	adiw	r26, 0x04	; 4
     e02:	8d 91       	ld	r24, X+
     e04:	9d 91       	ld	r25, X+
     e06:	0d 90       	ld	r0, X+
     e08:	bc 91       	ld	r27, X
     e0a:	a0 2d       	mov	r26, r0
     e0c:	24 81       	ldd	r18, Z+4	; 0x04
     e0e:	35 81       	ldd	r19, Z+5	; 0x05
     e10:	46 81       	ldd	r20, Z+6	; 0x06
     e12:	57 81       	ldd	r21, Z+7	; 0x07
     e14:	28 17       	cp	r18, r24
     e16:	39 07       	cpc	r19, r25
     e18:	4a 07       	cpc	r20, r26
     e1a:	5b 07       	cpc	r21, r27
     e1c:	18 f4       	brcc	.+6      	; 0xe24 <__fpcmp_parts_f+0x8e>
     e1e:	11 23       	and	r17, r17
     e20:	41 f0       	breq	.+16     	; 0xe32 <__fpcmp_parts_f+0x9c>
     e22:	0a c0       	rjmp	.+20     	; 0xe38 <__fpcmp_parts_f+0xa2>
     e24:	82 17       	cp	r24, r18
     e26:	93 07       	cpc	r25, r19
     e28:	a4 07       	cpc	r26, r20
     e2a:	b5 07       	cpc	r27, r21
     e2c:	40 f4       	brcc	.+16     	; 0xe3e <__fpcmp_parts_f+0xa8>
     e2e:	11 23       	and	r17, r17
     e30:	19 f0       	breq	.+6      	; 0xe38 <__fpcmp_parts_f+0xa2>
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	05 c0       	rjmp	.+10     	; 0xe42 <__fpcmp_parts_f+0xac>
     e38:	6f ef       	ldi	r22, 0xFF	; 255
     e3a:	7f ef       	ldi	r23, 0xFF	; 255
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <__fpcmp_parts_f+0xac>
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	cb 01       	movw	r24, r22
     e44:	1f 91       	pop	r17
     e46:	08 95       	ret

00000e48 <STACK_VidPushChar>:
#include"STACK.h"



void STACK_VidPushChar(struct CharStack* stack, u8 Copy_u8value)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <STACK_VidPushChar+0x6>
     e4e:	0f 92       	push	r0
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	9a 83       	std	Y+2, r25	; 0x02
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	6b 83       	std	Y+3, r22	; 0x03
    stack->data[++stack->top] = Copy_u8value;
     e5a:	e9 81       	ldd	r30, Y+1	; 0x01
     e5c:	fa 81       	ldd	r31, Y+2	; 0x02
     e5e:	80 81       	ld	r24, Z
     e60:	91 81       	ldd	r25, Z+1	; 0x01
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	e9 81       	ldd	r30, Y+1	; 0x01
     e66:	fa 81       	ldd	r31, Y+2	; 0x02
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	80 83       	st	Z, r24
     e6c:	e9 81       	ldd	r30, Y+1	; 0x01
     e6e:	fa 81       	ldd	r31, Y+2	; 0x02
     e70:	20 81       	ld	r18, Z
     e72:	31 81       	ldd	r19, Z+1	; 0x01
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	9a 81       	ldd	r25, Y+2	; 0x02
     e78:	82 0f       	add	r24, r18
     e7a:	93 1f       	adc	r25, r19
     e7c:	fc 01       	movw	r30, r24
     e7e:	32 96       	adiw	r30, 0x02	; 2
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	80 83       	st	Z, r24
}
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <STACK_VidPopChar>:


u8 STACK_VidPopChar(struct CharStack* stack)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	00 d0       	rcall	.+0      	; 0xe96 <STACK_VidPopChar+0x6>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
    return stack->data[stack->top--];
     e9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ea0:	fa 81       	ldd	r31, Y+2	; 0x02
     ea2:	20 81       	ld	r18, Z
     ea4:	31 81       	ldd	r19, Z+1	; 0x01
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	82 0f       	add	r24, r18
     eac:	93 1f       	adc	r25, r19
     eae:	fc 01       	movw	r30, r24
     eb0:	32 96       	adiw	r30, 0x02	; 2
     eb2:	40 81       	ld	r20, Z
     eb4:	c9 01       	movw	r24, r18
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	e9 81       	ldd	r30, Y+1	; 0x01
     eba:	fa 81       	ldd	r31, Y+2	; 0x02
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	80 83       	st	Z, r24
     ec0:	84 2f       	mov	r24, r20
}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <STACK_u8PeekChar>:


u8 STACK_u8PeekChar(struct CharStack* stack)
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <STACK_u8PeekChar+0x6>
     ed2:	0f 92       	push	r0
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	9a 83       	std	Y+2, r25	; 0x02
     eda:	89 83       	std	Y+1, r24	; 0x01
    if (stack->top == -1) {
     edc:	e9 81       	ldd	r30, Y+1	; 0x01
     ede:	fa 81       	ldd	r31, Y+2	; 0x02
     ee0:	80 81       	ld	r24, Z
     ee2:	91 81       	ldd	r25, Z+1	; 0x01
     ee4:	2f ef       	ldi	r18, 0xFF	; 255
     ee6:	8f 3f       	cpi	r24, 0xFF	; 255
     ee8:	92 07       	cpc	r25, r18
     eea:	11 f4       	brne	.+4      	; 0xef0 <STACK_u8PeekChar+0x24>
        return '\0';
     eec:	1b 82       	std	Y+3, r1	; 0x03
     eee:	0c c0       	rjmp	.+24     	; 0xf08 <STACK_u8PeekChar+0x3c>
    }
    return stack->data[stack->top];
     ef0:	e9 81       	ldd	r30, Y+1	; 0x01
     ef2:	fa 81       	ldd	r31, Y+2	; 0x02
     ef4:	20 81       	ld	r18, Z
     ef6:	31 81       	ldd	r19, Z+1	; 0x01
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	82 0f       	add	r24, r18
     efe:	93 1f       	adc	r25, r19
     f00:	fc 01       	movw	r30, r24
     f02:	32 96       	adiw	r30, 0x02	; 2
     f04:	80 81       	ld	r24, Z
     f06:	8b 83       	std	Y+3, r24	; 0x03
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <STACK_u32IsEmptyChar>:


u32 STACK_u32IsEmptyChar(struct CharStack* stack)
{
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <STACK_u32IsEmptyChar+0x6>
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <STACK_u32IsEmptyChar+0x8>
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <STACK_u32IsEmptyChar+0xa>
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	89 83       	std	Y+1, r24	; 0x01
    return stack->top == -1;
     f28:	e9 81       	ldd	r30, Y+1	; 0x01
     f2a:	fa 81       	ldd	r31, Y+2	; 0x02
     f2c:	80 81       	ld	r24, Z
     f2e:	91 81       	ldd	r25, Z+1	; 0x01
     f30:	1b 82       	std	Y+3, r1	; 0x03
     f32:	1c 82       	std	Y+4, r1	; 0x04
     f34:	1d 82       	std	Y+5, r1	; 0x05
     f36:	1e 82       	std	Y+6, r1	; 0x06
     f38:	2f ef       	ldi	r18, 0xFF	; 255
     f3a:	8f 3f       	cpi	r24, 0xFF	; 255
     f3c:	92 07       	cpc	r25, r18
     f3e:	41 f4       	brne	.+16     	; 0xf50 <STACK_u32IsEmptyChar+0x3a>
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	a0 e0       	ldi	r26, 0x00	; 0
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	8b 83       	std	Y+3, r24	; 0x03
     f4a:	9c 83       	std	Y+4, r25	; 0x04
     f4c:	ad 83       	std	Y+5, r26	; 0x05
     f4e:	be 83       	std	Y+6, r27	; 0x06
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	9c 81       	ldd	r25, Y+4	; 0x04
     f54:	ad 81       	ldd	r26, Y+5	; 0x05
     f56:	be 81       	ldd	r27, Y+6	; 0x06
}
     f58:	bc 01       	movw	r22, r24
     f5a:	cd 01       	movw	r24, r26
     f5c:	26 96       	adiw	r28, 0x06	; 6
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <STACK_VidPushDouble>:




void STACK_VidPushDouble(struct DoubleStack* stack, f64 Copy_f64value)
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	00 d0       	rcall	.+0      	; 0xf74 <STACK_VidPushDouble+0x6>
     f74:	00 d0       	rcall	.+0      	; 0xf76 <STACK_VidPushDouble+0x8>
     f76:	00 d0       	rcall	.+0      	; 0xf78 <STACK_VidPushDouble+0xa>
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	9a 83       	std	Y+2, r25	; 0x02
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	4b 83       	std	Y+3, r20	; 0x03
     f82:	5c 83       	std	Y+4, r21	; 0x04
     f84:	6d 83       	std	Y+5, r22	; 0x05
     f86:	7e 83       	std	Y+6, r23	; 0x06
    stack->data[++stack->top] = Copy_f64value;
     f88:	e9 81       	ldd	r30, Y+1	; 0x01
     f8a:	fa 81       	ldd	r31, Y+2	; 0x02
     f8c:	80 81       	ld	r24, Z
     f8e:	91 81       	ldd	r25, Z+1	; 0x01
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	e9 81       	ldd	r30, Y+1	; 0x01
     f94:	fa 81       	ldd	r31, Y+2	; 0x02
     f96:	91 83       	std	Z+1, r25	; 0x01
     f98:	80 83       	st	Z, r24
     f9a:	e9 81       	ldd	r30, Y+1	; 0x01
     f9c:	fa 81       	ldd	r31, Y+2	; 0x02
     f9e:	80 81       	ld	r24, Z
     fa0:	91 81       	ldd	r25, Z+1	; 0x01
     fa2:	29 81       	ldd	r18, Y+1	; 0x01
     fa4:	3a 81       	ldd	r19, Y+2	; 0x02
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	f9 01       	movw	r30, r18
     fb2:	e8 0f       	add	r30, r24
     fb4:	f9 1f       	adc	r31, r25
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	ad 81       	ldd	r26, Y+5	; 0x05
     fbc:	be 81       	ldd	r27, Y+6	; 0x06
     fbe:	80 83       	st	Z, r24
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	a2 83       	std	Z+2, r26	; 0x02
     fc4:	b3 83       	std	Z+3, r27	; 0x03
}
     fc6:	26 96       	adiw	r28, 0x06	; 6
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <STACK_f64PopDouble>:


f64 STACK_f64PopDouble(struct DoubleStack* stack)
{
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	00 d0       	rcall	.+0      	; 0xfde <STACK_f64PopDouble+0x6>
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	9a 83       	std	Y+2, r25	; 0x02
     fe4:	89 83       	std	Y+1, r24	; 0x01
    return stack->data[stack->top--];
     fe6:	e9 81       	ldd	r30, Y+1	; 0x01
     fe8:	fa 81       	ldd	r31, Y+2	; 0x02
     fea:	40 81       	ld	r20, Z
     fec:	51 81       	ldd	r21, Z+1	; 0x01
     fee:	29 81       	ldd	r18, Y+1	; 0x01
     ff0:	3a 81       	ldd	r19, Y+2	; 0x02
     ff2:	ca 01       	movw	r24, r20
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	f9 01       	movw	r30, r18
    1000:	e8 0f       	add	r30, r24
    1002:	f9 1f       	adc	r31, r25
    1004:	80 81       	ld	r24, Z
    1006:	91 81       	ldd	r25, Z+1	; 0x01
    1008:	a2 81       	ldd	r26, Z+2	; 0x02
    100a:	b3 81       	ldd	r27, Z+3	; 0x03
    100c:	9a 01       	movw	r18, r20
    100e:	21 50       	subi	r18, 0x01	; 1
    1010:	30 40       	sbci	r19, 0x00	; 0
    1012:	e9 81       	ldd	r30, Y+1	; 0x01
    1014:	fa 81       	ldd	r31, Y+2	; 0x02
    1016:	31 83       	std	Z+1, r19	; 0x01
    1018:	20 83       	st	Z, r18
}
    101a:	bc 01       	movw	r22, r24
    101c:	cd 01       	movw	r24, r26
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_Private.h"


ES_t DIO_enuInit(void)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	0f 92       	push	r0
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	89 83       	std	Y+1, r24	; 0x01

	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
    1036:	ea e3       	ldi	r30, 0x3A	; 58
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	8f ef       	ldi	r24, 0xFF	; 255
    103c:	80 83       	st	Z, r24

	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
    103e:	e7 e3       	ldi	r30, 0x37	; 55
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	86 eb       	ldi	r24, 0xB6	; 182
    1044:	80 83       	st	Z, r24

	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
    1046:	e4 e3       	ldi	r30, 0x34	; 52
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	86 eb       	ldi	r24, 0xB6	; 182
    104c:	80 83       	st	Z, r24

	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
    104e:	e1 e3       	ldi	r30, 0x31	; 49
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	86 eb       	ldi	r24, 0xB6	; 182
    1054:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
    1056:	eb e3       	ldi	r30, 0x3B	; 59
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	10 82       	st	Z, r1

	PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
    105c:	e8 e3       	ldi	r30, 0x38	; 56
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	8a e3       	ldi	r24, 0x3A	; 58
    1062:	80 83       	st	Z, r24

	PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
    1064:	e5 e3       	ldi	r30, 0x35	; 53
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	8a e3       	ldi	r24, 0x3A	; 58
    106a:	80 83       	st	Z, r24

	PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
    106c:	e2 e3       	ldi	r30, 0x32	; 50
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	8a e3       	ldi	r24, 0x3A	; 58
    1072:	80 83       	st	Z, r24

	Local_enuErrorStates = ES_OK;
    1074:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorStates;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
}
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <DIO_enuSetPortDir>:




ES_t DIO_enuSetPortDir(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	00 d0       	rcall	.+0      	; 0x1086 <DIO_enuSetPortDir+0x6>
    1086:	00 d0       	rcall	.+0      	; 0x1088 <DIO_enuSetPortDir+0x8>
    1088:	0f 92       	push	r0
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	8a 83       	std	Y+2, r24	; 0x02
    1090:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	84 30       	cpi	r24, 0x04	; 4
    109a:	a0 f5       	brcc	.+104    	; 0x1104 <DIO_enuSetPortDir+0x84>
	{
		switch(Copy_u8PortID)
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	3d 83       	std	Y+5, r19	; 0x05
    10a4:	2c 83       	std	Y+4, r18	; 0x04
    10a6:	8c 81       	ldd	r24, Y+4	; 0x04
    10a8:	9d 81       	ldd	r25, Y+5	; 0x05
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	91 05       	cpc	r25, r1
    10ae:	d1 f0       	breq	.+52     	; 0x10e4 <DIO_enuSetPortDir+0x64>
    10b0:	2c 81       	ldd	r18, Y+4	; 0x04
    10b2:	3d 81       	ldd	r19, Y+5	; 0x05
    10b4:	22 30       	cpi	r18, 0x02	; 2
    10b6:	31 05       	cpc	r19, r1
    10b8:	2c f4       	brge	.+10     	; 0x10c4 <DIO_enuSetPortDir+0x44>
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	9d 81       	ldd	r25, Y+5	; 0x05
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	61 f0       	breq	.+24     	; 0x10da <DIO_enuSetPortDir+0x5a>
    10c2:	1e c0       	rjmp	.+60     	; 0x1100 <DIO_enuSetPortDir+0x80>
    10c4:	2c 81       	ldd	r18, Y+4	; 0x04
    10c6:	3d 81       	ldd	r19, Y+5	; 0x05
    10c8:	22 30       	cpi	r18, 0x02	; 2
    10ca:	31 05       	cpc	r19, r1
    10cc:	81 f0       	breq	.+32     	; 0x10ee <DIO_enuSetPortDir+0x6e>
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	9d 81       	ldd	r25, Y+5	; 0x05
    10d2:	83 30       	cpi	r24, 0x03	; 3
    10d4:	91 05       	cpc	r25, r1
    10d6:	81 f0       	breq	.+32     	; 0x10f8 <DIO_enuSetPortDir+0x78>
    10d8:	13 c0       	rjmp	.+38     	; 0x1100 <DIO_enuSetPortDir+0x80>
		{
		case DIO_PORTA:
					DDRA = Copy_u8PortValue;break;
    10da:	ea e3       	ldi	r30, 0x3A	; 58
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	80 83       	st	Z, r24
    10e2:	0e c0       	rjmp	.+28     	; 0x1100 <DIO_enuSetPortDir+0x80>
		case DIO_PORTB:
					DDRB = Copy_u8PortValue;break;
    10e4:	e7 e3       	ldi	r30, 0x37	; 55
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	80 83       	st	Z, r24
    10ec:	09 c0       	rjmp	.+18     	; 0x1100 <DIO_enuSetPortDir+0x80>
		case DIO_PORTC:
					DDRC= Copy_u8PortValue;break;
    10ee:	e4 e3       	ldi	r30, 0x34	; 52
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	80 83       	st	Z, r24
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <DIO_enuSetPortDir+0x80>
		case DIO_PORTD:
					DDRD = Copy_u8PortValue;break;
    10f8:	e1 e3       	ldi	r30, 0x31	; 49
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	80 83       	st	Z, r24
		}
		Local_enuErrorStates = ES_OK;
    1100:	19 82       	std	Y+1, r1	; 0x01
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_enuSetPortDir+0x88>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
    1104:	83 e0       	ldi	r24, 0x03	; 3
    1106:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    1108:	89 81       	ldd	r24, Y+1	; 0x01
}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <DIO_enuSetPortVAL>:
ES_t DIO_enuSetPortVAL(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <DIO_enuSetPortVAL+0x6>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <DIO_enuSetPortVAL+0x8>
    1122:	0f 92       	push	r0
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	8a 83       	std	Y+2, r24	; 0x02
    112a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PortID <= DIO_PORTD)
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	84 30       	cpi	r24, 0x04	; 4
    1134:	a0 f5       	brcc	.+104    	; 0x119e <DIO_enuSetPortVAL+0x84>
		{
			switch(Copy_u8PortID)
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	3d 83       	std	Y+5, r19	; 0x05
    113e:	2c 83       	std	Y+4, r18	; 0x04
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	9d 81       	ldd	r25, Y+5	; 0x05
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	91 05       	cpc	r25, r1
    1148:	d1 f0       	breq	.+52     	; 0x117e <DIO_enuSetPortVAL+0x64>
    114a:	2c 81       	ldd	r18, Y+4	; 0x04
    114c:	3d 81       	ldd	r19, Y+5	; 0x05
    114e:	22 30       	cpi	r18, 0x02	; 2
    1150:	31 05       	cpc	r19, r1
    1152:	2c f4       	brge	.+10     	; 0x115e <DIO_enuSetPortVAL+0x44>
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	9d 81       	ldd	r25, Y+5	; 0x05
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	61 f0       	breq	.+24     	; 0x1174 <DIO_enuSetPortVAL+0x5a>
    115c:	1e c0       	rjmp	.+60     	; 0x119a <DIO_enuSetPortVAL+0x80>
    115e:	2c 81       	ldd	r18, Y+4	; 0x04
    1160:	3d 81       	ldd	r19, Y+5	; 0x05
    1162:	22 30       	cpi	r18, 0x02	; 2
    1164:	31 05       	cpc	r19, r1
    1166:	81 f0       	breq	.+32     	; 0x1188 <DIO_enuSetPortVAL+0x6e>
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	9d 81       	ldd	r25, Y+5	; 0x05
    116c:	83 30       	cpi	r24, 0x03	; 3
    116e:	91 05       	cpc	r25, r1
    1170:	81 f0       	breq	.+32     	; 0x1192 <DIO_enuSetPortVAL+0x78>
    1172:	13 c0       	rjmp	.+38     	; 0x119a <DIO_enuSetPortVAL+0x80>
			{
			case DIO_PORTA:
						PORTA = Copy_u8PortValue;break;
    1174:	eb e3       	ldi	r30, 0x3B	; 59
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	80 83       	st	Z, r24
    117c:	0e c0       	rjmp	.+28     	; 0x119a <DIO_enuSetPortVAL+0x80>
			case DIO_PORTB:
						PORTB = Copy_u8PortValue;break;
    117e:	e8 e3       	ldi	r30, 0x38	; 56
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	80 83       	st	Z, r24
    1186:	09 c0       	rjmp	.+18     	; 0x119a <DIO_enuSetPortVAL+0x80>
			case DIO_PORTC:
						PORTC= Copy_u8PortValue;break;
    1188:	e5 e3       	ldi	r30, 0x35	; 53
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	80 83       	st	Z, r24
    1190:	04 c0       	rjmp	.+8      	; 0x119a <DIO_enuSetPortVAL+0x80>
			case DIO_PORTD:
						PORTD = Copy_u8PortValue;break;
    1192:	e2 e3       	ldi	r30, 0x32	; 50
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	80 83       	st	Z, r24
			}
			Local_enuErrorStates = ES_OK;
    119a:	19 82       	std	Y+1, r1	; 0x01
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_enuSetPortVAL+0x88>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
    119e:	83 e0       	ldi	r24, 0x03	; 3
    11a0:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorStates;
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <DIO_enuToggelPort>:
ES_t DIO_enuToggelPort(u8 Copy_u8PortID)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <DIO_enuToggelPort+0x6>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <DIO_enuToggelPort+0x8>
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	84 30       	cpi	r24, 0x04	; 4
    11ca:	08 f0       	brcs	.+2      	; 0x11ce <DIO_enuToggelPort+0x1a>
    11cc:	40 c0       	rjmp	.+128    	; 0x124e <DIO_enuToggelPort+0x9a>
			{
				switch(Copy_u8PortID)
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	3c 83       	std	Y+4, r19	; 0x04
    11d6:	2b 83       	std	Y+3, r18	; 0x03
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	91 05       	cpc	r25, r1
    11e0:	e9 f0       	breq	.+58     	; 0x121c <DIO_enuToggelPort+0x68>
    11e2:	2b 81       	ldd	r18, Y+3	; 0x03
    11e4:	3c 81       	ldd	r19, Y+4	; 0x04
    11e6:	22 30       	cpi	r18, 0x02	; 2
    11e8:	31 05       	cpc	r19, r1
    11ea:	2c f4       	brge	.+10     	; 0x11f6 <DIO_enuToggelPort+0x42>
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	61 f0       	breq	.+24     	; 0x120c <DIO_enuToggelPort+0x58>
    11f4:	2a c0       	rjmp	.+84     	; 0x124a <DIO_enuToggelPort+0x96>
    11f6:	2b 81       	ldd	r18, Y+3	; 0x03
    11f8:	3c 81       	ldd	r19, Y+4	; 0x04
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	b1 f0       	breq	.+44     	; 0x122c <DIO_enuToggelPort+0x78>
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	83 30       	cpi	r24, 0x03	; 3
    1206:	91 05       	cpc	r25, r1
    1208:	c9 f0       	breq	.+50     	; 0x123c <DIO_enuToggelPort+0x88>
    120a:	1f c0       	rjmp	.+62     	; 0x124a <DIO_enuToggelPort+0x96>
				{
				case DIO_PORTA:
							PORTA = ~PORTA ;break;
    120c:	ab e3       	ldi	r26, 0x3B	; 59
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	eb e3       	ldi	r30, 0x3B	; 59
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	80 95       	com	r24
    1218:	8c 93       	st	X, r24
    121a:	17 c0       	rjmp	.+46     	; 0x124a <DIO_enuToggelPort+0x96>
				case DIO_PORTB:
							PORTB = ~PORTB ;break;
    121c:	a8 e3       	ldi	r26, 0x38	; 56
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e8 e3       	ldi	r30, 0x38	; 56
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	80 95       	com	r24
    1228:	8c 93       	st	X, r24
    122a:	0f c0       	rjmp	.+30     	; 0x124a <DIO_enuToggelPort+0x96>
				case DIO_PORTC:
							PORTC = ~PORTC ;break;
    122c:	a5 e3       	ldi	r26, 0x35	; 53
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e5 e3       	ldi	r30, 0x35	; 53
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	80 95       	com	r24
    1238:	8c 93       	st	X, r24
    123a:	07 c0       	rjmp	.+14     	; 0x124a <DIO_enuToggelPort+0x96>
				case DIO_PORTD:
							PORTD = ~PORTD ;break;
    123c:	a2 e3       	ldi	r26, 0x32	; 50
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e2 e3       	ldi	r30, 0x32	; 50
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	80 95       	com	r24
    1248:	8c 93       	st	X, r24
				}
				Local_enuErrorStates = ES_OK;
    124a:	19 82       	std	Y+1, r1	; 0x01
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_enuToggelPort+0x9e>
			}
			else
			{
				Local_enuErrorStates = ES_Out_Of_Range;
    124e:	83 e0       	ldi	r24, 0x03	; 3
    1250:	89 83       	std	Y+1, r24	; 0x01
			}
	return Local_enuErrorStates;
    1252:	89 81       	ldd	r24, Y+1	; 0x01
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <DIO_enuGetPortVAL>:
ES_t DIO_enuGetPortVAL(u8 Copy_u8PortID,u8 * Copy_Pu8Value)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <DIO_enuGetPortVAL+0x6>
    1268:	00 d0       	rcall	.+0      	; 0x126a <DIO_enuGetPortVAL+0x8>
    126a:	00 d0       	rcall	.+0      	; 0x126c <DIO_enuGetPortVAL+0xa>
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	8a 83       	std	Y+2, r24	; 0x02
    1272:	7c 83       	std	Y+4, r23	; 0x04
    1274:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	09 f4       	brne	.+2      	; 0x1284 <DIO_enuGetPortVAL+0x22>
    1282:	42 c0       	rjmp	.+132    	; 0x1308 <DIO_enuGetPortVAL+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	84 30       	cpi	r24, 0x04	; 4
    1288:	e0 f5       	brcc	.+120    	; 0x1302 <DIO_enuGetPortVAL+0xa0>
		{
			switch(Copy_u8PortID)
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	3e 83       	std	Y+6, r19	; 0x06
    1292:	2d 83       	std	Y+5, r18	; 0x05
    1294:	8d 81       	ldd	r24, Y+5	; 0x05
    1296:	9e 81       	ldd	r25, Y+6	; 0x06
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	91 05       	cpc	r25, r1
    129c:	e1 f0       	breq	.+56     	; 0x12d6 <DIO_enuGetPortVAL+0x74>
    129e:	2d 81       	ldd	r18, Y+5	; 0x05
    12a0:	3e 81       	ldd	r19, Y+6	; 0x06
    12a2:	22 30       	cpi	r18, 0x02	; 2
    12a4:	31 05       	cpc	r19, r1
    12a6:	2c f4       	brge	.+10     	; 0x12b2 <DIO_enuGetPortVAL+0x50>
    12a8:	8d 81       	ldd	r24, Y+5	; 0x05
    12aa:	9e 81       	ldd	r25, Y+6	; 0x06
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	61 f0       	breq	.+24     	; 0x12c8 <DIO_enuGetPortVAL+0x66>
    12b0:	26 c0       	rjmp	.+76     	; 0x12fe <DIO_enuGetPortVAL+0x9c>
    12b2:	2d 81       	ldd	r18, Y+5	; 0x05
    12b4:	3e 81       	ldd	r19, Y+6	; 0x06
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	a1 f0       	breq	.+40     	; 0x12e4 <DIO_enuGetPortVAL+0x82>
    12bc:	8d 81       	ldd	r24, Y+5	; 0x05
    12be:	9e 81       	ldd	r25, Y+6	; 0x06
    12c0:	83 30       	cpi	r24, 0x03	; 3
    12c2:	91 05       	cpc	r25, r1
    12c4:	b1 f0       	breq	.+44     	; 0x12f2 <DIO_enuGetPortVAL+0x90>
    12c6:	1b c0       	rjmp	.+54     	; 0x12fe <DIO_enuGetPortVAL+0x9c>
			{
				case DIO_PORTA:
					*Copy_Pu8Value = PINA ;break;
    12c8:	e9 e3       	ldi	r30, 0x39	; 57
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	eb 81       	ldd	r30, Y+3	; 0x03
    12d0:	fc 81       	ldd	r31, Y+4	; 0x04
    12d2:	80 83       	st	Z, r24
    12d4:	14 c0       	rjmp	.+40     	; 0x12fe <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTB:
					*Copy_Pu8Value = PINB ;break;
    12d6:	e6 e3       	ldi	r30, 0x36	; 54
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	eb 81       	ldd	r30, Y+3	; 0x03
    12de:	fc 81       	ldd	r31, Y+4	; 0x04
    12e0:	80 83       	st	Z, r24
    12e2:	0d c0       	rjmp	.+26     	; 0x12fe <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTC:
					*Copy_Pu8Value = PINC ;break;
    12e4:	e3 e3       	ldi	r30, 0x33	; 51
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	eb 81       	ldd	r30, Y+3	; 0x03
    12ec:	fc 81       	ldd	r31, Y+4	; 0x04
    12ee:	80 83       	st	Z, r24
    12f0:	06 c0       	rjmp	.+12     	; 0x12fe <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTD:
					*Copy_Pu8Value = PIND ;break;
    12f2:	e0 e3       	ldi	r30, 0x30	; 48
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	eb 81       	ldd	r30, Y+3	; 0x03
    12fa:	fc 81       	ldd	r31, Y+4	; 0x04
    12fc:	80 83       	st	Z, r24
			}
			Local_enuErrorStates = ES_OK;
    12fe:	19 82       	std	Y+1, r1	; 0x01
    1300:	05 c0       	rjmp	.+10     	; 0x130c <DIO_enuGetPortVAL+0xaa>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
    1302:	83 e0       	ldi	r24, 0x03	; 3
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	02 c0       	rjmp	.+4      	; 0x130c <DIO_enuGetPortVAL+0xaa>
		}

	}
	else
	{
		 Local_enuErrorStates = ES_NULLPOINTER;
    1308:	82 e0       	ldi	r24, 0x02	; 2
    130a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    130c:	89 81       	ldd	r24, Y+1	; 0x01
}
    130e:	26 96       	adiw	r28, 0x06	; 6
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <DIO_enuSetPINDir>:




ES_t DIO_enuSetPINDir(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <DIO_enuSetPINDir+0x6>
    1326:	00 d0       	rcall	.+0      	; 0x1328 <DIO_enuSetPINDir+0x8>
    1328:	00 d0       	rcall	.+0      	; 0x132a <DIO_enuSetPINDir+0xa>
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	8a 83       	std	Y+2, r24	; 0x02
    1330:	6b 83       	std	Y+3, r22	; 0x03
    1332:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	84 30       	cpi	r24, 0x04	; 4
    133c:	08 f0       	brcs	.+2      	; 0x1340 <DIO_enuSetPINDir+0x20>
    133e:	d0 c0       	rjmp	.+416    	; 0x14e0 <DIO_enuSetPINDir+0x1c0>
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	88 30       	cpi	r24, 0x08	; 8
    1344:	08 f0       	brcs	.+2      	; 0x1348 <DIO_enuSetPINDir+0x28>
    1346:	cc c0       	rjmp	.+408    	; 0x14e0 <DIO_enuSetPINDir+0x1c0>
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	82 30       	cpi	r24, 0x02	; 2
    134c:	08 f0       	brcs	.+2      	; 0x1350 <DIO_enuSetPINDir+0x30>
    134e:	c8 c0       	rjmp	.+400    	; 0x14e0 <DIO_enuSetPINDir+0x1c0>
	{

			switch(Copy_u8PortID)
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	3e 83       	std	Y+6, r19	; 0x06
    1358:	2d 83       	std	Y+5, r18	; 0x05
    135a:	6d 81       	ldd	r22, Y+5	; 0x05
    135c:	7e 81       	ldd	r23, Y+6	; 0x06
    135e:	61 30       	cpi	r22, 0x01	; 1
    1360:	71 05       	cpc	r23, r1
    1362:	09 f4       	brne	.+2      	; 0x1366 <DIO_enuSetPINDir+0x46>
    1364:	41 c0       	rjmp	.+130    	; 0x13e8 <DIO_enuSetPINDir+0xc8>
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	82 30       	cpi	r24, 0x02	; 2
    136c:	91 05       	cpc	r25, r1
    136e:	34 f4       	brge	.+12     	; 0x137c <DIO_enuSetPINDir+0x5c>
    1370:	2d 81       	ldd	r18, Y+5	; 0x05
    1372:	3e 81       	ldd	r19, Y+6	; 0x06
    1374:	21 15       	cp	r18, r1
    1376:	31 05       	cpc	r19, r1
    1378:	71 f0       	breq	.+28     	; 0x1396 <DIO_enuSetPINDir+0x76>
    137a:	b0 c0       	rjmp	.+352    	; 0x14dc <DIO_enuSetPINDir+0x1bc>
    137c:	6d 81       	ldd	r22, Y+5	; 0x05
    137e:	7e 81       	ldd	r23, Y+6	; 0x06
    1380:	62 30       	cpi	r22, 0x02	; 2
    1382:	71 05       	cpc	r23, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <DIO_enuSetPINDir+0x68>
    1386:	59 c0       	rjmp	.+178    	; 0x143a <DIO_enuSetPINDir+0x11a>
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	9e 81       	ldd	r25, Y+6	; 0x06
    138c:	83 30       	cpi	r24, 0x03	; 3
    138e:	91 05       	cpc	r25, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <DIO_enuSetPINDir+0x74>
    1392:	7c c0       	rjmp	.+248    	; 0x148c <DIO_enuSetPINDir+0x16c>
    1394:	a3 c0       	rjmp	.+326    	; 0x14dc <DIO_enuSetPINDir+0x1bc>
			{
				case DIO_PORTA:
							DDRA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    1396:	aa e3       	ldi	r26, 0x3A	; 58
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	ea e3       	ldi	r30, 0x3A	; 58
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	48 2f       	mov	r20, r24
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <DIO_enuSetPINDir+0x92>
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	2a 95       	dec	r18
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <DIO_enuSetPINDir+0x8e>
    13b6:	80 95       	com	r24
    13b8:	84 23       	and	r24, r20
    13ba:	8c 93       	st	X, r24
							DDRA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    13bc:	aa e3       	ldi	r26, 0x3A	; 58
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	ea e3       	ldi	r30, 0x3A	; 58
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	b9 01       	movw	r22, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <DIO_enuSetPINDir+0xbc>
    13d8:	66 0f       	add	r22, r22
    13da:	77 1f       	adc	r23, r23
    13dc:	8a 95       	dec	r24
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <DIO_enuSetPINDir+0xb8>
    13e0:	cb 01       	movw	r24, r22
    13e2:	84 2b       	or	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	7a c0       	rjmp	.+244    	; 0x14dc <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTB:
							DDRB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    13e8:	a7 e3       	ldi	r26, 0x37	; 55
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e7 e3       	ldi	r30, 0x37	; 55
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_enuSetPINDir+0xe4>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	2a 95       	dec	r18
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_enuSetPINDir+0xe0>
    1408:	80 95       	com	r24
    140a:	84 23       	and	r24, r20
    140c:	8c 93       	st	X, r24
							DDRB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    140e:	a7 e3       	ldi	r26, 0x37	; 55
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e7 e3       	ldi	r30, 0x37	; 55
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8c 81       	ldd	r24, Y+4	; 0x04
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	88 2f       	mov	r24, r24
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	b9 01       	movw	r22, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_enuSetPINDir+0x10e>
    142a:	66 0f       	add	r22, r22
    142c:	77 1f       	adc	r23, r23
    142e:	8a 95       	dec	r24
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_enuSetPINDir+0x10a>
    1432:	cb 01       	movw	r24, r22
    1434:	84 2b       	or	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	51 c0       	rjmp	.+162    	; 0x14dc <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTC:
							DDRC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    143a:	a4 e3       	ldi	r26, 0x34	; 52
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e4 e3       	ldi	r30, 0x34	; 52
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_enuSetPINDir+0x136>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	2a 95       	dec	r18
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_enuSetPINDir+0x132>
    145a:	80 95       	com	r24
    145c:	84 23       	and	r24, r20
    145e:	8c 93       	st	X, r24
							DDRC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    1460:	a4 e3       	ldi	r26, 0x34	; 52
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e4 e3       	ldi	r30, 0x34	; 52
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	b9 01       	movw	r22, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <DIO_enuSetPINDir+0x160>
    147c:	66 0f       	add	r22, r22
    147e:	77 1f       	adc	r23, r23
    1480:	8a 95       	dec	r24
    1482:	e2 f7       	brpl	.-8      	; 0x147c <DIO_enuSetPINDir+0x15c>
    1484:	cb 01       	movw	r24, r22
    1486:	84 2b       	or	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	28 c0       	rjmp	.+80     	; 0x14dc <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTD:
							DDRD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    148c:	a1 e3       	ldi	r26, 0x31	; 49
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e1 e3       	ldi	r30, 0x31	; 49
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_enuSetPINDir+0x188>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	2a 95       	dec	r18
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_enuSetPINDir+0x184>
    14ac:	80 95       	com	r24
    14ae:	84 23       	and	r24, r20
    14b0:	8c 93       	st	X, r24
							DDRD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    14b2:	a1 e3       	ldi	r26, 0x31	; 49
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e1 e3       	ldi	r30, 0x31	; 49
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	88 2f       	mov	r24, r24
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	b9 01       	movw	r22, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <DIO_enuSetPINDir+0x1b2>
    14ce:	66 0f       	add	r22, r22
    14d0:	77 1f       	adc	r23, r23
    14d2:	8a 95       	dec	r24
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <DIO_enuSetPINDir+0x1ae>
    14d6:	cb 01       	movw	r24, r22
    14d8:	84 2b       	or	r24, r20
    14da:	8c 93       	st	X, r24
							break;
			}
			Local_enuErrorStates = ES_OK;
    14dc:	19 82       	std	Y+1, r1	; 0x01
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <DIO_enuSetPINDir+0x1c4>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
    14e0:	83 e0       	ldi	r24, 0x03	; 3
    14e2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14e6:	26 96       	adiw	r28, 0x06	; 6
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <DIO_enuSetPINVAL>:
ES_t DIO_enuSetPINVAL(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <DIO_enuSetPINVAL+0x6>
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <DIO_enuSetPINVAL+0x8>
    1500:	00 d0       	rcall	.+0      	; 0x1502 <DIO_enuSetPINVAL+0xa>
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	8a 83       	std	Y+2, r24	; 0x02
    1508:	6b 83       	std	Y+3, r22	; 0x03
    150a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	84 30       	cpi	r24, 0x04	; 4
    1514:	08 f0       	brcs	.+2      	; 0x1518 <DIO_enuSetPINVAL+0x20>
    1516:	d0 c0       	rjmp	.+416    	; 0x16b8 <DIO_enuSetPINVAL+0x1c0>
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	88 30       	cpi	r24, 0x08	; 8
    151c:	08 f0       	brcs	.+2      	; 0x1520 <DIO_enuSetPINVAL+0x28>
    151e:	cc c0       	rjmp	.+408    	; 0x16b8 <DIO_enuSetPINVAL+0x1c0>
    1520:	8c 81       	ldd	r24, Y+4	; 0x04
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	08 f0       	brcs	.+2      	; 0x1528 <DIO_enuSetPINVAL+0x30>
    1526:	c8 c0       	rjmp	.+400    	; 0x16b8 <DIO_enuSetPINVAL+0x1c0>
		{

				switch(Copy_u8PortID)
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	3e 83       	std	Y+6, r19	; 0x06
    1530:	2d 83       	std	Y+5, r18	; 0x05
    1532:	6d 81       	ldd	r22, Y+5	; 0x05
    1534:	7e 81       	ldd	r23, Y+6	; 0x06
    1536:	61 30       	cpi	r22, 0x01	; 1
    1538:	71 05       	cpc	r23, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <DIO_enuSetPINVAL+0x46>
    153c:	41 c0       	rjmp	.+130    	; 0x15c0 <DIO_enuSetPINVAL+0xc8>
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	82 30       	cpi	r24, 0x02	; 2
    1544:	91 05       	cpc	r25, r1
    1546:	34 f4       	brge	.+12     	; 0x1554 <DIO_enuSetPINVAL+0x5c>
    1548:	2d 81       	ldd	r18, Y+5	; 0x05
    154a:	3e 81       	ldd	r19, Y+6	; 0x06
    154c:	21 15       	cp	r18, r1
    154e:	31 05       	cpc	r19, r1
    1550:	71 f0       	breq	.+28     	; 0x156e <DIO_enuSetPINVAL+0x76>
    1552:	b0 c0       	rjmp	.+352    	; 0x16b4 <DIO_enuSetPINVAL+0x1bc>
    1554:	6d 81       	ldd	r22, Y+5	; 0x05
    1556:	7e 81       	ldd	r23, Y+6	; 0x06
    1558:	62 30       	cpi	r22, 0x02	; 2
    155a:	71 05       	cpc	r23, r1
    155c:	09 f4       	brne	.+2      	; 0x1560 <DIO_enuSetPINVAL+0x68>
    155e:	59 c0       	rjmp	.+178    	; 0x1612 <DIO_enuSetPINVAL+0x11a>
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	9e 81       	ldd	r25, Y+6	; 0x06
    1564:	83 30       	cpi	r24, 0x03	; 3
    1566:	91 05       	cpc	r25, r1
    1568:	09 f4       	brne	.+2      	; 0x156c <DIO_enuSetPINVAL+0x74>
    156a:	7c c0       	rjmp	.+248    	; 0x1664 <DIO_enuSetPINVAL+0x16c>
    156c:	a3 c0       	rjmp	.+326    	; 0x16b4 <DIO_enuSetPINVAL+0x1bc>
				{
					case DIO_PORTA:
								PORTA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    156e:	ab e3       	ldi	r26, 0x3B	; 59
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	eb e3       	ldi	r30, 0x3B	; 59
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 c0       	rjmp	.+4      	; 0x158a <DIO_enuSetPINVAL+0x92>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	2a 95       	dec	r18
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <DIO_enuSetPINVAL+0x8e>
    158e:	80 95       	com	r24
    1590:	84 23       	and	r24, r20
    1592:	8c 93       	st	X, r24
								PORTA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    1594:	ab e3       	ldi	r26, 0x3B	; 59
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	eb e3       	ldi	r30, 0x3B	; 59
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	48 2f       	mov	r20, r24
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	b9 01       	movw	r22, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_enuSetPINVAL+0xbc>
    15b0:	66 0f       	add	r22, r22
    15b2:	77 1f       	adc	r23, r23
    15b4:	8a 95       	dec	r24
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <DIO_enuSetPINVAL+0xb8>
    15b8:	cb 01       	movw	r24, r22
    15ba:	84 2b       	or	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	7a c0       	rjmp	.+244    	; 0x16b4 <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTB:
								PORTB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    15c0:	a8 e3       	ldi	r26, 0x38	; 56
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e8 e3       	ldi	r30, 0x38	; 56
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	48 2f       	mov	r20, r24
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <DIO_enuSetPINVAL+0xe4>
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	2a 95       	dec	r18
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <DIO_enuSetPINVAL+0xe0>
    15e0:	80 95       	com	r24
    15e2:	84 23       	and	r24, r20
    15e4:	8c 93       	st	X, r24
								PORTB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    15e6:	a8 e3       	ldi	r26, 0x38	; 56
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e8 e3       	ldi	r30, 0x38	; 56
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	b9 01       	movw	r22, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <DIO_enuSetPINVAL+0x10e>
    1602:	66 0f       	add	r22, r22
    1604:	77 1f       	adc	r23, r23
    1606:	8a 95       	dec	r24
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <DIO_enuSetPINVAL+0x10a>
    160a:	cb 01       	movw	r24, r22
    160c:	84 2b       	or	r24, r20
    160e:	8c 93       	st	X, r24
    1610:	51 c0       	rjmp	.+162    	; 0x16b4 <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTC:
								PORTC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    1612:	a5 e3       	ldi	r26, 0x35	; 53
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e5 e3       	ldi	r30, 0x35	; 53
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	48 2f       	mov	r20, r24
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_enuSetPINVAL+0x136>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	2a 95       	dec	r18
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_enuSetPINVAL+0x132>
    1632:	80 95       	com	r24
    1634:	84 23       	and	r24, r20
    1636:	8c 93       	st	X, r24
								PORTC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    1638:	a5 e3       	ldi	r26, 0x35	; 53
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e5 e3       	ldi	r30, 0x35	; 53
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	48 2f       	mov	r20, r24
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	b9 01       	movw	r22, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <DIO_enuSetPINVAL+0x160>
    1654:	66 0f       	add	r22, r22
    1656:	77 1f       	adc	r23, r23
    1658:	8a 95       	dec	r24
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <DIO_enuSetPINVAL+0x15c>
    165c:	cb 01       	movw	r24, r22
    165e:	84 2b       	or	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	28 c0       	rjmp	.+80     	; 0x16b4 <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTD:
								PORTD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    1664:	a2 e3       	ldi	r26, 0x32	; 50
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e2 e3       	ldi	r30, 0x32	; 50
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	48 2f       	mov	r20, r24
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_enuSetPINVAL+0x188>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	2a 95       	dec	r18
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO_enuSetPINVAL+0x184>
    1684:	80 95       	com	r24
    1686:	84 23       	and	r24, r20
    1688:	8c 93       	st	X, r24
								PORTD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    168a:	a2 e3       	ldi	r26, 0x32	; 50
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e2 e3       	ldi	r30, 0x32	; 50
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8c 81       	ldd	r24, Y+4	; 0x04
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	88 2f       	mov	r24, r24
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	b9 01       	movw	r22, r18
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <DIO_enuSetPINVAL+0x1b2>
    16a6:	66 0f       	add	r22, r22
    16a8:	77 1f       	adc	r23, r23
    16aa:	8a 95       	dec	r24
    16ac:	e2 f7       	brpl	.-8      	; 0x16a6 <DIO_enuSetPINVAL+0x1ae>
    16ae:	cb 01       	movw	r24, r22
    16b0:	84 2b       	or	r24, r20
    16b2:	8c 93       	st	X, r24
								break;
				}
				Local_enuErrorStates = ES_OK;
    16b4:	19 82       	std	Y+1, r1	; 0x01
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <DIO_enuSetPINVAL+0x1c4>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
    16b8:	83 e0       	ldi	r24, 0x03	; 3
    16ba:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorStates;
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    16be:	26 96       	adiw	r28, 0x06	; 6
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <DIO_enuToggelPIN>:
ES_t DIO_enuToggelPIN(u8 Copy_u8PortID,u8 Copy_u8PINID)
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <DIO_enuToggelPIN+0x6>
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <DIO_enuToggelPIN+0x8>
    16d8:	0f 92       	push	r0
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	8a 83       	std	Y+2, r24	; 0x02
    16e0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	84 30       	cpi	r24, 0x04	; 4
    16ea:	08 f0       	brcs	.+2      	; 0x16ee <DIO_enuToggelPIN+0x1e>
    16ec:	74 c0       	rjmp	.+232    	; 0x17d6 <DIO_enuToggelPIN+0x106>
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	88 30       	cpi	r24, 0x08	; 8
    16f2:	08 f0       	brcs	.+2      	; 0x16f6 <DIO_enuToggelPIN+0x26>
    16f4:	70 c0       	rjmp	.+224    	; 0x17d6 <DIO_enuToggelPIN+0x106>
			{

					switch(Copy_u8PortID)
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	3d 83       	std	Y+5, r19	; 0x05
    16fe:	2c 83       	std	Y+4, r18	; 0x04
    1700:	8c 81       	ldd	r24, Y+4	; 0x04
    1702:	9d 81       	ldd	r25, Y+5	; 0x05
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	91 05       	cpc	r25, r1
    1708:	49 f1       	breq	.+82     	; 0x175c <DIO_enuToggelPIN+0x8c>
    170a:	2c 81       	ldd	r18, Y+4	; 0x04
    170c:	3d 81       	ldd	r19, Y+5	; 0x05
    170e:	22 30       	cpi	r18, 0x02	; 2
    1710:	31 05       	cpc	r19, r1
    1712:	2c f4       	brge	.+10     	; 0x171e <DIO_enuToggelPIN+0x4e>
    1714:	8c 81       	ldd	r24, Y+4	; 0x04
    1716:	9d 81       	ldd	r25, Y+5	; 0x05
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	61 f0       	breq	.+24     	; 0x1734 <DIO_enuToggelPIN+0x64>
    171c:	5a c0       	rjmp	.+180    	; 0x17d2 <DIO_enuToggelPIN+0x102>
    171e:	2c 81       	ldd	r18, Y+4	; 0x04
    1720:	3d 81       	ldd	r19, Y+5	; 0x05
    1722:	22 30       	cpi	r18, 0x02	; 2
    1724:	31 05       	cpc	r19, r1
    1726:	71 f1       	breq	.+92     	; 0x1784 <DIO_enuToggelPIN+0xb4>
    1728:	8c 81       	ldd	r24, Y+4	; 0x04
    172a:	9d 81       	ldd	r25, Y+5	; 0x05
    172c:	83 30       	cpi	r24, 0x03	; 3
    172e:	91 05       	cpc	r25, r1
    1730:	e9 f1       	breq	.+122    	; 0x17ac <DIO_enuToggelPIN+0xdc>
    1732:	4f c0       	rjmp	.+158    	; 0x17d2 <DIO_enuToggelPIN+0x102>
					{
						case DIO_PORTA:
									PORTA ^=(DIO_MASK_BIT<<Copy_u8PINID);
    1734:	ab e3       	ldi	r26, 0x3B	; 59
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	eb e3       	ldi	r30, 0x3B	; 59
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	48 2f       	mov	r20, r24
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	02 2e       	mov	r0, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <DIO_enuToggelPIN+0x82>
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	0a 94       	dec	r0
    1754:	e2 f7       	brpl	.-8      	; 0x174e <DIO_enuToggelPIN+0x7e>
    1756:	84 27       	eor	r24, r20
    1758:	8c 93       	st	X, r24
    175a:	3b c0       	rjmp	.+118    	; 0x17d2 <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTB:
									PORTB ^=(DIO_MASK_BIT<<Copy_u8PINID);
    175c:	a8 e3       	ldi	r26, 0x38	; 56
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e8 e3       	ldi	r30, 0x38	; 56
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 2e       	mov	r0, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <DIO_enuToggelPIN+0xaa>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	0a 94       	dec	r0
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <DIO_enuToggelPIN+0xa6>
    177e:	84 27       	eor	r24, r20
    1780:	8c 93       	st	X, r24
    1782:	27 c0       	rjmp	.+78     	; 0x17d2 <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTC:
									PORTC ^=(DIO_MASK_BIT<<Copy_u8PINID);
    1784:	a5 e3       	ldi	r26, 0x35	; 53
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e5 e3       	ldi	r30, 0x35	; 53
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	48 2f       	mov	r20, r24
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	02 2e       	mov	r0, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <DIO_enuToggelPIN+0xd2>
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	0a 94       	dec	r0
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <DIO_enuToggelPIN+0xce>
    17a6:	84 27       	eor	r24, r20
    17a8:	8c 93       	st	X, r24
    17aa:	13 c0       	rjmp	.+38     	; 0x17d2 <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTD:
									PORTD ^=(DIO_MASK_BIT<<Copy_u8PINID);
    17ac:	a2 e3       	ldi	r26, 0x32	; 50
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e2 e3       	ldi	r30, 0x32	; 50
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 2e       	mov	r0, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <DIO_enuToggelPIN+0xfa>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	0a 94       	dec	r0
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <DIO_enuToggelPIN+0xf6>
    17ce:	84 27       	eor	r24, r20
    17d0:	8c 93       	st	X, r24
									break;
					}
					Local_enuErrorStates = ES_OK;
    17d2:	19 82       	std	Y+1, r1	; 0x01
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <DIO_enuToggelPIN+0x10a>
			}
			else
			{
				Local_enuErrorStates = ES_Out_Of_Range;
    17d6:	83 e0       	ldi	r24, 0x03	; 3
    17d8:	89 83       	std	Y+1, r24	; 0x01
			}

	return Local_enuErrorStates;
    17da:	89 81       	ldd	r24, Y+1	; 0x01
}
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <DIO_enuGetPINVAL>:
ES_t DIO_enuGetPINVAL(u8 Copy_u8PortID,u8 Copy_u8PINID,u8 * Copy_Pu8Value)
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	27 97       	sbiw	r28, 0x07	; 7
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	8a 83       	std	Y+2, r24	; 0x02
    1802:	6b 83       	std	Y+3, r22	; 0x03
    1804:	5d 83       	std	Y+5, r21	; 0x05
    1806:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	9d 81       	ldd	r25, Y+5	; 0x05
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	09 f4       	brne	.+2      	; 0x1816 <DIO_enuGetPINVAL+0x2a>
    1814:	7d c0       	rjmp	.+250    	; 0x1910 <DIO_enuGetPINVAL+0x124>
	{
		if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	84 30       	cpi	r24, 0x04	; 4
    181a:	08 f0       	brcs	.+2      	; 0x181e <DIO_enuGetPINVAL+0x32>
    181c:	76 c0       	rjmp	.+236    	; 0x190a <DIO_enuGetPINVAL+0x11e>
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	88 30       	cpi	r24, 0x08	; 8
    1822:	08 f0       	brcs	.+2      	; 0x1826 <DIO_enuGetPINVAL+0x3a>
    1824:	72 c0       	rjmp	.+228    	; 0x190a <DIO_enuGetPINVAL+0x11e>
		{

				switch(Copy_u8PortID)
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	3f 83       	std	Y+7, r19	; 0x07
    182e:	2e 83       	std	Y+6, r18	; 0x06
    1830:	4e 81       	ldd	r20, Y+6	; 0x06
    1832:	5f 81       	ldd	r21, Y+7	; 0x07
    1834:	41 30       	cpi	r20, 0x01	; 1
    1836:	51 05       	cpc	r21, r1
    1838:	59 f1       	breq	.+86     	; 0x1890 <DIO_enuGetPINVAL+0xa4>
    183a:	8e 81       	ldd	r24, Y+6	; 0x06
    183c:	9f 81       	ldd	r25, Y+7	; 0x07
    183e:	82 30       	cpi	r24, 0x02	; 2
    1840:	91 05       	cpc	r25, r1
    1842:	34 f4       	brge	.+12     	; 0x1850 <DIO_enuGetPINVAL+0x64>
    1844:	2e 81       	ldd	r18, Y+6	; 0x06
    1846:	3f 81       	ldd	r19, Y+7	; 0x07
    1848:	21 15       	cp	r18, r1
    184a:	31 05       	cpc	r19, r1
    184c:	69 f0       	breq	.+26     	; 0x1868 <DIO_enuGetPINVAL+0x7c>
    184e:	5b c0       	rjmp	.+182    	; 0x1906 <DIO_enuGetPINVAL+0x11a>
    1850:	4e 81       	ldd	r20, Y+6	; 0x06
    1852:	5f 81       	ldd	r21, Y+7	; 0x07
    1854:	42 30       	cpi	r20, 0x02	; 2
    1856:	51 05       	cpc	r21, r1
    1858:	79 f1       	breq	.+94     	; 0x18b8 <DIO_enuGetPINVAL+0xcc>
    185a:	8e 81       	ldd	r24, Y+6	; 0x06
    185c:	9f 81       	ldd	r25, Y+7	; 0x07
    185e:	83 30       	cpi	r24, 0x03	; 3
    1860:	91 05       	cpc	r25, r1
    1862:	09 f4       	brne	.+2      	; 0x1866 <DIO_enuGetPINVAL+0x7a>
    1864:	3d c0       	rjmp	.+122    	; 0x18e0 <DIO_enuGetPINVAL+0xf4>
    1866:	4f c0       	rjmp	.+158    	; 0x1906 <DIO_enuGetPINVAL+0x11a>
				{
					case DIO_PORTA:
						*Copy_Pu8Value = (PINA>>Copy_u8PINID)&DIO_MASK_BIT;
    1868:	e9 e3       	ldi	r30, 0x39	; 57
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	a9 01       	movw	r20, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_enuGetPINVAL+0x94>
    187c:	55 95       	asr	r21
    187e:	47 95       	ror	r20
    1880:	8a 95       	dec	r24
    1882:	e2 f7       	brpl	.-8      	; 0x187c <DIO_enuGetPINVAL+0x90>
    1884:	ca 01       	movw	r24, r20
    1886:	81 70       	andi	r24, 0x01	; 1
    1888:	ec 81       	ldd	r30, Y+4	; 0x04
    188a:	fd 81       	ldd	r31, Y+5	; 0x05
    188c:	80 83       	st	Z, r24
    188e:	3b c0       	rjmp	.+118    	; 0x1906 <DIO_enuGetPINVAL+0x11a>
								break;
					case DIO_PORTB:
						*Copy_Pu8Value = (PINB>>Copy_u8PINID)&DIO_MASK_BIT;
    1890:	e6 e3       	ldi	r30, 0x36	; 54
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	88 2f       	mov	r24, r24
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	a9 01       	movw	r20, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <DIO_enuGetPINVAL+0xbc>
    18a4:	55 95       	asr	r21
    18a6:	47 95       	ror	r20
    18a8:	8a 95       	dec	r24
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <DIO_enuGetPINVAL+0xb8>
    18ac:	ca 01       	movw	r24, r20
    18ae:	81 70       	andi	r24, 0x01	; 1
    18b0:	ec 81       	ldd	r30, Y+4	; 0x04
    18b2:	fd 81       	ldd	r31, Y+5	; 0x05
    18b4:	80 83       	st	Z, r24
    18b6:	27 c0       	rjmp	.+78     	; 0x1906 <DIO_enuGetPINVAL+0x11a>
								break;
					case DIO_PORTC:
						*Copy_Pu8Value = (PINC>>Copy_u8PINID)&DIO_MASK_BIT;
    18b8:	e3 e3       	ldi	r30, 0x33	; 51
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	88 2f       	mov	r24, r24
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	a9 01       	movw	r20, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <DIO_enuGetPINVAL+0xe4>
    18cc:	55 95       	asr	r21
    18ce:	47 95       	ror	r20
    18d0:	8a 95       	dec	r24
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <DIO_enuGetPINVAL+0xe0>
    18d4:	ca 01       	movw	r24, r20
    18d6:	81 70       	andi	r24, 0x01	; 1
    18d8:	ec 81       	ldd	r30, Y+4	; 0x04
    18da:	fd 81       	ldd	r31, Y+5	; 0x05
    18dc:	80 83       	st	Z, r24
    18de:	13 c0       	rjmp	.+38     	; 0x1906 <DIO_enuGetPINVAL+0x11a>
								break;
					case DIO_PORTD:
						*Copy_Pu8Value = (PIND>>Copy_u8PINID)&DIO_MASK_BIT;
    18e0:	e0 e3       	ldi	r30, 0x30	; 48
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a9 01       	movw	r20, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <DIO_enuGetPINVAL+0x10c>
    18f4:	55 95       	asr	r21
    18f6:	47 95       	ror	r20
    18f8:	8a 95       	dec	r24
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <DIO_enuGetPINVAL+0x108>
    18fc:	ca 01       	movw	r24, r20
    18fe:	81 70       	andi	r24, 0x01	; 1
    1900:	ec 81       	ldd	r30, Y+4	; 0x04
    1902:	fd 81       	ldd	r31, Y+5	; 0x05
    1904:	80 83       	st	Z, r24
								break;
				}
				Local_enuErrorStates = ES_OK;
    1906:	19 82       	std	Y+1, r1	; 0x01
    1908:	05 c0       	rjmp	.+10     	; 0x1914 <DIO_enuGetPINVAL+0x128>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
    190a:	83 e0       	ldi	r24, 0x03	; 3
    190c:	89 83       	std	Y+1, r24	; 0x01
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <DIO_enuGetPINVAL+0x128>
		}
	}
	else
	{
		Local_enuErrorStates = ES_NULLPOINTER;
    1910:	82 e0       	ldi	r24, 0x02	; 2
    1912:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    1914:	89 81       	ldd	r24, Y+1	; 0x01
}
    1916:	27 96       	adiw	r28, 0x07	; 7
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <LCD_enuINIT>:

#include<util/delay.h>

static u8 LCD_u8Curser = 0x80;
ES_t LCD_enuINIT(void)
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	e8 97       	sbiw	r28, 0x38	; 56
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	a0 e2       	ldi	r26, 0x20	; 32
    1942:	b2 e4       	ldi	r27, 0x42	; 66
    1944:	8d ab       	std	Y+53, r24	; 0x35
    1946:	9e ab       	std	Y+54, r25	; 0x36
    1948:	af ab       	std	Y+55, r26	; 0x37
    194a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194c:	6d a9       	ldd	r22, Y+53	; 0x35
    194e:	7e a9       	ldd	r23, Y+54	; 0x36
    1950:	8f a9       	ldd	r24, Y+55	; 0x37
    1952:	98 ad       	ldd	r25, Y+56	; 0x38
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	4a e7       	ldi	r20, 0x7A	; 122
    195a:	53 e4       	ldi	r21, 0x43	; 67
    195c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	89 ab       	std	Y+49, r24	; 0x31
    1966:	9a ab       	std	Y+50, r25	; 0x32
    1968:	ab ab       	std	Y+51, r26	; 0x33
    196a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    196c:	69 a9       	ldd	r22, Y+49	; 0x31
    196e:	7a a9       	ldd	r23, Y+50	; 0x32
    1970:	8b a9       	ldd	r24, Y+51	; 0x33
    1972:	9c a9       	ldd	r25, Y+52	; 0x34
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e8       	ldi	r20, 0x80	; 128
    197a:	5f e3       	ldi	r21, 0x3F	; 63
    197c:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1980:	88 23       	and	r24, r24
    1982:	2c f4       	brge	.+10     	; 0x198e <LCD_enuINIT+0x66>
		__ticks = 1;
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	98 ab       	std	Y+48, r25	; 0x30
    198a:	8f a7       	std	Y+47, r24	; 0x2f
    198c:	3f c0       	rjmp	.+126    	; 0x1a0c <LCD_enuINIT+0xe4>
	else if (__tmp > 65535)
    198e:	69 a9       	ldd	r22, Y+49	; 0x31
    1990:	7a a9       	ldd	r23, Y+50	; 0x32
    1992:	8b a9       	ldd	r24, Y+51	; 0x33
    1994:	9c a9       	ldd	r25, Y+52	; 0x34
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	3f ef       	ldi	r19, 0xFF	; 255
    199a:	4f e7       	ldi	r20, 0x7F	; 127
    199c:	57 e4       	ldi	r21, 0x47	; 71
    199e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    19a2:	18 16       	cp	r1, r24
    19a4:	4c f5       	brge	.+82     	; 0x19f8 <LCD_enuINIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a6:	6d a9       	ldd	r22, Y+53	; 0x35
    19a8:	7e a9       	ldd	r23, Y+54	; 0x36
    19aa:	8f a9       	ldd	r24, Y+55	; 0x37
    19ac:	98 ad       	ldd	r25, Y+56	; 0x38
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e2       	ldi	r20, 0x20	; 32
    19b4:	51 e4       	ldi	r21, 0x41	; 65
    19b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	bc 01       	movw	r22, r24
    19c0:	cd 01       	movw	r24, r26
    19c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	98 ab       	std	Y+48, r25	; 0x30
    19cc:	8f a7       	std	Y+47, r24	; 0x2f
    19ce:	0f c0       	rjmp	.+30     	; 0x19ee <LCD_enuINIT+0xc6>
    19d0:	89 e1       	ldi	r24, 0x19	; 25
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	9e a7       	std	Y+46, r25	; 0x2e
    19d6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    19da:	9e a5       	ldd	r25, Y+46	; 0x2e
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <LCD_enuINIT+0xb4>
    19e0:	9e a7       	std	Y+46, r25	; 0x2e
    19e2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19e6:	98 a9       	ldd	r25, Y+48	; 0x30
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	98 ab       	std	Y+48, r25	; 0x30
    19ec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    19f0:	98 a9       	ldd	r25, Y+48	; 0x30
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	69 f7       	brne	.-38     	; 0x19d0 <LCD_enuINIT+0xa8>
    19f6:	14 c0       	rjmp	.+40     	; 0x1a20 <LCD_enuINIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f8:	69 a9       	ldd	r22, Y+49	; 0x31
    19fa:	7a a9       	ldd	r23, Y+50	; 0x32
    19fc:	8b a9       	ldd	r24, Y+51	; 0x33
    19fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1a00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	98 ab       	std	Y+48, r25	; 0x30
    1a0a:	8f a7       	std	Y+47, r24	; 0x2f
    1a0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a10:	9c a7       	std	Y+44, r25	; 0x2c
    1a12:	8b a7       	std	Y+43, r24	; 0x2b
    1a14:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a16:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <LCD_enuINIT+0xf0>
    1a1c:	9c a7       	std	Y+44, r25	; 0x2c
    1a1e:	8b a7       	std	Y+43, r24	; 0x2b
	//ES_t Local_enuErrorState = ES_NOK;
	_delay_ms(40);
	DIO_enuSetPINDir(EN_Port,EN_Pin,DIO_OUTPUT);
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	62 e0       	ldi	r22, 0x02	; 2
    1a24:	41 e0       	ldi	r20, 0x01	; 1
    1a26:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
	DIO_enuSetPINDir(RS_Port,RS_Pin,DIO_OUTPUT);
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
	DIO_enuSetPINDir(RW_Port,RW_Pin,DIO_OUTPUT);
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	61 e0       	ldi	r22, 0x01	; 1
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB4_Port,DB4_Pin,DIO_OUTPUT);
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	64 e0       	ldi	r22, 0x04	; 4
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB5_Port,DB5_Pin,DIO_OUTPUT);
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	65 e0       	ldi	r22, 0x05	; 5
    1a4c:	41 e0       	ldi	r20, 0x01	; 1
    1a4e:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB6_Port,DB6_Pin,DIO_OUTPUT);
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	66 e0       	ldi	r22, 0x06	; 6
    1a56:	41 e0       	ldi	r20, 0x01	; 1
    1a58:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB7_Port,DB7_Pin,DIO_OUTPUT);
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	67 e0       	ldi	r22, 0x07	; 7
    1a60:	41 e0       	ldi	r20, 0x01	; 1
    1a62:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>

#if LCDMODE == EIGHTMODE
	DIO_enuSetPINDir(DB0_Port,DB0_Pin,DIO_OUTPUT);
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	41 e0       	ldi	r20, 0x01	; 1
    1a6c:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB1_Port,DB1_Pin,DIO_OUTPUT);
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	61 e0       	ldi	r22, 0x01	; 1
    1a74:	41 e0       	ldi	r20, 0x01	; 1
    1a76:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB2_Port,DB2_Pin,DIO_OUTPUT);
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	62 e0       	ldi	r22, 0x02	; 2
    1a7e:	41 e0       	ldi	r20, 0x01	; 1
    1a80:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB3_Port,DB3_Pin,DIO_OUTPUT);
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	63 e0       	ldi	r22, 0x03	; 3
    1a88:	41 e0       	ldi	r20, 0x01	; 1
    1a8a:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
#endif
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_LOW);
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	40 e0       	ldi	r20, 0x00	; 0
    1a94:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	LCD_VidDOPRVTask(SETFUN);
    1a98:	88 e3       	ldi	r24, 0x38	; 56
    1a9a:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	a0 e8       	ldi	r26, 0x80	; 128
    1aa4:	bf e3       	ldi	r27, 0x3F	; 63
    1aa6:	8f a3       	std	Y+39, r24	; 0x27
    1aa8:	98 a7       	std	Y+40, r25	; 0x28
    1aaa:	a9 a7       	std	Y+41, r26	; 0x29
    1aac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aae:	6f a1       	ldd	r22, Y+39	; 0x27
    1ab0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ab2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ab4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	4a e7       	ldi	r20, 0x7A	; 122
    1abc:	53 e4       	ldi	r21, 0x43	; 67
    1abe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	8b a3       	std	Y+35, r24	; 0x23
    1ac8:	9c a3       	std	Y+36, r25	; 0x24
    1aca:	ad a3       	std	Y+37, r26	; 0x25
    1acc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ace:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e8       	ldi	r20, 0x80	; 128
    1adc:	5f e3       	ldi	r21, 0x3F	; 63
    1ade:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1ae2:	88 23       	and	r24, r24
    1ae4:	2c f4       	brge	.+10     	; 0x1af0 <LCD_enuINIT+0x1c8>
		__ticks = 1;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	9a a3       	std	Y+34, r25	; 0x22
    1aec:	89 a3       	std	Y+33, r24	; 0x21
    1aee:	3f c0       	rjmp	.+126    	; 0x1b6e <LCD_enuINIT+0x246>
	else if (__tmp > 65535)
    1af0:	6b a1       	ldd	r22, Y+35	; 0x23
    1af2:	7c a1       	ldd	r23, Y+36	; 0x24
    1af4:	8d a1       	ldd	r24, Y+37	; 0x25
    1af6:	9e a1       	ldd	r25, Y+38	; 0x26
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	3f ef       	ldi	r19, 0xFF	; 255
    1afc:	4f e7       	ldi	r20, 0x7F	; 127
    1afe:	57 e4       	ldi	r21, 0x47	; 71
    1b00:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1b04:	18 16       	cp	r1, r24
    1b06:	4c f5       	brge	.+82     	; 0x1b5a <LCD_enuINIT+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b08:	6f a1       	ldd	r22, Y+39	; 0x27
    1b0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e2       	ldi	r20, 0x20	; 32
    1b16:	51 e4       	ldi	r21, 0x41	; 65
    1b18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	9a a3       	std	Y+34, r25	; 0x22
    1b2e:	89 a3       	std	Y+33, r24	; 0x21
    1b30:	0f c0       	rjmp	.+30     	; 0x1b50 <LCD_enuINIT+0x228>
    1b32:	89 e1       	ldi	r24, 0x19	; 25
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	98 a3       	std	Y+32, r25	; 0x20
    1b38:	8f 8f       	std	Y+31, r24	; 0x1f
    1b3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b3c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <LCD_enuINIT+0x216>
    1b42:	98 a3       	std	Y+32, r25	; 0x20
    1b44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b46:	89 a1       	ldd	r24, Y+33	; 0x21
    1b48:	9a a1       	ldd	r25, Y+34	; 0x22
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	9a a3       	std	Y+34, r25	; 0x22
    1b4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b50:	89 a1       	ldd	r24, Y+33	; 0x21
    1b52:	9a a1       	ldd	r25, Y+34	; 0x22
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	69 f7       	brne	.-38     	; 0x1b32 <LCD_enuINIT+0x20a>
    1b58:	14 c0       	rjmp	.+40     	; 0x1b82 <LCD_enuINIT+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b60:	9e a1       	ldd	r25, Y+38	; 0x26
    1b62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	9a a3       	std	Y+34, r25	; 0x22
    1b6c:	89 a3       	std	Y+33, r24	; 0x21
    1b6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b70:	9a a1       	ldd	r25, Y+34	; 0x22
    1b72:	9e 8f       	std	Y+30, r25	; 0x1e
    1b74:	8d 8f       	std	Y+29, r24	; 0x1d
    1b76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <LCD_enuINIT+0x252>
    1b7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b80:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VidDOPRVTask(DISPON_OFF);
    1b82:	8f e0       	ldi	r24, 0x0F	; 15
    1b84:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	a0 e8       	ldi	r26, 0x80	; 128
    1b8e:	bf e3       	ldi	r27, 0x3F	; 63
    1b90:	89 8f       	std	Y+25, r24	; 0x19
    1b92:	9a 8f       	std	Y+26, r25	; 0x1a
    1b94:	ab 8f       	std	Y+27, r26	; 0x1b
    1b96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b98:	69 8d       	ldd	r22, Y+25	; 0x19
    1b9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	4a e7       	ldi	r20, 0x7A	; 122
    1ba6:	53 e4       	ldi	r21, 0x43	; 67
    1ba8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	8d 8b       	std	Y+21, r24	; 0x15
    1bb2:	9e 8b       	std	Y+22, r25	; 0x16
    1bb4:	af 8b       	std	Y+23, r26	; 0x17
    1bb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bb8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bba:	7e 89       	ldd	r23, Y+22	; 0x16
    1bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e8       	ldi	r20, 0x80	; 128
    1bc6:	5f e3       	ldi	r21, 0x3F	; 63
    1bc8:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1bcc:	88 23       	and	r24, r24
    1bce:	2c f4       	brge	.+10     	; 0x1bda <LCD_enuINIT+0x2b2>
		__ticks = 1;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	9c 8b       	std	Y+20, r25	; 0x14
    1bd6:	8b 8b       	std	Y+19, r24	; 0x13
    1bd8:	3f c0       	rjmp	.+126    	; 0x1c58 <LCD_enuINIT+0x330>
	else if (__tmp > 65535)
    1bda:	6d 89       	ldd	r22, Y+21	; 0x15
    1bdc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bde:	8f 89       	ldd	r24, Y+23	; 0x17
    1be0:	98 8d       	ldd	r25, Y+24	; 0x18
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	3f ef       	ldi	r19, 0xFF	; 255
    1be6:	4f e7       	ldi	r20, 0x7F	; 127
    1be8:	57 e4       	ldi	r21, 0x47	; 71
    1bea:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1bee:	18 16       	cp	r1, r24
    1bf0:	4c f5       	brge	.+82     	; 0x1c44 <LCD_enuINIT+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf2:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e2       	ldi	r20, 0x20	; 32
    1c00:	51 e4       	ldi	r21, 0x41	; 65
    1c02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	cd 01       	movw	r24, r26
    1c0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	9c 8b       	std	Y+20, r25	; 0x14
    1c18:	8b 8b       	std	Y+19, r24	; 0x13
    1c1a:	0f c0       	rjmp	.+30     	; 0x1c3a <LCD_enuINIT+0x312>
    1c1c:	89 e1       	ldi	r24, 0x19	; 25
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	9a 8b       	std	Y+18, r25	; 0x12
    1c22:	89 8b       	std	Y+17, r24	; 0x11
    1c24:	89 89       	ldd	r24, Y+17	; 0x11
    1c26:	9a 89       	ldd	r25, Y+18	; 0x12
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <LCD_enuINIT+0x300>
    1c2c:	9a 8b       	std	Y+18, r25	; 0x12
    1c2e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c30:	8b 89       	ldd	r24, Y+19	; 0x13
    1c32:	9c 89       	ldd	r25, Y+20	; 0x14
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	9c 8b       	std	Y+20, r25	; 0x14
    1c38:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	69 f7       	brne	.-38     	; 0x1c1c <LCD_enuINIT+0x2f4>
    1c42:	14 c0       	rjmp	.+40     	; 0x1c6c <LCD_enuINIT+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c44:	6d 89       	ldd	r22, Y+21	; 0x15
    1c46:	7e 89       	ldd	r23, Y+22	; 0x16
    1c48:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	9c 8b       	std	Y+20, r25	; 0x14
    1c56:	8b 8b       	std	Y+19, r24	; 0x13
    1c58:	8b 89       	ldd	r24, Y+19	; 0x13
    1c5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5c:	98 8b       	std	Y+16, r25	; 0x10
    1c5e:	8f 87       	std	Y+15, r24	; 0x0f
    1c60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c62:	98 89       	ldd	r25, Y+16	; 0x10
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	f1 f7       	brne	.-4      	; 0x1c64 <LCD_enuINIT+0x33c>
    1c68:	98 8b       	std	Y+16, r25	; 0x10
    1c6a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		LCD_VidDOPRVTask(DISP_CLEAR);
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	a0 ec       	ldi	r26, 0xC0	; 192
    1c78:	bf e3       	ldi	r27, 0x3F	; 63
    1c7a:	8b 87       	std	Y+11, r24	; 0x0b
    1c7c:	9c 87       	std	Y+12, r25	; 0x0c
    1c7e:	ad 87       	std	Y+13, r26	; 0x0d
    1c80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	4a e7       	ldi	r20, 0x7A	; 122
    1c90:	53 e4       	ldi	r21, 0x43	; 67
    1c92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	8f 83       	std	Y+7, r24	; 0x07
    1c9c:	98 87       	std	Y+8, r25	; 0x08
    1c9e:	a9 87       	std	Y+9, r26	; 0x09
    1ca0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ca2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca4:	78 85       	ldd	r23, Y+8	; 0x08
    1ca6:	89 85       	ldd	r24, Y+9	; 0x09
    1ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e8       	ldi	r20, 0x80	; 128
    1cb0:	5f e3       	ldi	r21, 0x3F	; 63
    1cb2:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1cb6:	88 23       	and	r24, r24
    1cb8:	2c f4       	brge	.+10     	; 0x1cc4 <LCD_enuINIT+0x39c>
		__ticks = 1;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	9e 83       	std	Y+6, r25	; 0x06
    1cc0:	8d 83       	std	Y+5, r24	; 0x05
    1cc2:	3f c0       	rjmp	.+126    	; 0x1d42 <LCD_enuINIT+0x41a>
	else if (__tmp > 65535)
    1cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc6:	78 85       	ldd	r23, Y+8	; 0x08
    1cc8:	89 85       	ldd	r24, Y+9	; 0x09
    1cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	3f ef       	ldi	r19, 0xFF	; 255
    1cd0:	4f e7       	ldi	r20, 0x7F	; 127
    1cd2:	57 e4       	ldi	r21, 0x47	; 71
    1cd4:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1cd8:	18 16       	cp	r1, r24
    1cda:	4c f5       	brge	.+82     	; 0x1d2e <LCD_enuINIT+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e2       	ldi	r20, 0x20	; 32
    1cea:	51 e4       	ldi	r21, 0x41	; 65
    1cec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	bc 01       	movw	r22, r24
    1cf6:	cd 01       	movw	r24, r26
    1cf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	9e 83       	std	Y+6, r25	; 0x06
    1d02:	8d 83       	std	Y+5, r24	; 0x05
    1d04:	0f c0       	rjmp	.+30     	; 0x1d24 <LCD_enuINIT+0x3fc>
    1d06:	89 e1       	ldi	r24, 0x19	; 25
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	9c 83       	std	Y+4, r25	; 0x04
    1d0c:	8b 83       	std	Y+3, r24	; 0x03
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	f1 f7       	brne	.-4      	; 0x1d12 <LCD_enuINIT+0x3ea>
    1d16:	9c 83       	std	Y+4, r25	; 0x04
    1d18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	9e 83       	std	Y+6, r25	; 0x06
    1d22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d24:	8d 81       	ldd	r24, Y+5	; 0x05
    1d26:	9e 81       	ldd	r25, Y+6	; 0x06
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	69 f7       	brne	.-38     	; 0x1d06 <LCD_enuINIT+0x3de>
    1d2c:	14 c0       	rjmp	.+40     	; 0x1d56 <LCD_enuINIT+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d30:	78 85       	ldd	r23, Y+8	; 0x08
    1d32:	89 85       	ldd	r24, Y+9	; 0x09
    1d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	9e 83       	std	Y+6, r25	; 0x06
    1d40:	8d 83       	std	Y+5, r24	; 0x05
    1d42:	8d 81       	ldd	r24, Y+5	; 0x05
    1d44:	9e 81       	ldd	r25, Y+6	; 0x06
    1d46:	9a 83       	std	Y+2, r25	; 0x02
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <LCD_enuINIT+0x426>
    1d52:	9a 83       	std	Y+2, r25	; 0x02
    1d54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1.5);
	LCD_VidDOPRVTask(ENTRYSET);
    1d56:	86 e0       	ldi	r24, 0x06	; 6
    1d58:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>

	return 0;//Local_enuErrorState;
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
}
    1d5e:	e8 96       	adiw	r28, 0x38	; 56
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <LCD_VidDOPRVTask>:

static inline void LCD_VidDOPRVTask(u8 Copy_u8Commnd)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	2f 97       	sbiw	r28, 0x0f	; 15
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	8f 87       	std	Y+15, r24	; 0x0f

		DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	62 e0       	ldi	r22, 0x02	; 2
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(RW_Port,RW_Pin,DIO_LOW);
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB4_Port,DB4_Pin,(Copy_u8Commnd>>4)&1);
    1d9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9c:	82 95       	swap	r24
    1d9e:	8f 70       	andi	r24, 0x0F	; 15
    1da0:	98 2f       	mov	r25, r24
    1da2:	91 70       	andi	r25, 0x01	; 1
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	64 e0       	ldi	r22, 0x04	; 4
    1da8:	49 2f       	mov	r20, r25
    1daa:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB5_Port,DB5_Pin,(Copy_u8Commnd>>5)&1);
    1dae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db0:	82 95       	swap	r24
    1db2:	86 95       	lsr	r24
    1db4:	87 70       	andi	r24, 0x07	; 7
    1db6:	98 2f       	mov	r25, r24
    1db8:	91 70       	andi	r25, 0x01	; 1
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	65 e0       	ldi	r22, 0x05	; 5
    1dbe:	49 2f       	mov	r20, r25
    1dc0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB6_Port,DB6_Pin,(Copy_u8Commnd>>6)&1);
    1dc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc6:	82 95       	swap	r24
    1dc8:	86 95       	lsr	r24
    1dca:	86 95       	lsr	r24
    1dcc:	83 70       	andi	r24, 0x03	; 3
    1dce:	98 2f       	mov	r25, r24
    1dd0:	91 70       	andi	r25, 0x01	; 1
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	66 e0       	ldi	r22, 0x06	; 6
    1dd6:	49 2f       	mov	r20, r25
    1dd8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB7_Port,DB7_Pin,(Copy_u8Commnd>>7)&1);
    1ddc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dde:	98 2f       	mov	r25, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	99 27       	eor	r25, r25
    1de4:	99 1f       	adc	r25, r25
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	67 e0       	ldi	r22, 0x07	; 7
    1dea:	49 2f       	mov	r20, r25
    1dec:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB0_Port,DB0_Pin,(Copy_u8Commnd>>0)&1);
    1df0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1df2:	98 2f       	mov	r25, r24
    1df4:	91 70       	andi	r25, 0x01	; 1
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	49 2f       	mov	r20, r25
    1dfc:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB1_Port,DB1_Pin,(Copy_u8Commnd>>1)&1);
    1e00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e02:	86 95       	lsr	r24
    1e04:	98 2f       	mov	r25, r24
    1e06:	91 70       	andi	r25, 0x01	; 1
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	61 e0       	ldi	r22, 0x01	; 1
    1e0c:	49 2f       	mov	r20, r25
    1e0e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB2_Port,DB2_Pin,(Copy_u8Commnd>>2)&1);
    1e12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e14:	86 95       	lsr	r24
    1e16:	86 95       	lsr	r24
    1e18:	98 2f       	mov	r25, r24
    1e1a:	91 70       	andi	r25, 0x01	; 1
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	62 e0       	ldi	r22, 0x02	; 2
    1e20:	49 2f       	mov	r20, r25
    1e22:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB3_Port,DB3_Pin,(Copy_u8Commnd>>3)&1);
    1e26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e28:	86 95       	lsr	r24
    1e2a:	86 95       	lsr	r24
    1e2c:	86 95       	lsr	r24
    1e2e:	98 2f       	mov	r25, r24
    1e30:	91 70       	andi	r25, 0x01	; 1
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	63 e0       	ldi	r22, 0x03	; 3
    1e36:	49 2f       	mov	r20, r25
    1e38:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	62 e0       	ldi	r22, 0x02	; 2
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	a0 e2       	ldi	r26, 0x20	; 32
    1e4c:	b1 e4       	ldi	r27, 0x41	; 65
    1e4e:	8b 87       	std	Y+11, r24	; 0x0b
    1e50:	9c 87       	std	Y+12, r25	; 0x0c
    1e52:	ad 87       	std	Y+13, r26	; 0x0d
    1e54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	4a e7       	ldi	r20, 0x7A	; 122
    1e64:	53 e4       	ldi	r21, 0x43	; 67
    1e66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	8f 83       	std	Y+7, r24	; 0x07
    1e70:	98 87       	std	Y+8, r25	; 0x08
    1e72:	a9 87       	std	Y+9, r26	; 0x09
    1e74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e76:	6f 81       	ldd	r22, Y+7	; 0x07
    1e78:	78 85       	ldd	r23, Y+8	; 0x08
    1e7a:	89 85       	ldd	r24, Y+9	; 0x09
    1e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e8       	ldi	r20, 0x80	; 128
    1e84:	5f e3       	ldi	r21, 0x3F	; 63
    1e86:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1e8a:	88 23       	and	r24, r24
    1e8c:	2c f4       	brge	.+10     	; 0x1e98 <LCD_VidDOPRVTask+0x128>
		__ticks = 1;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	9e 83       	std	Y+6, r25	; 0x06
    1e94:	8d 83       	std	Y+5, r24	; 0x05
    1e96:	3f c0       	rjmp	.+126    	; 0x1f16 <LCD_VidDOPRVTask+0x1a6>
	else if (__tmp > 65535)
    1e98:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9a:	78 85       	ldd	r23, Y+8	; 0x08
    1e9c:	89 85       	ldd	r24, Y+9	; 0x09
    1e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	3f ef       	ldi	r19, 0xFF	; 255
    1ea4:	4f e7       	ldi	r20, 0x7F	; 127
    1ea6:	57 e4       	ldi	r21, 0x47	; 71
    1ea8:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1eac:	18 16       	cp	r1, r24
    1eae:	4c f5       	brge	.+82     	; 0x1f02 <LCD_VidDOPRVTask+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e2       	ldi	r20, 0x20	; 32
    1ebe:	51 e4       	ldi	r21, 0x41	; 65
    1ec0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	9e 83       	std	Y+6, r25	; 0x06
    1ed6:	8d 83       	std	Y+5, r24	; 0x05
    1ed8:	0f c0       	rjmp	.+30     	; 0x1ef8 <LCD_VidDOPRVTask+0x188>
    1eda:	89 e1       	ldi	r24, 0x19	; 25
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9c 83       	std	Y+4, r25	; 0x04
    1ee0:	8b 83       	std	Y+3, r24	; 0x03
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <LCD_VidDOPRVTask+0x176>
    1eea:	9c 83       	std	Y+4, r25	; 0x04
    1eec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	9e 83       	std	Y+6, r25	; 0x06
    1ef6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    1efa:	9e 81       	ldd	r25, Y+6	; 0x06
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	69 f7       	brne	.-38     	; 0x1eda <LCD_VidDOPRVTask+0x16a>
    1f00:	14 c0       	rjmp	.+40     	; 0x1f2a <LCD_VidDOPRVTask+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f02:	6f 81       	ldd	r22, Y+7	; 0x07
    1f04:	78 85       	ldd	r23, Y+8	; 0x08
    1f06:	89 85       	ldd	r24, Y+9	; 0x09
    1f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	9a 81       	ldd	r25, Y+2	; 0x02
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <LCD_VidDOPRVTask+0x1b2>
    1f26:	9a 83       	std	Y+2, r25	; 0x02
    1f28:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	62 e0       	ldi	r22, 0x02	; 2
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>


}
    1f34:	2f 96       	adiw	r28, 0x0f	; 15
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	f8 94       	cli
    1f3a:	de bf       	out	0x3e, r29	; 62
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	cd bf       	out	0x3d, r28	; 61
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <LCD_enuSndComnd>:


ES_t LCD_enuSndComnd(u8 Copy_u8Commnd)
{
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	60 97       	sbiw	r28, 0x10	; 16
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	88 8b       	std	Y+16, r24	; 0x10
	ES_t Local_enuErrorState = ES_NOK;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	62 e0       	ldi	r22, 0x02	; 2
    1f64:	40 e0       	ldi	r20, 0x00	; 0
    1f66:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_LOW);
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	60 e0       	ldi	r22, 0x00	; 0
    1f6e:	40 e0       	ldi	r20, 0x00	; 0
    1f70:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RW_Port,RW_Pin,DIO_LOW);
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	61 e0       	ldi	r22, 0x01	; 1
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB4_Port,DB4_Pin,(Copy_u8Commnd>>4)&1);
    1f7e:	88 89       	ldd	r24, Y+16	; 0x10
    1f80:	82 95       	swap	r24
    1f82:	8f 70       	andi	r24, 0x0F	; 15
    1f84:	98 2f       	mov	r25, r24
    1f86:	91 70       	andi	r25, 0x01	; 1
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	64 e0       	ldi	r22, 0x04	; 4
    1f8c:	49 2f       	mov	r20, r25
    1f8e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB5_Port,DB5_Pin,(Copy_u8Commnd>>5)&1);
    1f92:	88 89       	ldd	r24, Y+16	; 0x10
    1f94:	82 95       	swap	r24
    1f96:	86 95       	lsr	r24
    1f98:	87 70       	andi	r24, 0x07	; 7
    1f9a:	98 2f       	mov	r25, r24
    1f9c:	91 70       	andi	r25, 0x01	; 1
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	65 e0       	ldi	r22, 0x05	; 5
    1fa2:	49 2f       	mov	r20, r25
    1fa4:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB6_Port,DB6_Pin,(Copy_u8Commnd>>6)&1);
    1fa8:	88 89       	ldd	r24, Y+16	; 0x10
    1faa:	82 95       	swap	r24
    1fac:	86 95       	lsr	r24
    1fae:	86 95       	lsr	r24
    1fb0:	83 70       	andi	r24, 0x03	; 3
    1fb2:	98 2f       	mov	r25, r24
    1fb4:	91 70       	andi	r25, 0x01	; 1
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	66 e0       	ldi	r22, 0x06	; 6
    1fba:	49 2f       	mov	r20, r25
    1fbc:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB7_Port,DB7_Pin,(Copy_u8Commnd>>7)&1);
    1fc0:	88 89       	ldd	r24, Y+16	; 0x10
    1fc2:	98 2f       	mov	r25, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	99 27       	eor	r25, r25
    1fc8:	99 1f       	adc	r25, r25
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	67 e0       	ldi	r22, 0x07	; 7
    1fce:	49 2f       	mov	r20, r25
    1fd0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB0_Port,DB0_Pin,(Copy_u8Commnd>>0)&1);
    1fd4:	88 89       	ldd	r24, Y+16	; 0x10
    1fd6:	98 2f       	mov	r25, r24
    1fd8:	91 70       	andi	r25, 0x01	; 1
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	49 2f       	mov	r20, r25
    1fe0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB1_Port,DB1_Pin,(Copy_u8Commnd>>1)&1);
    1fe4:	88 89       	ldd	r24, Y+16	; 0x10
    1fe6:	86 95       	lsr	r24
    1fe8:	98 2f       	mov	r25, r24
    1fea:	91 70       	andi	r25, 0x01	; 1
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	61 e0       	ldi	r22, 0x01	; 1
    1ff0:	49 2f       	mov	r20, r25
    1ff2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB2_Port,DB2_Pin,(Copy_u8Commnd>>2)&1);
    1ff6:	88 89       	ldd	r24, Y+16	; 0x10
    1ff8:	86 95       	lsr	r24
    1ffa:	86 95       	lsr	r24
    1ffc:	98 2f       	mov	r25, r24
    1ffe:	91 70       	andi	r25, 0x01	; 1
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	62 e0       	ldi	r22, 0x02	; 2
    2004:	49 2f       	mov	r20, r25
    2006:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB3_Port,DB3_Pin,(Copy_u8Commnd>>3)&1);
    200a:	88 89       	ldd	r24, Y+16	; 0x10
    200c:	86 95       	lsr	r24
    200e:	86 95       	lsr	r24
    2010:	86 95       	lsr	r24
    2012:	98 2f       	mov	r25, r24
    2014:	91 70       	andi	r25, 0x01	; 1
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	63 e0       	ldi	r22, 0x03	; 3
    201a:	49 2f       	mov	r20, r25
    201c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	62 e0       	ldi	r22, 0x02	; 2
    2024:	41 e0       	ldi	r20, 0x01	; 1
    2026:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a0 e2       	ldi	r26, 0x20	; 32
    2030:	b1 e4       	ldi	r27, 0x41	; 65
    2032:	8b 87       	std	Y+11, r24	; 0x0b
    2034:	9c 87       	std	Y+12, r25	; 0x0c
    2036:	ad 87       	std	Y+13, r26	; 0x0d
    2038:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203a:	6b 85       	ldd	r22, Y+11	; 0x0b
    203c:	7c 85       	ldd	r23, Y+12	; 0x0c
    203e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2040:	9e 85       	ldd	r25, Y+14	; 0x0e
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4a e7       	ldi	r20, 0x7A	; 122
    2048:	53 e4       	ldi	r21, 0x43	; 67
    204a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	8f 83       	std	Y+7, r24	; 0x07
    2054:	98 87       	std	Y+8, r25	; 0x08
    2056:	a9 87       	std	Y+9, r26	; 0x09
    2058:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    205a:	6f 81       	ldd	r22, Y+7	; 0x07
    205c:	78 85       	ldd	r23, Y+8	; 0x08
    205e:	89 85       	ldd	r24, Y+9	; 0x09
    2060:	9a 85       	ldd	r25, Y+10	; 0x0a
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e8       	ldi	r20, 0x80	; 128
    2068:	5f e3       	ldi	r21, 0x3F	; 63
    206a:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    206e:	88 23       	and	r24, r24
    2070:	2c f4       	brge	.+10     	; 0x207c <LCD_enuSndComnd+0x136>
		__ticks = 1;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9e 83       	std	Y+6, r25	; 0x06
    2078:	8d 83       	std	Y+5, r24	; 0x05
    207a:	3f c0       	rjmp	.+126    	; 0x20fa <LCD_enuSndComnd+0x1b4>
	else if (__tmp > 65535)
    207c:	6f 81       	ldd	r22, Y+7	; 0x07
    207e:	78 85       	ldd	r23, Y+8	; 0x08
    2080:	89 85       	ldd	r24, Y+9	; 0x09
    2082:	9a 85       	ldd	r25, Y+10	; 0x0a
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	3f ef       	ldi	r19, 0xFF	; 255
    2088:	4f e7       	ldi	r20, 0x7F	; 127
    208a:	57 e4       	ldi	r21, 0x47	; 71
    208c:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2090:	18 16       	cp	r1, r24
    2092:	4c f5       	brge	.+82     	; 0x20e6 <LCD_enuSndComnd+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2094:	6b 85       	ldd	r22, Y+11	; 0x0b
    2096:	7c 85       	ldd	r23, Y+12	; 0x0c
    2098:	8d 85       	ldd	r24, Y+13	; 0x0d
    209a:	9e 85       	ldd	r25, Y+14	; 0x0e
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	40 e2       	ldi	r20, 0x20	; 32
    20a2:	51 e4       	ldi	r21, 0x41	; 65
    20a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	bc 01       	movw	r22, r24
    20ae:	cd 01       	movw	r24, r26
    20b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9e 83       	std	Y+6, r25	; 0x06
    20ba:	8d 83       	std	Y+5, r24	; 0x05
    20bc:	0f c0       	rjmp	.+30     	; 0x20dc <LCD_enuSndComnd+0x196>
    20be:	89 e1       	ldi	r24, 0x19	; 25
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	9c 83       	std	Y+4, r25	; 0x04
    20c4:	8b 83       	std	Y+3, r24	; 0x03
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_enuSndComnd+0x184>
    20ce:	9c 83       	std	Y+4, r25	; 0x04
    20d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d2:	8d 81       	ldd	r24, Y+5	; 0x05
    20d4:	9e 81       	ldd	r25, Y+6	; 0x06
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	9e 83       	std	Y+6, r25	; 0x06
    20da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20dc:	8d 81       	ldd	r24, Y+5	; 0x05
    20de:	9e 81       	ldd	r25, Y+6	; 0x06
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	69 f7       	brne	.-38     	; 0x20be <LCD_enuSndComnd+0x178>
    20e4:	14 c0       	rjmp	.+40     	; 0x210e <LCD_enuSndComnd+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e6:	6f 81       	ldd	r22, Y+7	; 0x07
    20e8:	78 85       	ldd	r23, Y+8	; 0x08
    20ea:	89 85       	ldd	r24, Y+9	; 0x09
    20ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9e 83       	std	Y+6, r25	; 0x06
    20f8:	8d 83       	std	Y+5, r24	; 0x05
    20fa:	8d 81       	ldd	r24, Y+5	; 0x05
    20fc:	9e 81       	ldd	r25, Y+6	; 0x06
    20fe:	9a 83       	std	Y+2, r25	; 0x02
    2100:	89 83       	std	Y+1, r24	; 0x01
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	9a 81       	ldd	r25, Y+2	; 0x02
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <LCD_enuSndComnd+0x1c0>
    210a:	9a 83       	std	Y+2, r25	; 0x02
    210c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	62 e0       	ldi	r22, 0x02	; 2
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>


	return Local_enuErrorState;
    2118:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    211a:	60 96       	adiw	r28, 0x10	; 16
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <LCD_enuWriteFrmRI8toLFT>:

ES_t LCD_enuWriteFrmRI8toLFT(void)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	2f 97       	sbiw	r28, 0x0f	; 15
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	62 e0       	ldi	r22, 0x02	; 2
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_LOW);
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	60 e0       	ldi	r22, 0x00	; 0
    2152:	40 e0       	ldi	r20, 0x00	; 0
    2154:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RW_Port,RW_Pin,DIO_LOW);
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	61 e0       	ldi	r22, 0x01	; 1
    215c:	40 e0       	ldi	r20, 0x00	; 0
    215e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB0_Port,DB0_Pin,DIO_LOW);
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	60 e0       	ldi	r22, 0x00	; 0
    2166:	40 e0       	ldi	r20, 0x00	; 0
    2168:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB1_Port,DB1_Pin,DIO_LOW);
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	61 e0       	ldi	r22, 0x01	; 1
    2170:	40 e0       	ldi	r20, 0x00	; 0
    2172:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB2_Port,DB2_Pin,DIO_HIGH);
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	62 e0       	ldi	r22, 0x02	; 2
    217a:	41 e0       	ldi	r20, 0x01	; 1
    217c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB3_Port,DB3_Pin,DIO_LOW);
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	63 e0       	ldi	r22, 0x03	; 3
    2184:	40 e0       	ldi	r20, 0x00	; 0
    2186:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB4_Port,DB4_Pin,DIO_LOW);
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	64 e0       	ldi	r22, 0x04	; 4
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB5_Port,DB5_Pin,DIO_LOW);
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	65 e0       	ldi	r22, 0x05	; 5
    2198:	40 e0       	ldi	r20, 0x00	; 0
    219a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB6_Port,DB6_Pin,DIO_LOW);
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	66 e0       	ldi	r22, 0x06	; 6
    21a2:	40 e0       	ldi	r20, 0x00	; 0
    21a4:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB7_Port,DB7_Pin,DIO_LOW);
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	67 e0       	ldi	r22, 0x07	; 7
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>

	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	62 e0       	ldi	r22, 0x02	; 2
    21b6:	41 e0       	ldi	r20, 0x01	; 1
    21b8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	a0 e2       	ldi	r26, 0x20	; 32
    21c2:	b1 e4       	ldi	r27, 0x41	; 65
    21c4:	8b 87       	std	Y+11, r24	; 0x0b
    21c6:	9c 87       	std	Y+12, r25	; 0x0c
    21c8:	ad 87       	std	Y+13, r26	; 0x0d
    21ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	4a e7       	ldi	r20, 0x7A	; 122
    21da:	53 e4       	ldi	r21, 0x43	; 67
    21dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	8f 83       	std	Y+7, r24	; 0x07
    21e6:	98 87       	std	Y+8, r25	; 0x08
    21e8:	a9 87       	std	Y+9, r26	; 0x09
    21ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ec:	6f 81       	ldd	r22, Y+7	; 0x07
    21ee:	78 85       	ldd	r23, Y+8	; 0x08
    21f0:	89 85       	ldd	r24, Y+9	; 0x09
    21f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e8       	ldi	r20, 0x80	; 128
    21fa:	5f e3       	ldi	r21, 0x3F	; 63
    21fc:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2200:	88 23       	and	r24, r24
    2202:	2c f4       	brge	.+10     	; 0x220e <LCD_enuWriteFrmRI8toLFT+0xe2>
		__ticks = 1;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	8d 83       	std	Y+5, r24	; 0x05
    220c:	3f c0       	rjmp	.+126    	; 0x228c <LCD_enuWriteFrmRI8toLFT+0x160>
	else if (__tmp > 65535)
    220e:	6f 81       	ldd	r22, Y+7	; 0x07
    2210:	78 85       	ldd	r23, Y+8	; 0x08
    2212:	89 85       	ldd	r24, Y+9	; 0x09
    2214:	9a 85       	ldd	r25, Y+10	; 0x0a
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	3f ef       	ldi	r19, 0xFF	; 255
    221a:	4f e7       	ldi	r20, 0x7F	; 127
    221c:	57 e4       	ldi	r21, 0x47	; 71
    221e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2222:	18 16       	cp	r1, r24
    2224:	4c f5       	brge	.+82     	; 0x2278 <LCD_enuWriteFrmRI8toLFT+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2226:	6b 85       	ldd	r22, Y+11	; 0x0b
    2228:	7c 85       	ldd	r23, Y+12	; 0x0c
    222a:	8d 85       	ldd	r24, Y+13	; 0x0d
    222c:	9e 85       	ldd	r25, Y+14	; 0x0e
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e2       	ldi	r20, 0x20	; 32
    2234:	51 e4       	ldi	r21, 0x41	; 65
    2236:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	bc 01       	movw	r22, r24
    2240:	cd 01       	movw	r24, r26
    2242:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	9e 83       	std	Y+6, r25	; 0x06
    224c:	8d 83       	std	Y+5, r24	; 0x05
    224e:	0f c0       	rjmp	.+30     	; 0x226e <LCD_enuWriteFrmRI8toLFT+0x142>
    2250:	89 e1       	ldi	r24, 0x19	; 25
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	9c 83       	std	Y+4, r25	; 0x04
    2256:	8b 83       	std	Y+3, r24	; 0x03
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	9c 81       	ldd	r25, Y+4	; 0x04
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <LCD_enuWriteFrmRI8toLFT+0x130>
    2260:	9c 83       	std	Y+4, r25	; 0x04
    2262:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2264:	8d 81       	ldd	r24, Y+5	; 0x05
    2266:	9e 81       	ldd	r25, Y+6	; 0x06
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	9e 83       	std	Y+6, r25	; 0x06
    226c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226e:	8d 81       	ldd	r24, Y+5	; 0x05
    2270:	9e 81       	ldd	r25, Y+6	; 0x06
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	69 f7       	brne	.-38     	; 0x2250 <LCD_enuWriteFrmRI8toLFT+0x124>
    2276:	14 c0       	rjmp	.+40     	; 0x22a0 <LCD_enuWriteFrmRI8toLFT+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2278:	6f 81       	ldd	r22, Y+7	; 0x07
    227a:	78 85       	ldd	r23, Y+8	; 0x08
    227c:	89 85       	ldd	r24, Y+9	; 0x09
    227e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2280:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	9e 83       	std	Y+6, r25	; 0x06
    228a:	8d 83       	std	Y+5, r24	; 0x05
    228c:	8d 81       	ldd	r24, Y+5	; 0x05
    228e:	9e 81       	ldd	r25, Y+6	; 0x06
    2290:	9a 83       	std	Y+2, r25	; 0x02
    2292:	89 83       	std	Y+1, r24	; 0x01
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	9a 81       	ldd	r25, Y+2	; 0x02
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	f1 f7       	brne	.-4      	; 0x2298 <LCD_enuWriteFrmRI8toLFT+0x16c>
    229c:	9a 83       	std	Y+2, r25	; 0x02
    229e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	62 e0       	ldi	r22, 0x02	; 2
    22a4:	40 e0       	ldi	r20, 0x00	; 0
    22a6:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>


	return Local_enuErrorState;
    22aa:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    22ac:	2f 96       	adiw	r28, 0x0f	; 15
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <LCD_enuWriteFrmLFTtoRI8>:
ES_t LCD_enuWriteFrmLFTtoRI8(void)
{
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	2f 97       	sbiw	r28, 0x0f	; 15
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	62 e0       	ldi	r22, 0x02	; 2
    22da:	40 e0       	ldi	r20, 0x00	; 0
    22dc:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_LOW);
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	60 e0       	ldi	r22, 0x00	; 0
    22e4:	40 e0       	ldi	r20, 0x00	; 0
    22e6:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RW_Port,RW_Pin,DIO_LOW);
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	61 e0       	ldi	r22, 0x01	; 1
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB0_Port,DB0_Pin,DIO_LOW);
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	60 e0       	ldi	r22, 0x00	; 0
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB1_Port,DB1_Pin,DIO_HIGH);
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	61 e0       	ldi	r22, 0x01	; 1
    2302:	41 e0       	ldi	r20, 0x01	; 1
    2304:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB2_Port,DB2_Pin,DIO_HIGH);
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	62 e0       	ldi	r22, 0x02	; 2
    230c:	41 e0       	ldi	r20, 0x01	; 1
    230e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB3_Port,DB3_Pin,DIO_LOW);
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	63 e0       	ldi	r22, 0x03	; 3
    2316:	40 e0       	ldi	r20, 0x00	; 0
    2318:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB4_Port,DB4_Pin,DIO_LOW);
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	64 e0       	ldi	r22, 0x04	; 4
    2320:	40 e0       	ldi	r20, 0x00	; 0
    2322:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB5_Port,DB5_Pin,DIO_LOW);
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	65 e0       	ldi	r22, 0x05	; 5
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB6_Port,DB6_Pin,DIO_LOW);
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	66 e0       	ldi	r22, 0x06	; 6
    2334:	40 e0       	ldi	r20, 0x00	; 0
    2336:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB7_Port,DB7_Pin,DIO_LOW);
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	67 e0       	ldi	r22, 0x07	; 7
    233e:	40 e0       	ldi	r20, 0x00	; 0
    2340:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>

	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	62 e0       	ldi	r22, 0x02	; 2
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	a0 e2       	ldi	r26, 0x20	; 32
    2354:	b1 e4       	ldi	r27, 0x41	; 65
    2356:	8b 87       	std	Y+11, r24	; 0x0b
    2358:	9c 87       	std	Y+12, r25	; 0x0c
    235a:	ad 87       	std	Y+13, r26	; 0x0d
    235c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2360:	7c 85       	ldd	r23, Y+12	; 0x0c
    2362:	8d 85       	ldd	r24, Y+13	; 0x0d
    2364:	9e 85       	ldd	r25, Y+14	; 0x0e
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	4a e7       	ldi	r20, 0x7A	; 122
    236c:	53 e4       	ldi	r21, 0x43	; 67
    236e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	8f 83       	std	Y+7, r24	; 0x07
    2378:	98 87       	std	Y+8, r25	; 0x08
    237a:	a9 87       	std	Y+9, r26	; 0x09
    237c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    237e:	6f 81       	ldd	r22, Y+7	; 0x07
    2380:	78 85       	ldd	r23, Y+8	; 0x08
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e8       	ldi	r20, 0x80	; 128
    238c:	5f e3       	ldi	r21, 0x3F	; 63
    238e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2392:	88 23       	and	r24, r24
    2394:	2c f4       	brge	.+10     	; 0x23a0 <LCD_enuWriteFrmLFTtoRI8+0xe2>
		__ticks = 1;
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
    239e:	3f c0       	rjmp	.+126    	; 0x241e <LCD_enuWriteFrmLFTtoRI8+0x160>
	else if (__tmp > 65535)
    23a0:	6f 81       	ldd	r22, Y+7	; 0x07
    23a2:	78 85       	ldd	r23, Y+8	; 0x08
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	3f ef       	ldi	r19, 0xFF	; 255
    23ac:	4f e7       	ldi	r20, 0x7F	; 127
    23ae:	57 e4       	ldi	r21, 0x47	; 71
    23b0:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    23b4:	18 16       	cp	r1, r24
    23b6:	4c f5       	brge	.+82     	; 0x240a <LCD_enuWriteFrmLFTtoRI8+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    23bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23be:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e2       	ldi	r20, 0x20	; 32
    23c6:	51 e4       	ldi	r21, 0x41	; 65
    23c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	bc 01       	movw	r22, r24
    23d2:	cd 01       	movw	r24, r26
    23d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9e 83       	std	Y+6, r25	; 0x06
    23de:	8d 83       	std	Y+5, r24	; 0x05
    23e0:	0f c0       	rjmp	.+30     	; 0x2400 <LCD_enuWriteFrmLFTtoRI8+0x142>
    23e2:	89 e1       	ldi	r24, 0x19	; 25
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9c 83       	std	Y+4, r25	; 0x04
    23e8:	8b 83       	std	Y+3, r24	; 0x03
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <LCD_enuWriteFrmLFTtoRI8+0x130>
    23f2:	9c 83       	std	Y+4, r25	; 0x04
    23f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f6:	8d 81       	ldd	r24, Y+5	; 0x05
    23f8:	9e 81       	ldd	r25, Y+6	; 0x06
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	9e 81       	ldd	r25, Y+6	; 0x06
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	69 f7       	brne	.-38     	; 0x23e2 <LCD_enuWriteFrmLFTtoRI8+0x124>
    2408:	14 c0       	rjmp	.+40     	; 0x2432 <LCD_enuWriteFrmLFTtoRI8+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240a:	6f 81       	ldd	r22, Y+7	; 0x07
    240c:	78 85       	ldd	r23, Y+8	; 0x08
    240e:	89 85       	ldd	r24, Y+9	; 0x09
    2410:	9a 85       	ldd	r25, Y+10	; 0x0a
    2412:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9e 83       	std	Y+6, r25	; 0x06
    241c:	8d 83       	std	Y+5, r24	; 0x05
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	9e 81       	ldd	r25, Y+6	; 0x06
    2422:	9a 83       	std	Y+2, r25	; 0x02
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	9a 81       	ldd	r25, Y+2	; 0x02
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <LCD_enuWriteFrmLFTtoRI8+0x16c>
    242e:	9a 83       	std	Y+2, r25	; 0x02
    2430:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	62 e0       	ldi	r22, 0x02	; 2
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>


	return Local_enuErrorState;
    243c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    243e:	2f 96       	adiw	r28, 0x0f	; 15
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	f8 94       	cli
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	cd bf       	out	0x3d, r28	; 61
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <LCD_enuCreateLetter>:
ES_t LCD_enuCreateLetter(u8 Copy_u8PatternNUM,u8 *Copy_Pu8Character)
{
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	63 97       	sbiw	r28, 0x13	; 19
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	89 8b       	std	Y+17, r24	; 0x11
    2466:	7b 8b       	std	Y+19, r23	; 0x13
    2468:	6a 8b       	std	Y+18, r22	; 0x12
	ES_t Local_enuErrorState = ES_NOK;
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	88 8b       	std	Y+16, r24	; 0x10
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	62 e0       	ldi	r22, 0x02	; 2
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_LOW);
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RW_Port,RW_Pin,DIO_LOW);
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	61 e0       	ldi	r22, 0x01	; 1
    2486:	40 e0       	ldi	r20, 0x00	; 0
    2488:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	Copy_u8PatternNUM = 0x40 + 8 * Copy_u8PatternNUM;
    248c:	89 89       	ldd	r24, Y+17	; 0x11
    248e:	88 2f       	mov	r24, r24
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	08 96       	adiw	r24, 0x08	; 8
    2494:	88 0f       	add	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	88 0f       	add	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	89 8b       	std	Y+17, r24	; 0x11
	if(Copy_u8PatternNUM > 0x7f)
    24a2:	89 89       	ldd	r24, Y+17	; 0x11
    24a4:	88 23       	and	r24, r24
    24a6:	14 f4       	brge	.+4      	; 0x24ac <LCD_enuCreateLetter+0x5c>
		Local_enuErrorState = ES_Out_Of_Range;
    24a8:	83 e0       	ldi	r24, 0x03	; 3
    24aa:	88 8b       	std	Y+16, r24	; 0x10
	DIO_enuSetPINVAL(DB0_Port,DB0_Pin,(Copy_u8PatternNUM>>0)&1);
    24ac:	89 89       	ldd	r24, Y+17	; 0x11
    24ae:	98 2f       	mov	r25, r24
    24b0:	91 70       	andi	r25, 0x01	; 1
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	60 e0       	ldi	r22, 0x00	; 0
    24b6:	49 2f       	mov	r20, r25
    24b8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB1_Port,DB1_Pin,(Copy_u8PatternNUM>>1)&1);
    24bc:	89 89       	ldd	r24, Y+17	; 0x11
    24be:	86 95       	lsr	r24
    24c0:	98 2f       	mov	r25, r24
    24c2:	91 70       	andi	r25, 0x01	; 1
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	61 e0       	ldi	r22, 0x01	; 1
    24c8:	49 2f       	mov	r20, r25
    24ca:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB2_Port,DB2_Pin,(Copy_u8PatternNUM>>2)&1);
    24ce:	89 89       	ldd	r24, Y+17	; 0x11
    24d0:	86 95       	lsr	r24
    24d2:	86 95       	lsr	r24
    24d4:	98 2f       	mov	r25, r24
    24d6:	91 70       	andi	r25, 0x01	; 1
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	62 e0       	ldi	r22, 0x02	; 2
    24dc:	49 2f       	mov	r20, r25
    24de:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB3_Port,DB3_Pin,(Copy_u8PatternNUM>>3)&1);
    24e2:	89 89       	ldd	r24, Y+17	; 0x11
    24e4:	86 95       	lsr	r24
    24e6:	86 95       	lsr	r24
    24e8:	86 95       	lsr	r24
    24ea:	98 2f       	mov	r25, r24
    24ec:	91 70       	andi	r25, 0x01	; 1
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	63 e0       	ldi	r22, 0x03	; 3
    24f2:	49 2f       	mov	r20, r25
    24f4:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB4_Port,DB4_Pin,(Copy_u8PatternNUM>>4)&1);
    24f8:	89 89       	ldd	r24, Y+17	; 0x11
    24fa:	82 95       	swap	r24
    24fc:	8f 70       	andi	r24, 0x0F	; 15
    24fe:	98 2f       	mov	r25, r24
    2500:	91 70       	andi	r25, 0x01	; 1
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	64 e0       	ldi	r22, 0x04	; 4
    2506:	49 2f       	mov	r20, r25
    2508:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB5_Port,DB5_Pin,(Copy_u8PatternNUM>>5)&1);
    250c:	89 89       	ldd	r24, Y+17	; 0x11
    250e:	82 95       	swap	r24
    2510:	86 95       	lsr	r24
    2512:	87 70       	andi	r24, 0x07	; 7
    2514:	98 2f       	mov	r25, r24
    2516:	91 70       	andi	r25, 0x01	; 1
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	65 e0       	ldi	r22, 0x05	; 5
    251c:	49 2f       	mov	r20, r25
    251e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB6_Port,DB6_Pin,(Copy_u8PatternNUM>>6)&1);
    2522:	89 89       	ldd	r24, Y+17	; 0x11
    2524:	82 95       	swap	r24
    2526:	86 95       	lsr	r24
    2528:	86 95       	lsr	r24
    252a:	83 70       	andi	r24, 0x03	; 3
    252c:	98 2f       	mov	r25, r24
    252e:	91 70       	andi	r25, 0x01	; 1
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	66 e0       	ldi	r22, 0x06	; 6
    2534:	49 2f       	mov	r20, r25
    2536:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB7_Port,DB7_Pin,(Copy_u8PatternNUM>>7)&1);
    253a:	89 89       	ldd	r24, Y+17	; 0x11
    253c:	98 2f       	mov	r25, r24
    253e:	99 1f       	adc	r25, r25
    2540:	99 27       	eor	r25, r25
    2542:	99 1f       	adc	r25, r25
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	67 e0       	ldi	r22, 0x07	; 7
    2548:	49 2f       	mov	r20, r25
    254a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>

	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	62 e0       	ldi	r22, 0x02	; 2
    2552:	41 e0       	ldi	r20, 0x01	; 1
    2554:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	a0 e2       	ldi	r26, 0x20	; 32
    255e:	b1 e4       	ldi	r27, 0x41	; 65
    2560:	8b 87       	std	Y+11, r24	; 0x0b
    2562:	9c 87       	std	Y+12, r25	; 0x0c
    2564:	ad 87       	std	Y+13, r26	; 0x0d
    2566:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2568:	6b 85       	ldd	r22, Y+11	; 0x0b
    256a:	7c 85       	ldd	r23, Y+12	; 0x0c
    256c:	8d 85       	ldd	r24, Y+13	; 0x0d
    256e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	4a e7       	ldi	r20, 0x7A	; 122
    2576:	53 e4       	ldi	r21, 0x43	; 67
    2578:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	8f 83       	std	Y+7, r24	; 0x07
    2582:	98 87       	std	Y+8, r25	; 0x08
    2584:	a9 87       	std	Y+9, r26	; 0x09
    2586:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2588:	6f 81       	ldd	r22, Y+7	; 0x07
    258a:	78 85       	ldd	r23, Y+8	; 0x08
    258c:	89 85       	ldd	r24, Y+9	; 0x09
    258e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e8       	ldi	r20, 0x80	; 128
    2596:	5f e3       	ldi	r21, 0x3F	; 63
    2598:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    259c:	88 23       	and	r24, r24
    259e:	2c f4       	brge	.+10     	; 0x25aa <LCD_enuCreateLetter+0x15a>
		__ticks = 1;
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9e 83       	std	Y+6, r25	; 0x06
    25a6:	8d 83       	std	Y+5, r24	; 0x05
    25a8:	3f c0       	rjmp	.+126    	; 0x2628 <LCD_enuCreateLetter+0x1d8>
	else if (__tmp > 65535)
    25aa:	6f 81       	ldd	r22, Y+7	; 0x07
    25ac:	78 85       	ldd	r23, Y+8	; 0x08
    25ae:	89 85       	ldd	r24, Y+9	; 0x09
    25b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	3f ef       	ldi	r19, 0xFF	; 255
    25b6:	4f e7       	ldi	r20, 0x7F	; 127
    25b8:	57 e4       	ldi	r21, 0x47	; 71
    25ba:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    25be:	18 16       	cp	r1, r24
    25c0:	4c f5       	brge	.+82     	; 0x2614 <LCD_enuCreateLetter+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e2       	ldi	r20, 0x20	; 32
    25d0:	51 e4       	ldi	r21, 0x41	; 65
    25d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	bc 01       	movw	r22, r24
    25dc:	cd 01       	movw	r24, r26
    25de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	9e 83       	std	Y+6, r25	; 0x06
    25e8:	8d 83       	std	Y+5, r24	; 0x05
    25ea:	0f c0       	rjmp	.+30     	; 0x260a <LCD_enuCreateLetter+0x1ba>
    25ec:	89 e1       	ldi	r24, 0x19	; 25
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	9c 83       	std	Y+4, r25	; 0x04
    25f2:	8b 83       	std	Y+3, r24	; 0x03
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	9c 81       	ldd	r25, Y+4	; 0x04
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <LCD_enuCreateLetter+0x1a8>
    25fc:	9c 83       	std	Y+4, r25	; 0x04
    25fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2600:	8d 81       	ldd	r24, Y+5	; 0x05
    2602:	9e 81       	ldd	r25, Y+6	; 0x06
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	9e 83       	std	Y+6, r25	; 0x06
    2608:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260a:	8d 81       	ldd	r24, Y+5	; 0x05
    260c:	9e 81       	ldd	r25, Y+6	; 0x06
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	69 f7       	brne	.-38     	; 0x25ec <LCD_enuCreateLetter+0x19c>
    2612:	14 c0       	rjmp	.+40     	; 0x263c <LCD_enuCreateLetter+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2614:	6f 81       	ldd	r22, Y+7	; 0x07
    2616:	78 85       	ldd	r23, Y+8	; 0x08
    2618:	89 85       	ldd	r24, Y+9	; 0x09
    261a:	9a 85       	ldd	r25, Y+10	; 0x0a
    261c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	9e 83       	std	Y+6, r25	; 0x06
    2626:	8d 83       	std	Y+5, r24	; 0x05
    2628:	8d 81       	ldd	r24, Y+5	; 0x05
    262a:	9e 81       	ldd	r25, Y+6	; 0x06
    262c:	9a 83       	std	Y+2, r25	; 0x02
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	9a 81       	ldd	r25, Y+2	; 0x02
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <LCD_enuCreateLetter+0x1e4>
    2638:	9a 83       	std	Y+2, r25	; 0x02
    263a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	62 e0       	ldi	r22, 0x02	; 2
    2640:	40 e0       	ldi	r20, 0x00	; 0
    2642:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	u8 Local_u8Leteral = 0;
    2646:	1f 86       	std	Y+15, r1	; 0x0f
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_HIGH);
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	60 e0       	ldi	r22, 0x00	; 0
    264c:	41 e0       	ldi	r20, 0x01	; 1
    264e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	for(Local_u8Leteral = 0; Local_u8Leteral < 8 ;Local_u8Leteral++)
    2652:	1f 86       	std	Y+15, r1	; 0x0f
    2654:	0e c0       	rjmp	.+28     	; 0x2672 <LCD_enuCreateLetter+0x222>
	LCD_VidDOPRVTask(Copy_Pu8Character[Local_u8Leteral]);
    2656:	8f 85       	ldd	r24, Y+15	; 0x0f
    2658:	28 2f       	mov	r18, r24
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	8a 89       	ldd	r24, Y+18	; 0x12
    265e:	9b 89       	ldd	r25, Y+19	; 0x13
    2660:	fc 01       	movw	r30, r24
    2662:	e2 0f       	add	r30, r18
    2664:	f3 1f       	adc	r31, r19
    2666:	80 81       	ld	r24, Z
    2668:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
	_delay_ms(10);
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
	u8 Local_u8Leteral = 0;
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_HIGH);
	for(Local_u8Leteral = 0; Local_u8Leteral < 8 ;Local_u8Leteral++)
    266c:	8f 85       	ldd	r24, Y+15	; 0x0f
    266e:	8f 5f       	subi	r24, 0xFF	; 255
    2670:	8f 87       	std	Y+15, r24	; 0x0f
    2672:	8f 85       	ldd	r24, Y+15	; 0x0f
    2674:	88 30       	cpi	r24, 0x08	; 8
    2676:	78 f3       	brcs	.-34     	; 0x2656 <LCD_enuCreateLetter+0x206>
	LCD_VidDOPRVTask(Copy_Pu8Character[Local_u8Leteral]);


	return Local_enuErrorState;
    2678:	88 89       	ldd	r24, Y+16	; 0x10
}
    267a:	63 96       	adiw	r28, 0x13	; 19
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	cd bf       	out	0x3d, r28	; 61
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <LCD_enuSetCurser>:
ES_t LCD_enuSetCurser(u8 Copy_u8PosX,u8 Copy_u8PosY)
{
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	61 97       	sbiw	r28, 0x11	; 17
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	88 8b       	std	Y+16, r24	; 0x10
    26a2:	69 8b       	std	Y+17, r22	; 0x11
	ES_t Local_enuErrorState = ES_NOK;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	62 e0       	ldi	r22, 0x02	; 2
    26ac:	40 e0       	ldi	r20, 0x00	; 0
    26ae:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_LOW);
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	60 e0       	ldi	r22, 0x00	; 0
    26b6:	40 e0       	ldi	r20, 0x00	; 0
    26b8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RW_Port,RW_Pin,DIO_LOW);
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	61 e0       	ldi	r22, 0x01	; 1
    26c0:	40 e0       	ldi	r20, 0x00	; 0
    26c2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>

	if(Copy_u8PosY == ROW_1 && Copy_u8PosX >= COLWN_1 &&Copy_u8PosX <= COLWN_16)
    26c6:	89 89       	ldd	r24, Y+17	; 0x11
    26c8:	81 30       	cpi	r24, 0x01	; 1
    26ca:	59 f4       	brne	.+22     	; 0x26e2 <LCD_enuSetCurser+0x56>
    26cc:	88 89       	ldd	r24, Y+16	; 0x10
    26ce:	88 23       	and	r24, r24
    26d0:	41 f0       	breq	.+16     	; 0x26e2 <LCD_enuSetCurser+0x56>
    26d2:	88 89       	ldd	r24, Y+16	; 0x10
    26d4:	81 31       	cpi	r24, 0x11	; 17
    26d6:	28 f4       	brcc	.+10     	; 0x26e2 <LCD_enuSetCurser+0x56>
		LCD_u8Curser = 0x80 + Copy_u8PosX - 1;
    26d8:	88 89       	ldd	r24, Y+16	; 0x10
    26da:	81 58       	subi	r24, 0x81	; 129
    26dc:	80 93 7f 01 	sts	0x017F, r24
    26e0:	10 c0       	rjmp	.+32     	; 0x2702 <LCD_enuSetCurser+0x76>
	else if(Copy_u8PosY == ROW_2 && Copy_u8PosX >= COLWN_1 &&Copy_u8PosX <= COLWN_16)
    26e2:	89 89       	ldd	r24, Y+17	; 0x11
    26e4:	82 30       	cpi	r24, 0x02	; 2
    26e6:	59 f4       	brne	.+22     	; 0x26fe <LCD_enuSetCurser+0x72>
    26e8:	88 89       	ldd	r24, Y+16	; 0x10
    26ea:	88 23       	and	r24, r24
    26ec:	41 f0       	breq	.+16     	; 0x26fe <LCD_enuSetCurser+0x72>
    26ee:	88 89       	ldd	r24, Y+16	; 0x10
    26f0:	81 31       	cpi	r24, 0x11	; 17
    26f2:	28 f4       	brcc	.+10     	; 0x26fe <LCD_enuSetCurser+0x72>
		LCD_u8Curser = 0xC0 + Copy_u8PosX - 1;
    26f4:	88 89       	ldd	r24, Y+16	; 0x10
    26f6:	81 54       	subi	r24, 0x41	; 65
    26f8:	80 93 7f 01 	sts	0x017F, r24
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <LCD_enuSetCurser+0x76>
	else
		Local_enuErrorState = ES_Out_Of_Range;
    26fe:	83 e0       	ldi	r24, 0x03	; 3
    2700:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_enuSetPINVAL(DB0_Port,DB0_Pin,(LCD_u8Curser>>0)&1);
    2702:	80 91 7f 01 	lds	r24, 0x017F
    2706:	98 2f       	mov	r25, r24
    2708:	91 70       	andi	r25, 0x01	; 1
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	49 2f       	mov	r20, r25
    2710:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB1_Port,DB1_Pin,(LCD_u8Curser>>1)&1);
    2714:	80 91 7f 01 	lds	r24, 0x017F
    2718:	86 95       	lsr	r24
    271a:	98 2f       	mov	r25, r24
    271c:	91 70       	andi	r25, 0x01	; 1
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	61 e0       	ldi	r22, 0x01	; 1
    2722:	49 2f       	mov	r20, r25
    2724:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB2_Port,DB2_Pin,(LCD_u8Curser>>2)&1);
    2728:	80 91 7f 01 	lds	r24, 0x017F
    272c:	86 95       	lsr	r24
    272e:	86 95       	lsr	r24
    2730:	98 2f       	mov	r25, r24
    2732:	91 70       	andi	r25, 0x01	; 1
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	62 e0       	ldi	r22, 0x02	; 2
    2738:	49 2f       	mov	r20, r25
    273a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB3_Port,DB3_Pin,(LCD_u8Curser>>3)&1);
    273e:	80 91 7f 01 	lds	r24, 0x017F
    2742:	86 95       	lsr	r24
    2744:	86 95       	lsr	r24
    2746:	86 95       	lsr	r24
    2748:	98 2f       	mov	r25, r24
    274a:	91 70       	andi	r25, 0x01	; 1
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	63 e0       	ldi	r22, 0x03	; 3
    2750:	49 2f       	mov	r20, r25
    2752:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB4_Port,DB4_Pin,(LCD_u8Curser>>4)&1);
    2756:	80 91 7f 01 	lds	r24, 0x017F
    275a:	82 95       	swap	r24
    275c:	8f 70       	andi	r24, 0x0F	; 15
    275e:	98 2f       	mov	r25, r24
    2760:	91 70       	andi	r25, 0x01	; 1
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	64 e0       	ldi	r22, 0x04	; 4
    2766:	49 2f       	mov	r20, r25
    2768:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB5_Port,DB5_Pin,(LCD_u8Curser>>5)&1);
    276c:	80 91 7f 01 	lds	r24, 0x017F
    2770:	82 95       	swap	r24
    2772:	86 95       	lsr	r24
    2774:	87 70       	andi	r24, 0x07	; 7
    2776:	98 2f       	mov	r25, r24
    2778:	91 70       	andi	r25, 0x01	; 1
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	65 e0       	ldi	r22, 0x05	; 5
    277e:	49 2f       	mov	r20, r25
    2780:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB6_Port,DB6_Pin,(LCD_u8Curser>>6)&1);
    2784:	80 91 7f 01 	lds	r24, 0x017F
    2788:	82 95       	swap	r24
    278a:	86 95       	lsr	r24
    278c:	86 95       	lsr	r24
    278e:	83 70       	andi	r24, 0x03	; 3
    2790:	98 2f       	mov	r25, r24
    2792:	91 70       	andi	r25, 0x01	; 1
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	66 e0       	ldi	r22, 0x06	; 6
    2798:	49 2f       	mov	r20, r25
    279a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB7_Port,DB7_Pin,(LCD_u8Curser>>7)&1);
    279e:	80 91 7f 01 	lds	r24, 0x017F
    27a2:	98 2f       	mov	r25, r24
    27a4:	99 1f       	adc	r25, r25
    27a6:	99 27       	eor	r25, r25
    27a8:	99 1f       	adc	r25, r25
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	67 e0       	ldi	r22, 0x07	; 7
    27ae:	49 2f       	mov	r20, r25
    27b0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>

	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	62 e0       	ldi	r22, 0x02	; 2
    27b8:	41 e0       	ldi	r20, 0x01	; 1
    27ba:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	a0 e2       	ldi	r26, 0x20	; 32
    27c4:	b1 e4       	ldi	r27, 0x41	; 65
    27c6:	8b 87       	std	Y+11, r24	; 0x0b
    27c8:	9c 87       	std	Y+12, r25	; 0x0c
    27ca:	ad 87       	std	Y+13, r26	; 0x0d
    27cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	4a e7       	ldi	r20, 0x7A	; 122
    27dc:	53 e4       	ldi	r21, 0x43	; 67
    27de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	8f 83       	std	Y+7, r24	; 0x07
    27e8:	98 87       	std	Y+8, r25	; 0x08
    27ea:	a9 87       	std	Y+9, r26	; 0x09
    27ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ee:	6f 81       	ldd	r22, Y+7	; 0x07
    27f0:	78 85       	ldd	r23, Y+8	; 0x08
    27f2:	89 85       	ldd	r24, Y+9	; 0x09
    27f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e8       	ldi	r20, 0x80	; 128
    27fc:	5f e3       	ldi	r21, 0x3F	; 63
    27fe:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2802:	88 23       	and	r24, r24
    2804:	2c f4       	brge	.+10     	; 0x2810 <LCD_enuSetCurser+0x184>
		__ticks = 1;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	9e 83       	std	Y+6, r25	; 0x06
    280c:	8d 83       	std	Y+5, r24	; 0x05
    280e:	3f c0       	rjmp	.+126    	; 0x288e <LCD_enuSetCurser+0x202>
	else if (__tmp > 65535)
    2810:	6f 81       	ldd	r22, Y+7	; 0x07
    2812:	78 85       	ldd	r23, Y+8	; 0x08
    2814:	89 85       	ldd	r24, Y+9	; 0x09
    2816:	9a 85       	ldd	r25, Y+10	; 0x0a
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	3f ef       	ldi	r19, 0xFF	; 255
    281c:	4f e7       	ldi	r20, 0x7F	; 127
    281e:	57 e4       	ldi	r21, 0x47	; 71
    2820:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2824:	18 16       	cp	r1, r24
    2826:	4c f5       	brge	.+82     	; 0x287a <LCD_enuSetCurser+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2828:	6b 85       	ldd	r22, Y+11	; 0x0b
    282a:	7c 85       	ldd	r23, Y+12	; 0x0c
    282c:	8d 85       	ldd	r24, Y+13	; 0x0d
    282e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e2       	ldi	r20, 0x20	; 32
    2836:	51 e4       	ldi	r21, 0x41	; 65
    2838:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	bc 01       	movw	r22, r24
    2842:	cd 01       	movw	r24, r26
    2844:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	9e 83       	std	Y+6, r25	; 0x06
    284e:	8d 83       	std	Y+5, r24	; 0x05
    2850:	0f c0       	rjmp	.+30     	; 0x2870 <LCD_enuSetCurser+0x1e4>
    2852:	89 e1       	ldi	r24, 0x19	; 25
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	9c 83       	std	Y+4, r25	; 0x04
    2858:	8b 83       	std	Y+3, r24	; 0x03
    285a:	8b 81       	ldd	r24, Y+3	; 0x03
    285c:	9c 81       	ldd	r25, Y+4	; 0x04
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <LCD_enuSetCurser+0x1d2>
    2862:	9c 83       	std	Y+4, r25	; 0x04
    2864:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2866:	8d 81       	ldd	r24, Y+5	; 0x05
    2868:	9e 81       	ldd	r25, Y+6	; 0x06
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	9e 83       	std	Y+6, r25	; 0x06
    286e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2870:	8d 81       	ldd	r24, Y+5	; 0x05
    2872:	9e 81       	ldd	r25, Y+6	; 0x06
    2874:	00 97       	sbiw	r24, 0x00	; 0
    2876:	69 f7       	brne	.-38     	; 0x2852 <LCD_enuSetCurser+0x1c6>
    2878:	14 c0       	rjmp	.+40     	; 0x28a2 <LCD_enuSetCurser+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287a:	6f 81       	ldd	r22, Y+7	; 0x07
    287c:	78 85       	ldd	r23, Y+8	; 0x08
    287e:	89 85       	ldd	r24, Y+9	; 0x09
    2880:	9a 85       	ldd	r25, Y+10	; 0x0a
    2882:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	9e 83       	std	Y+6, r25	; 0x06
    288c:	8d 83       	std	Y+5, r24	; 0x05
    288e:	8d 81       	ldd	r24, Y+5	; 0x05
    2890:	9e 81       	ldd	r25, Y+6	; 0x06
    2892:	9a 83       	std	Y+2, r25	; 0x02
    2894:	89 83       	std	Y+1, r24	; 0x01
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	9a 81       	ldd	r25, Y+2	; 0x02
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	f1 f7       	brne	.-4      	; 0x289a <LCD_enuSetCurser+0x20e>
    289e:	9a 83       	std	Y+2, r25	; 0x02
    28a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	62 e0       	ldi	r22, 0x02	; 2
    28a6:	40 e0       	ldi	r20, 0x00	; 0
    28a8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>


	return Local_enuErrorState;
    28ac:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    28ae:	61 96       	adiw	r28, 0x11	; 17
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	08 95       	ret

000028c0 <LCD_enuClearLCD>:
ES_t LCD_enuClearLCD(void)
{
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	2f 97       	sbiw	r28, 0x0f	; 15
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	f8 94       	cli
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	8f 87       	std	Y+15, r24	; 0x0f
		DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	62 e0       	ldi	r22, 0x02	; 2
    28dc:	40 e0       	ldi	r20, 0x00	; 0
    28de:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_LOW);
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	60 e0       	ldi	r22, 0x00	; 0
    28e6:	40 e0       	ldi	r20, 0x00	; 0
    28e8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(RW_Port,RW_Pin,DIO_LOW);
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	61 e0       	ldi	r22, 0x01	; 1
    28f0:	40 e0       	ldi	r20, 0x00	; 0
    28f2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB0_Port,DB0_Pin,DIO_HIGH);
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	60 e0       	ldi	r22, 0x00	; 0
    28fa:	41 e0       	ldi	r20, 0x01	; 1
    28fc:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB1_Port,DB1_Pin,DIO_LOW);
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	61 e0       	ldi	r22, 0x01	; 1
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB2_Port,DB2_Pin,DIO_LOW);
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	62 e0       	ldi	r22, 0x02	; 2
    290e:	40 e0       	ldi	r20, 0x00	; 0
    2910:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB3_Port,DB3_Pin,DIO_LOW);
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	63 e0       	ldi	r22, 0x03	; 3
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB4_Port,DB4_Pin,DIO_LOW);
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	64 e0       	ldi	r22, 0x04	; 4
    2922:	40 e0       	ldi	r20, 0x00	; 0
    2924:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB5_Port,DB5_Pin,DIO_LOW);
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	65 e0       	ldi	r22, 0x05	; 5
    292c:	40 e0       	ldi	r20, 0x00	; 0
    292e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB6_Port,DB6_Pin,DIO_LOW);
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	66 e0       	ldi	r22, 0x06	; 6
    2936:	40 e0       	ldi	r20, 0x00	; 0
    2938:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB7_Port,DB7_Pin,DIO_LOW);
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	67 e0       	ldi	r22, 0x07	; 7
    2940:	40 e0       	ldi	r20, 0x00	; 0
    2942:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>

		DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	62 e0       	ldi	r22, 0x02	; 2
    294a:	41 e0       	ldi	r20, 0x01	; 1
    294c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	a0 e2       	ldi	r26, 0x20	; 32
    2956:	b1 e4       	ldi	r27, 0x41	; 65
    2958:	8b 87       	std	Y+11, r24	; 0x0b
    295a:	9c 87       	std	Y+12, r25	; 0x0c
    295c:	ad 87       	std	Y+13, r26	; 0x0d
    295e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2960:	6b 85       	ldd	r22, Y+11	; 0x0b
    2962:	7c 85       	ldd	r23, Y+12	; 0x0c
    2964:	8d 85       	ldd	r24, Y+13	; 0x0d
    2966:	9e 85       	ldd	r25, Y+14	; 0x0e
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	4a e7       	ldi	r20, 0x7A	; 122
    296e:	53 e4       	ldi	r21, 0x43	; 67
    2970:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	8f 83       	std	Y+7, r24	; 0x07
    297a:	98 87       	std	Y+8, r25	; 0x08
    297c:	a9 87       	std	Y+9, r26	; 0x09
    297e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2980:	6f 81       	ldd	r22, Y+7	; 0x07
    2982:	78 85       	ldd	r23, Y+8	; 0x08
    2984:	89 85       	ldd	r24, Y+9	; 0x09
    2986:	9a 85       	ldd	r25, Y+10	; 0x0a
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e8       	ldi	r20, 0x80	; 128
    298e:	5f e3       	ldi	r21, 0x3F	; 63
    2990:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2994:	88 23       	and	r24, r24
    2996:	2c f4       	brge	.+10     	; 0x29a2 <LCD_enuClearLCD+0xe2>
		__ticks = 1;
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	9e 83       	std	Y+6, r25	; 0x06
    299e:	8d 83       	std	Y+5, r24	; 0x05
    29a0:	3f c0       	rjmp	.+126    	; 0x2a20 <LCD_enuClearLCD+0x160>
	else if (__tmp > 65535)
    29a2:	6f 81       	ldd	r22, Y+7	; 0x07
    29a4:	78 85       	ldd	r23, Y+8	; 0x08
    29a6:	89 85       	ldd	r24, Y+9	; 0x09
    29a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	3f ef       	ldi	r19, 0xFF	; 255
    29ae:	4f e7       	ldi	r20, 0x7F	; 127
    29b0:	57 e4       	ldi	r21, 0x47	; 71
    29b2:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	4c f5       	brge	.+82     	; 0x2a0c <LCD_enuClearLCD+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    29bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29be:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e2       	ldi	r20, 0x20	; 32
    29c8:	51 e4       	ldi	r21, 0x41	; 65
    29ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	bc 01       	movw	r22, r24
    29d4:	cd 01       	movw	r24, r26
    29d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	9e 83       	std	Y+6, r25	; 0x06
    29e0:	8d 83       	std	Y+5, r24	; 0x05
    29e2:	0f c0       	rjmp	.+30     	; 0x2a02 <LCD_enuClearLCD+0x142>
    29e4:	89 e1       	ldi	r24, 0x19	; 25
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	9c 83       	std	Y+4, r25	; 0x04
    29ea:	8b 83       	std	Y+3, r24	; 0x03
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	9c 81       	ldd	r25, Y+4	; 0x04
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <LCD_enuClearLCD+0x130>
    29f4:	9c 83       	std	Y+4, r25	; 0x04
    29f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f8:	8d 81       	ldd	r24, Y+5	; 0x05
    29fa:	9e 81       	ldd	r25, Y+6	; 0x06
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	9e 83       	std	Y+6, r25	; 0x06
    2a00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a02:	8d 81       	ldd	r24, Y+5	; 0x05
    2a04:	9e 81       	ldd	r25, Y+6	; 0x06
    2a06:	00 97       	sbiw	r24, 0x00	; 0
    2a08:	69 f7       	brne	.-38     	; 0x29e4 <LCD_enuClearLCD+0x124>
    2a0a:	14 c0       	rjmp	.+40     	; 0x2a34 <LCD_enuClearLCD+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0e:	78 85       	ldd	r23, Y+8	; 0x08
    2a10:	89 85       	ldd	r24, Y+9	; 0x09
    2a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	9e 83       	std	Y+6, r25	; 0x06
    2a1e:	8d 83       	std	Y+5, r24	; 0x05
    2a20:	8d 81       	ldd	r24, Y+5	; 0x05
    2a22:	9e 81       	ldd	r25, Y+6	; 0x06
    2a24:	9a 83       	std	Y+2, r25	; 0x02
    2a26:	89 83       	std	Y+1, r24	; 0x01
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <LCD_enuClearLCD+0x16c>
    2a30:	9a 83       	std	Y+2, r25	; 0x02
    2a32:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	62 e0       	ldi	r22, 0x02	; 2
    2a38:	40 e0       	ldi	r20, 0x00	; 0
    2a3a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>


		return Local_enuErrorState;
    2a3e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2a40:	2f 96       	adiw	r28, 0x0f	; 15
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	f8 94       	cli
    2a46:	de bf       	out	0x3e, r29	; 62
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	cd bf       	out	0x3d, r28	; 61
    2a4c:	cf 91       	pop	r28
    2a4e:	df 91       	pop	r29
    2a50:	08 95       	ret

00002a52 <LCD_enuDispChar>:
ES_t LCD_enuDispChar(u8 Copy_u8Char)
{
    2a52:	df 93       	push	r29
    2a54:	cf 93       	push	r28
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    2a5a:	60 97       	sbiw	r28, 0x10	; 16
    2a5c:	0f b6       	in	r0, 0x3f	; 63
    2a5e:	f8 94       	cli
    2a60:	de bf       	out	0x3e, r29	; 62
    2a62:	0f be       	out	0x3f, r0	; 63
    2a64:	cd bf       	out	0x3d, r28	; 61
    2a66:	88 8b       	std	Y+16, r24	; 0x10
	ES_t Local_enuErrorState = ES_NOK;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	62 e0       	ldi	r22, 0x02	; 2
    2a70:	40 e0       	ldi	r20, 0x00	; 0
    2a72:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_LOW);
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	60 e0       	ldi	r22, 0x00	; 0
    2a7a:	40 e0       	ldi	r20, 0x00	; 0
    2a7c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(RW_Port,RW_Pin,DIO_LOW);
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	61 e0       	ldi	r22, 0x01	; 1
    2a84:	40 e0       	ldi	r20, 0x00	; 0
    2a86:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>


		if(LCD_u8Curser >0x8F && LCD_u8Curser < 0xC0)
    2a8a:	80 91 7f 01 	lds	r24, 0x017F
    2a8e:	80 39       	cpi	r24, 0x90	; 144
    2a90:	40 f0       	brcs	.+16     	; 0x2aa2 <LCD_enuDispChar+0x50>
    2a92:	80 91 7f 01 	lds	r24, 0x017F
    2a96:	80 3c       	cpi	r24, 0xC0	; 192
    2a98:	20 f4       	brcc	.+8      	; 0x2aa2 <LCD_enuDispChar+0x50>
			LCD_u8Curser = 0xC0;
    2a9a:	80 ec       	ldi	r24, 0xC0	; 192
    2a9c:	80 93 7f 01 	sts	0x017F, r24
    2aa0:	0b c0       	rjmp	.+22     	; 0x2ab8 <LCD_enuDispChar+0x66>
		else if(LCD_u8Curser >0xCF && LCD_u8Curser <0x80)
    2aa2:	80 91 7f 01 	lds	r24, 0x017F
    2aa6:	80 3d       	cpi	r24, 0xD0	; 208
    2aa8:	38 f0       	brcs	.+14     	; 0x2ab8 <LCD_enuDispChar+0x66>
    2aaa:	80 91 7f 01 	lds	r24, 0x017F
    2aae:	88 23       	and	r24, r24
    2ab0:	1c f0       	brlt	.+6      	; 0x2ab8 <LCD_enuDispChar+0x66>
			LCD_u8Curser = 0x80;
    2ab2:	80 e8       	ldi	r24, 0x80	; 128
    2ab4:	80 93 7f 01 	sts	0x017F, r24
		DIO_enuSetPINVAL(DB0_Port,DB0_Pin,(LCD_u8Curser>>0)&1);
    2ab8:	80 91 7f 01 	lds	r24, 0x017F
    2abc:	98 2f       	mov	r25, r24
    2abe:	91 70       	andi	r25, 0x01	; 1
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	60 e0       	ldi	r22, 0x00	; 0
    2ac4:	49 2f       	mov	r20, r25
    2ac6:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB1_Port,DB1_Pin,(LCD_u8Curser>>1)&1);
    2aca:	80 91 7f 01 	lds	r24, 0x017F
    2ace:	86 95       	lsr	r24
    2ad0:	98 2f       	mov	r25, r24
    2ad2:	91 70       	andi	r25, 0x01	; 1
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	61 e0       	ldi	r22, 0x01	; 1
    2ad8:	49 2f       	mov	r20, r25
    2ada:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB2_Port,DB2_Pin,(LCD_u8Curser>>2)&1);
    2ade:	80 91 7f 01 	lds	r24, 0x017F
    2ae2:	86 95       	lsr	r24
    2ae4:	86 95       	lsr	r24
    2ae6:	98 2f       	mov	r25, r24
    2ae8:	91 70       	andi	r25, 0x01	; 1
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	62 e0       	ldi	r22, 0x02	; 2
    2aee:	49 2f       	mov	r20, r25
    2af0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB3_Port,DB3_Pin,(LCD_u8Curser>>3)&1);
    2af4:	80 91 7f 01 	lds	r24, 0x017F
    2af8:	86 95       	lsr	r24
    2afa:	86 95       	lsr	r24
    2afc:	86 95       	lsr	r24
    2afe:	98 2f       	mov	r25, r24
    2b00:	91 70       	andi	r25, 0x01	; 1
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	63 e0       	ldi	r22, 0x03	; 3
    2b06:	49 2f       	mov	r20, r25
    2b08:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB4_Port,DB4_Pin,(LCD_u8Curser>>4)&1);
    2b0c:	80 91 7f 01 	lds	r24, 0x017F
    2b10:	82 95       	swap	r24
    2b12:	8f 70       	andi	r24, 0x0F	; 15
    2b14:	98 2f       	mov	r25, r24
    2b16:	91 70       	andi	r25, 0x01	; 1
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	64 e0       	ldi	r22, 0x04	; 4
    2b1c:	49 2f       	mov	r20, r25
    2b1e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB5_Port,DB5_Pin,(LCD_u8Curser>>5)&1);
    2b22:	80 91 7f 01 	lds	r24, 0x017F
    2b26:	82 95       	swap	r24
    2b28:	86 95       	lsr	r24
    2b2a:	87 70       	andi	r24, 0x07	; 7
    2b2c:	98 2f       	mov	r25, r24
    2b2e:	91 70       	andi	r25, 0x01	; 1
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	65 e0       	ldi	r22, 0x05	; 5
    2b34:	49 2f       	mov	r20, r25
    2b36:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB6_Port,DB6_Pin,(LCD_u8Curser>>6)&1);
    2b3a:	80 91 7f 01 	lds	r24, 0x017F
    2b3e:	82 95       	swap	r24
    2b40:	86 95       	lsr	r24
    2b42:	86 95       	lsr	r24
    2b44:	83 70       	andi	r24, 0x03	; 3
    2b46:	98 2f       	mov	r25, r24
    2b48:	91 70       	andi	r25, 0x01	; 1
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	66 e0       	ldi	r22, 0x06	; 6
    2b4e:	49 2f       	mov	r20, r25
    2b50:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB7_Port,DB7_Pin,(LCD_u8Curser>>7)&1);
    2b54:	80 91 7f 01 	lds	r24, 0x017F
    2b58:	98 2f       	mov	r25, r24
    2b5a:	99 1f       	adc	r25, r25
    2b5c:	99 27       	eor	r25, r25
    2b5e:	99 1f       	adc	r25, r25
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	67 e0       	ldi	r22, 0x07	; 7
    2b64:	49 2f       	mov	r20, r25
    2b66:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>

		DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	62 e0       	ldi	r22, 0x02	; 2
    2b6e:	41 e0       	ldi	r20, 0x01	; 1
    2b70:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	a0 e2       	ldi	r26, 0x20	; 32
    2b7a:	b1 e4       	ldi	r27, 0x41	; 65
    2b7c:	8b 87       	std	Y+11, r24	; 0x0b
    2b7e:	9c 87       	std	Y+12, r25	; 0x0c
    2b80:	ad 87       	std	Y+13, r26	; 0x0d
    2b82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	4a e7       	ldi	r20, 0x7A	; 122
    2b92:	53 e4       	ldi	r21, 0x43	; 67
    2b94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	8f 83       	std	Y+7, r24	; 0x07
    2b9e:	98 87       	std	Y+8, r25	; 0x08
    2ba0:	a9 87       	std	Y+9, r26	; 0x09
    2ba2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba6:	78 85       	ldd	r23, Y+8	; 0x08
    2ba8:	89 85       	ldd	r24, Y+9	; 0x09
    2baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e8       	ldi	r20, 0x80	; 128
    2bb2:	5f e3       	ldi	r21, 0x3F	; 63
    2bb4:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2bb8:	88 23       	and	r24, r24
    2bba:	2c f4       	brge	.+10     	; 0x2bc6 <LCD_enuDispChar+0x174>
		__ticks = 1;
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	9e 83       	std	Y+6, r25	; 0x06
    2bc2:	8d 83       	std	Y+5, r24	; 0x05
    2bc4:	3f c0       	rjmp	.+126    	; 0x2c44 <LCD_enuDispChar+0x1f2>
	else if (__tmp > 65535)
    2bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc8:	78 85       	ldd	r23, Y+8	; 0x08
    2bca:	89 85       	ldd	r24, Y+9	; 0x09
    2bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	3f ef       	ldi	r19, 0xFF	; 255
    2bd2:	4f e7       	ldi	r20, 0x7F	; 127
    2bd4:	57 e4       	ldi	r21, 0x47	; 71
    2bd6:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2bda:	18 16       	cp	r1, r24
    2bdc:	4c f5       	brge	.+82     	; 0x2c30 <LCD_enuDispChar+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e2       	ldi	r20, 0x20	; 32
    2bec:	51 e4       	ldi	r21, 0x41	; 65
    2bee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9e 83       	std	Y+6, r25	; 0x06
    2c04:	8d 83       	std	Y+5, r24	; 0x05
    2c06:	0f c0       	rjmp	.+30     	; 0x2c26 <LCD_enuDispChar+0x1d4>
    2c08:	89 e1       	ldi	r24, 0x19	; 25
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	9c 83       	std	Y+4, r25	; 0x04
    2c0e:	8b 83       	std	Y+3, r24	; 0x03
    2c10:	8b 81       	ldd	r24, Y+3	; 0x03
    2c12:	9c 81       	ldd	r25, Y+4	; 0x04
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <LCD_enuDispChar+0x1c2>
    2c18:	9c 83       	std	Y+4, r25	; 0x04
    2c1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	9e 83       	std	Y+6, r25	; 0x06
    2c24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c26:	8d 81       	ldd	r24, Y+5	; 0x05
    2c28:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	69 f7       	brne	.-38     	; 0x2c08 <LCD_enuDispChar+0x1b6>
    2c2e:	14 c0       	rjmp	.+40     	; 0x2c58 <LCD_enuDispChar+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c30:	6f 81       	ldd	r22, Y+7	; 0x07
    2c32:	78 85       	ldd	r23, Y+8	; 0x08
    2c34:	89 85       	ldd	r24, Y+9	; 0x09
    2c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	9e 83       	std	Y+6, r25	; 0x06
    2c42:	8d 83       	std	Y+5, r24	; 0x05
    2c44:	8d 81       	ldd	r24, Y+5	; 0x05
    2c46:	9e 81       	ldd	r25, Y+6	; 0x06
    2c48:	9a 83       	std	Y+2, r25	; 0x02
    2c4a:	89 83       	std	Y+1, r24	; 0x01
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	f1 f7       	brne	.-4      	; 0x2c50 <LCD_enuDispChar+0x1fe>
    2c54:	9a 83       	std	Y+2, r25	; 0x02
    2c56:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	62 e0       	ldi	r22, 0x02	; 2
    2c5c:	40 e0       	ldi	r20, 0x00	; 0
    2c5e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>



	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_HIGH);
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	60 e0       	ldi	r22, 0x00	; 0
    2c66:	41 e0       	ldi	r20, 0x01	; 1
    2c68:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	LCD_VidDOPRVTask(Copy_u8Char);
    2c6c:	88 89       	ldd	r24, Y+16	; 0x10
    2c6e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>
	LCD_u8Curser++;
    2c72:	80 91 7f 01 	lds	r24, 0x017F
    2c76:	8f 5f       	subi	r24, 0xFF	; 255
    2c78:	80 93 7f 01 	sts	0x017F, r24
	return Local_enuErrorState;
    2c7c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2c7e:	60 96       	adiw	r28, 0x10	; 16
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	cd bf       	out	0x3d, r28	; 61
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <LCD_enuDispString>:

ES_t LCD_enuDispString(u8 * Copy_u8String)
{
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <LCD_enuDispString+0x6>
    2c96:	00 d0       	rcall	.+0      	; 0x2c98 <LCD_enuDispString+0x8>
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
    2c9c:	9c 83       	std	Y+4, r25	; 0x04
    2c9e:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	8a 83       	std	Y+2, r24	; 0x02

		DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_HIGH);
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	60 e0       	ldi	r22, 0x00	; 0
    2ca8:	41 e0       	ldi	r20, 0x01	; 1
    2caa:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
		u8 Local_iterator =0;
    2cae:	19 82       	std	Y+1, r1	; 0x01
		for(Local_iterator =0;Copy_u8String[Local_iterator]!='\0';Local_iterator++)
    2cb0:	19 82       	std	Y+1, r1	; 0x01
    2cb2:	0e c0       	rjmp	.+28     	; 0x2cd0 <LCD_enuDispString+0x40>
		{
			LCD_VidDOPRVTask(Copy_u8String[Local_iterator]);
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	28 2f       	mov	r18, r24
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	e2 0f       	add	r30, r18
    2cc2:	f3 1f       	adc	r31, r19
    2cc4:	80 81       	ld	r24, Z
    2cc6:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>
{
	ES_t Local_enuErrorState = ES_NOK;

		DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_HIGH);
		u8 Local_iterator =0;
		for(Local_iterator =0;Copy_u8String[Local_iterator]!='\0';Local_iterator++)
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
    2ccc:	8f 5f       	subi	r24, 0xFF	; 255
    2cce:	89 83       	std	Y+1, r24	; 0x01
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	28 2f       	mov	r18, r24
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cda:	fc 01       	movw	r30, r24
    2cdc:	e2 0f       	add	r30, r18
    2cde:	f3 1f       	adc	r31, r19
    2ce0:	80 81       	ld	r24, Z
    2ce2:	88 23       	and	r24, r24
    2ce4:	39 f7       	brne	.-50     	; 0x2cb4 <LCD_enuDispString+0x24>
		{
			LCD_VidDOPRVTask(Copy_u8String[Local_iterator]);
		}
	return Local_enuErrorState;
    2ce6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <LCD_enuDispINTNumber>:

ES_t LCD_enuDispINTNumber(s32  Copy_u8NUM)
{
    2cf6:	ef 92       	push	r14
    2cf8:	ff 92       	push	r15
    2cfa:	0f 93       	push	r16
    2cfc:	1f 93       	push	r17
    2cfe:	df 93       	push	r29
    2d00:	cf 93       	push	r28
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
    2d06:	61 97       	sbiw	r28, 0x11	; 17
    2d08:	0f b6       	in	r0, 0x3f	; 63
    2d0a:	f8 94       	cli
    2d0c:	de bf       	out	0x3e, r29	; 62
    2d0e:	0f be       	out	0x3f, r0	; 63
    2d10:	cd bf       	out	0x3d, r28	; 61
    2d12:	6a 87       	std	Y+10, r22	; 0x0a
    2d14:	7b 87       	std	Y+11, r23	; 0x0b
    2d16:	8c 87       	std	Y+12, r24	; 0x0c
    2d18:	9d 87       	std	Y+13, r25	; 0x0d
	ES_t Local_enuErrorState = ES_NOK;
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	89 87       	std	Y+9, r24	; 0x09
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_HIGH);
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	60 e0       	ldi	r22, 0x00	; 0
    2d22:	41 e0       	ldi	r20, 0x01	; 1
    2d24:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>

	s32 Local_s32Tempvar = 0,Local_s32iterator = 0;
    2d28:	1d 82       	std	Y+5, r1	; 0x05
    2d2a:	1e 82       	std	Y+6, r1	; 0x06
    2d2c:	1f 82       	std	Y+7, r1	; 0x07
    2d2e:	18 86       	std	Y+8, r1	; 0x08
    2d30:	19 82       	std	Y+1, r1	; 0x01
    2d32:	1a 82       	std	Y+2, r1	; 0x02
    2d34:	1b 82       	std	Y+3, r1	; 0x03
    2d36:	1c 82       	std	Y+4, r1	; 0x04
    2d38:	5b c0       	rjmp	.+182    	; 0x2df0 <LCD_enuDispINTNumber+0xfa>

	while(Copy_u8NUM)
	{
		Local_s32Tempvar = (Local_s32Tempvar*10)+(Copy_u8NUM%10);
    2d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3e:	af 81       	ldd	r26, Y+7	; 0x07
    2d40:	b8 85       	ldd	r27, Y+8	; 0x08
    2d42:	2a e0       	ldi	r18, 0x0A	; 10
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e0       	ldi	r20, 0x00	; 0
    2d48:	50 e0       	ldi	r21, 0x00	; 0
    2d4a:	bc 01       	movw	r22, r24
    2d4c:	cd 01       	movw	r24, r26
    2d4e:	0e 94 bd 21 	call	0x437a	; 0x437a <__mulsi3>
    2d52:	7b 01       	movw	r14, r22
    2d54:	8c 01       	movw	r16, r24
    2d56:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d58:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d5a:	ac 85       	ldd	r26, Y+12	; 0x0c
    2d5c:	bd 85       	ldd	r27, Y+13	; 0x0d
    2d5e:	2a e0       	ldi	r18, 0x0A	; 10
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e0       	ldi	r20, 0x00	; 0
    2d64:	50 e0       	ldi	r21, 0x00	; 0
    2d66:	bc 01       	movw	r22, r24
    2d68:	cd 01       	movw	r24, r26
    2d6a:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <__divmodsi4>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	8e 0d       	add	r24, r14
    2d74:	9f 1d       	adc	r25, r15
    2d76:	a0 1f       	adc	r26, r16
    2d78:	b1 1f       	adc	r27, r17
    2d7a:	8d 83       	std	Y+5, r24	; 0x05
    2d7c:	9e 83       	std	Y+6, r25	; 0x06
    2d7e:	af 83       	std	Y+7, r26	; 0x07
    2d80:	b8 87       	std	Y+8, r27	; 0x08
		if(Copy_u8NUM % 10 == 0 && Local_s32Tempvar == 0)
    2d82:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d84:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d86:	ac 85       	ldd	r26, Y+12	; 0x0c
    2d88:	bd 85       	ldd	r27, Y+13	; 0x0d
    2d8a:	2a e0       	ldi	r18, 0x0A	; 10
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e0       	ldi	r20, 0x00	; 0
    2d90:	50 e0       	ldi	r21, 0x00	; 0
    2d92:	bc 01       	movw	r22, r24
    2d94:	cd 01       	movw	r24, r26
    2d96:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <__divmodsi4>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	00 97       	sbiw	r24, 0x00	; 0
    2da0:	a1 05       	cpc	r26, r1
    2da2:	b1 05       	cpc	r27, r1
    2da4:	99 f4       	brne	.+38     	; 0x2dcc <LCD_enuDispINTNumber+0xd6>
    2da6:	8d 81       	ldd	r24, Y+5	; 0x05
    2da8:	9e 81       	ldd	r25, Y+6	; 0x06
    2daa:	af 81       	ldd	r26, Y+7	; 0x07
    2dac:	b8 85       	ldd	r27, Y+8	; 0x08
    2dae:	00 97       	sbiw	r24, 0x00	; 0
    2db0:	a1 05       	cpc	r26, r1
    2db2:	b1 05       	cpc	r27, r1
    2db4:	59 f4       	brne	.+22     	; 0x2dcc <LCD_enuDispINTNumber+0xd6>
			Local_s32iterator++;
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dba:	ab 81       	ldd	r26, Y+3	; 0x03
    2dbc:	bc 81       	ldd	r27, Y+4	; 0x04
    2dbe:	01 96       	adiw	r24, 0x01	; 1
    2dc0:	a1 1d       	adc	r26, r1
    2dc2:	b1 1d       	adc	r27, r1
    2dc4:	89 83       	std	Y+1, r24	; 0x01
    2dc6:	9a 83       	std	Y+2, r25	; 0x02
    2dc8:	ab 83       	std	Y+3, r26	; 0x03
    2dca:	bc 83       	std	Y+4, r27	; 0x04
		Copy_u8NUM/=10;
    2dcc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dce:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dd0:	ac 85       	ldd	r26, Y+12	; 0x0c
    2dd2:	bd 85       	ldd	r27, Y+13	; 0x0d
    2dd4:	2a e0       	ldi	r18, 0x0A	; 10
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e0       	ldi	r20, 0x00	; 0
    2dda:	50 e0       	ldi	r21, 0x00	; 0
    2ddc:	bc 01       	movw	r22, r24
    2dde:	cd 01       	movw	r24, r26
    2de0:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <__divmodsi4>
    2de4:	da 01       	movw	r26, r20
    2de6:	c9 01       	movw	r24, r18
    2de8:	8a 87       	std	Y+10, r24	; 0x0a
    2dea:	9b 87       	std	Y+11, r25	; 0x0b
    2dec:	ac 87       	std	Y+12, r26	; 0x0c
    2dee:	bd 87       	std	Y+13, r27	; 0x0d
	ES_t Local_enuErrorState = ES_NOK;
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_HIGH);

	s32 Local_s32Tempvar = 0,Local_s32iterator = 0;

	while(Copy_u8NUM)
    2df0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2df2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2df4:	ac 85       	ldd	r26, Y+12	; 0x0c
    2df6:	bd 85       	ldd	r27, Y+13	; 0x0d
    2df8:	00 97       	sbiw	r24, 0x00	; 0
    2dfa:	a1 05       	cpc	r26, r1
    2dfc:	b1 05       	cpc	r27, r1
    2dfe:	09 f0       	breq	.+2      	; 0x2e02 <LCD_enuDispINTNumber+0x10c>
    2e00:	9c cf       	rjmp	.-200    	; 0x2d3a <LCD_enuDispINTNumber+0x44>
    2e02:	c9 c0       	rjmp	.+402    	; 0x2f96 <LCD_enuDispINTNumber+0x2a0>
			Local_s32iterator++;
		Copy_u8NUM/=10;
	}
	while(Local_s32Tempvar)
	{
		switch(Local_s32Tempvar % 10)
    2e04:	8d 81       	ldd	r24, Y+5	; 0x05
    2e06:	9e 81       	ldd	r25, Y+6	; 0x06
    2e08:	af 81       	ldd	r26, Y+7	; 0x07
    2e0a:	b8 85       	ldd	r27, Y+8	; 0x08
    2e0c:	2a e0       	ldi	r18, 0x0A	; 10
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	40 e0       	ldi	r20, 0x00	; 0
    2e12:	50 e0       	ldi	r21, 0x00	; 0
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <__divmodsi4>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	8e 87       	std	Y+14, r24	; 0x0e
    2e22:	9f 87       	std	Y+15, r25	; 0x0f
    2e24:	a8 8b       	std	Y+16, r26	; 0x10
    2e26:	b9 8b       	std	Y+17, r27	; 0x11
    2e28:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e2a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e2c:	a8 89       	ldd	r26, Y+16	; 0x10
    2e2e:	b9 89       	ldd	r27, Y+17	; 0x11
    2e30:	84 30       	cpi	r24, 0x04	; 4
    2e32:	91 05       	cpc	r25, r1
    2e34:	a1 05       	cpc	r26, r1
    2e36:	b1 05       	cpc	r27, r1
    2e38:	09 f4       	brne	.+2      	; 0x2e3c <LCD_enuDispINTNumber+0x146>
    2e3a:	84 c0       	rjmp	.+264    	; 0x2f44 <LCD_enuDispINTNumber+0x24e>
    2e3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e40:	a8 89       	ldd	r26, Y+16	; 0x10
    2e42:	b9 89       	ldd	r27, Y+17	; 0x11
    2e44:	85 30       	cpi	r24, 0x05	; 5
    2e46:	91 05       	cpc	r25, r1
    2e48:	a1 05       	cpc	r26, r1
    2e4a:	b1 05       	cpc	r27, r1
    2e4c:	94 f5       	brge	.+100    	; 0x2eb2 <LCD_enuDispINTNumber+0x1bc>
    2e4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e50:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e52:	a8 89       	ldd	r26, Y+16	; 0x10
    2e54:	b9 89       	ldd	r27, Y+17	; 0x11
    2e56:	81 30       	cpi	r24, 0x01	; 1
    2e58:	91 05       	cpc	r25, r1
    2e5a:	a1 05       	cpc	r26, r1
    2e5c:	b1 05       	cpc	r27, r1
    2e5e:	09 f4       	brne	.+2      	; 0x2e62 <LCD_enuDispINTNumber+0x16c>
    2e60:	65 c0       	rjmp	.+202    	; 0x2f2c <LCD_enuDispINTNumber+0x236>
    2e62:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e64:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e66:	a8 89       	ldd	r26, Y+16	; 0x10
    2e68:	b9 89       	ldd	r27, Y+17	; 0x11
    2e6a:	82 30       	cpi	r24, 0x02	; 2
    2e6c:	91 05       	cpc	r25, r1
    2e6e:	a1 05       	cpc	r26, r1
    2e70:	b1 05       	cpc	r27, r1
    2e72:	54 f4       	brge	.+20     	; 0x2e88 <LCD_enuDispINTNumber+0x192>
    2e74:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e76:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e78:	a8 89       	ldd	r26, Y+16	; 0x10
    2e7a:	b9 89       	ldd	r27, Y+17	; 0x11
    2e7c:	00 97       	sbiw	r24, 0x00	; 0
    2e7e:	a1 05       	cpc	r26, r1
    2e80:	b1 05       	cpc	r27, r1
    2e82:	09 f4       	brne	.+2      	; 0x2e86 <LCD_enuDispINTNumber+0x190>
    2e84:	4f c0       	rjmp	.+158    	; 0x2f24 <LCD_enuDispINTNumber+0x22e>
    2e86:	75 c0       	rjmp	.+234    	; 0x2f72 <LCD_enuDispINTNumber+0x27c>
    2e88:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e8c:	a8 89       	ldd	r26, Y+16	; 0x10
    2e8e:	b9 89       	ldd	r27, Y+17	; 0x11
    2e90:	82 30       	cpi	r24, 0x02	; 2
    2e92:	91 05       	cpc	r25, r1
    2e94:	a1 05       	cpc	r26, r1
    2e96:	b1 05       	cpc	r27, r1
    2e98:	09 f4       	brne	.+2      	; 0x2e9c <LCD_enuDispINTNumber+0x1a6>
    2e9a:	4c c0       	rjmp	.+152    	; 0x2f34 <LCD_enuDispINTNumber+0x23e>
    2e9c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ea0:	a8 89       	ldd	r26, Y+16	; 0x10
    2ea2:	b9 89       	ldd	r27, Y+17	; 0x11
    2ea4:	83 30       	cpi	r24, 0x03	; 3
    2ea6:	91 05       	cpc	r25, r1
    2ea8:	a1 05       	cpc	r26, r1
    2eaa:	b1 05       	cpc	r27, r1
    2eac:	09 f4       	brne	.+2      	; 0x2eb0 <LCD_enuDispINTNumber+0x1ba>
    2eae:	46 c0       	rjmp	.+140    	; 0x2f3c <LCD_enuDispINTNumber+0x246>
    2eb0:	60 c0       	rjmp	.+192    	; 0x2f72 <LCD_enuDispINTNumber+0x27c>
    2eb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2eb4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2eb6:	a8 89       	ldd	r26, Y+16	; 0x10
    2eb8:	b9 89       	ldd	r27, Y+17	; 0x11
    2eba:	87 30       	cpi	r24, 0x07	; 7
    2ebc:	91 05       	cpc	r25, r1
    2ebe:	a1 05       	cpc	r26, r1
    2ec0:	b1 05       	cpc	r27, r1
    2ec2:	09 f4       	brne	.+2      	; 0x2ec6 <LCD_enuDispINTNumber+0x1d0>
    2ec4:	4b c0       	rjmp	.+150    	; 0x2f5c <LCD_enuDispINTNumber+0x266>
    2ec6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ec8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2eca:	a8 89       	ldd	r26, Y+16	; 0x10
    2ecc:	b9 89       	ldd	r27, Y+17	; 0x11
    2ece:	88 30       	cpi	r24, 0x08	; 8
    2ed0:	91 05       	cpc	r25, r1
    2ed2:	a1 05       	cpc	r26, r1
    2ed4:	b1 05       	cpc	r27, r1
    2ed6:	9c f4       	brge	.+38     	; 0x2efe <LCD_enuDispINTNumber+0x208>
    2ed8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2eda:	9f 85       	ldd	r25, Y+15	; 0x0f
    2edc:	a8 89       	ldd	r26, Y+16	; 0x10
    2ede:	b9 89       	ldd	r27, Y+17	; 0x11
    2ee0:	85 30       	cpi	r24, 0x05	; 5
    2ee2:	91 05       	cpc	r25, r1
    2ee4:	a1 05       	cpc	r26, r1
    2ee6:	b1 05       	cpc	r27, r1
    2ee8:	89 f1       	breq	.+98     	; 0x2f4c <LCD_enuDispINTNumber+0x256>
    2eea:	8e 85       	ldd	r24, Y+14	; 0x0e
    2eec:	9f 85       	ldd	r25, Y+15	; 0x0f
    2eee:	a8 89       	ldd	r26, Y+16	; 0x10
    2ef0:	b9 89       	ldd	r27, Y+17	; 0x11
    2ef2:	86 30       	cpi	r24, 0x06	; 6
    2ef4:	91 05       	cpc	r25, r1
    2ef6:	a1 05       	cpc	r26, r1
    2ef8:	b1 05       	cpc	r27, r1
    2efa:	61 f1       	breq	.+88     	; 0x2f54 <LCD_enuDispINTNumber+0x25e>
    2efc:	3a c0       	rjmp	.+116    	; 0x2f72 <LCD_enuDispINTNumber+0x27c>
    2efe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f00:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f02:	a8 89       	ldd	r26, Y+16	; 0x10
    2f04:	b9 89       	ldd	r27, Y+17	; 0x11
    2f06:	88 30       	cpi	r24, 0x08	; 8
    2f08:	91 05       	cpc	r25, r1
    2f0a:	a1 05       	cpc	r26, r1
    2f0c:	b1 05       	cpc	r27, r1
    2f0e:	51 f1       	breq	.+84     	; 0x2f64 <LCD_enuDispINTNumber+0x26e>
    2f10:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f12:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f14:	a8 89       	ldd	r26, Y+16	; 0x10
    2f16:	b9 89       	ldd	r27, Y+17	; 0x11
    2f18:	89 30       	cpi	r24, 0x09	; 9
    2f1a:	91 05       	cpc	r25, r1
    2f1c:	a1 05       	cpc	r26, r1
    2f1e:	b1 05       	cpc	r27, r1
    2f20:	29 f1       	breq	.+74     	; 0x2f6c <LCD_enuDispINTNumber+0x276>
    2f22:	27 c0       	rjmp	.+78     	; 0x2f72 <LCD_enuDispINTNumber+0x27c>
		{
		case 0:
			LCD_VidDOPRVTask('0');break;
    2f24:	80 e3       	ldi	r24, 0x30	; 48
    2f26:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>
    2f2a:	23 c0       	rjmp	.+70     	; 0x2f72 <LCD_enuDispINTNumber+0x27c>
		case 1:
			LCD_VidDOPRVTask('1');break;
    2f2c:	81 e3       	ldi	r24, 0x31	; 49
    2f2e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>
    2f32:	1f c0       	rjmp	.+62     	; 0x2f72 <LCD_enuDispINTNumber+0x27c>
		case 2:
			LCD_VidDOPRVTask('2');break;
    2f34:	82 e3       	ldi	r24, 0x32	; 50
    2f36:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>
    2f3a:	1b c0       	rjmp	.+54     	; 0x2f72 <LCD_enuDispINTNumber+0x27c>
		case 3:
			LCD_VidDOPRVTask('3');break;
    2f3c:	83 e3       	ldi	r24, 0x33	; 51
    2f3e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>
    2f42:	17 c0       	rjmp	.+46     	; 0x2f72 <LCD_enuDispINTNumber+0x27c>
		case 4:
			LCD_VidDOPRVTask('4');break;
    2f44:	84 e3       	ldi	r24, 0x34	; 52
    2f46:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>
    2f4a:	13 c0       	rjmp	.+38     	; 0x2f72 <LCD_enuDispINTNumber+0x27c>
		case 5:
			LCD_VidDOPRVTask('5');break;
    2f4c:	85 e3       	ldi	r24, 0x35	; 53
    2f4e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>
    2f52:	0f c0       	rjmp	.+30     	; 0x2f72 <LCD_enuDispINTNumber+0x27c>
		case 6:
			LCD_VidDOPRVTask('6');break;
    2f54:	86 e3       	ldi	r24, 0x36	; 54
    2f56:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>
    2f5a:	0b c0       	rjmp	.+22     	; 0x2f72 <LCD_enuDispINTNumber+0x27c>
		case 7:
			LCD_VidDOPRVTask('7');break;
    2f5c:	87 e3       	ldi	r24, 0x37	; 55
    2f5e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>
    2f62:	07 c0       	rjmp	.+14     	; 0x2f72 <LCD_enuDispINTNumber+0x27c>
		case 8:
			LCD_VidDOPRVTask('8');break;
    2f64:	88 e3       	ldi	r24, 0x38	; 56
    2f66:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>
    2f6a:	03 c0       	rjmp	.+6      	; 0x2f72 <LCD_enuDispINTNumber+0x27c>
		case 9:
			LCD_VidDOPRVTask('9');break;
    2f6c:	89 e3       	ldi	r24, 0x39	; 57
    2f6e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>
		}
		Local_s32Tempvar/=10;
    2f72:	8d 81       	ldd	r24, Y+5	; 0x05
    2f74:	9e 81       	ldd	r25, Y+6	; 0x06
    2f76:	af 81       	ldd	r26, Y+7	; 0x07
    2f78:	b8 85       	ldd	r27, Y+8	; 0x08
    2f7a:	2a e0       	ldi	r18, 0x0A	; 10
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e0       	ldi	r20, 0x00	; 0
    2f80:	50 e0       	ldi	r21, 0x00	; 0
    2f82:	bc 01       	movw	r22, r24
    2f84:	cd 01       	movw	r24, r26
    2f86:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <__divmodsi4>
    2f8a:	da 01       	movw	r26, r20
    2f8c:	c9 01       	movw	r24, r18
    2f8e:	8d 83       	std	Y+5, r24	; 0x05
    2f90:	9e 83       	std	Y+6, r25	; 0x06
    2f92:	af 83       	std	Y+7, r26	; 0x07
    2f94:	b8 87       	std	Y+8, r27	; 0x08
		Local_s32Tempvar = (Local_s32Tempvar*10)+(Copy_u8NUM%10);
		if(Copy_u8NUM % 10 == 0 && Local_s32Tempvar == 0)
			Local_s32iterator++;
		Copy_u8NUM/=10;
	}
	while(Local_s32Tempvar)
    2f96:	8d 81       	ldd	r24, Y+5	; 0x05
    2f98:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9a:	af 81       	ldd	r26, Y+7	; 0x07
    2f9c:	b8 85       	ldd	r27, Y+8	; 0x08
    2f9e:	00 97       	sbiw	r24, 0x00	; 0
    2fa0:	a1 05       	cpc	r26, r1
    2fa2:	b1 05       	cpc	r27, r1
    2fa4:	09 f0       	breq	.+2      	; 0x2fa8 <LCD_enuDispINTNumber+0x2b2>
    2fa6:	2e cf       	rjmp	.-420    	; 0x2e04 <LCD_enuDispINTNumber+0x10e>
    2fa8:	0e c0       	rjmp	.+28     	; 0x2fc6 <LCD_enuDispINTNumber+0x2d0>
		}
		Local_s32Tempvar/=10;
	}
	while(Local_s32iterator)
	{
		LCD_VidDOPRVTask('0');
    2faa:	80 e3       	ldi	r24, 0x30	; 48
    2fac:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VidDOPRVTask>
		Local_s32iterator--;
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb4:	ab 81       	ldd	r26, Y+3	; 0x03
    2fb6:	bc 81       	ldd	r27, Y+4	; 0x04
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	a1 09       	sbc	r26, r1
    2fbc:	b1 09       	sbc	r27, r1
    2fbe:	89 83       	std	Y+1, r24	; 0x01
    2fc0:	9a 83       	std	Y+2, r25	; 0x02
    2fc2:	ab 83       	std	Y+3, r26	; 0x03
    2fc4:	bc 83       	std	Y+4, r27	; 0x04
		case 9:
			LCD_VidDOPRVTask('9');break;
		}
		Local_s32Tempvar/=10;
	}
	while(Local_s32iterator)
    2fc6:	89 81       	ldd	r24, Y+1	; 0x01
    2fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fca:	ab 81       	ldd	r26, Y+3	; 0x03
    2fcc:	bc 81       	ldd	r27, Y+4	; 0x04
    2fce:	00 97       	sbiw	r24, 0x00	; 0
    2fd0:	a1 05       	cpc	r26, r1
    2fd2:	b1 05       	cpc	r27, r1
    2fd4:	51 f7       	brne	.-44     	; 0x2faa <LCD_enuDispINTNumber+0x2b4>
		LCD_VidDOPRVTask('0');
		Local_s32iterator--;
	}


	return Local_enuErrorState;
    2fd6:	89 85       	ldd	r24, Y+9	; 0x09
}
    2fd8:	61 96       	adiw	r28, 0x11	; 17
    2fda:	0f b6       	in	r0, 0x3f	; 63
    2fdc:	f8 94       	cli
    2fde:	de bf       	out	0x3e, r29	; 62
    2fe0:	0f be       	out	0x3f, r0	; 63
    2fe2:	cd bf       	out	0x3d, r28	; 61
    2fe4:	cf 91       	pop	r28
    2fe6:	df 91       	pop	r29
    2fe8:	1f 91       	pop	r17
    2fea:	0f 91       	pop	r16
    2fec:	ff 90       	pop	r15
    2fee:	ef 90       	pop	r14
    2ff0:	08 95       	ret

00002ff2 <LCD_enuDispFloatNumber>:

ES_t LCD_enuDispFloatNumber(f32  Copy_f32NUM)
{
    2ff2:	df 93       	push	r29
    2ff4:	cf 93       	push	r28
    2ff6:	00 d0       	rcall	.+0      	; 0x2ff8 <LCD_enuDispFloatNumber+0x6>
    2ff8:	00 d0       	rcall	.+0      	; 0x2ffa <LCD_enuDispFloatNumber+0x8>
    2ffa:	0f 92       	push	r0
    2ffc:	cd b7       	in	r28, 0x3d	; 61
    2ffe:	de b7       	in	r29, 0x3e	; 62
    3000:	6a 83       	std	Y+2, r22	; 0x02
    3002:	7b 83       	std	Y+3, r23	; 0x03
    3004:	8c 83       	std	Y+4, r24	; 0x04
    3006:	9d 83       	std	Y+5, r25	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	89 83       	std	Y+1, r24	; 0x01
	LCD_enuDispINTNumber((s32)Copy_f32NUM);
    300c:	6a 81       	ldd	r22, Y+2	; 0x02
    300e:	7b 81       	ldd	r23, Y+3	; 0x03
    3010:	8c 81       	ldd	r24, Y+4	; 0x04
    3012:	9d 81       	ldd	r25, Y+5	; 0x05
    3014:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_enuDispINTNumber>
	LCD_enuDispString(".");
    3024:	80 e6       	ldi	r24, 0x60	; 96
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_enuDispString>
	LCD_enuDispINTNumber((s32)((Copy_f32NUM - (s32)Copy_f32NUM)*1000));
    302c:	6a 81       	ldd	r22, Y+2	; 0x02
    302e:	7b 81       	ldd	r23, Y+3	; 0x03
    3030:	8c 81       	ldd	r24, Y+4	; 0x04
    3032:	9d 81       	ldd	r25, Y+5	; 0x05
    3034:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    3038:	dc 01       	movw	r26, r24
    303a:	cb 01       	movw	r24, r22
    303c:	bc 01       	movw	r22, r24
    303e:	cd 01       	movw	r24, r26
    3040:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    3044:	9b 01       	movw	r18, r22
    3046:	ac 01       	movw	r20, r24
    3048:	6a 81       	ldd	r22, Y+2	; 0x02
    304a:	7b 81       	ldd	r23, Y+3	; 0x03
    304c:	8c 81       	ldd	r24, Y+4	; 0x04
    304e:	9d 81       	ldd	r25, Y+5	; 0x05
    3050:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    3054:	dc 01       	movw	r26, r24
    3056:	cb 01       	movw	r24, r22
    3058:	bc 01       	movw	r22, r24
    305a:	cd 01       	movw	r24, r26
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	4a e7       	ldi	r20, 0x7A	; 122
    3062:	54 e4       	ldi	r21, 0x44	; 68
    3064:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	bc 01       	movw	r22, r24
    306e:	cd 01       	movw	r24, r26
    3070:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	bc 01       	movw	r22, r24
    307a:	cd 01       	movw	r24, r26
    307c:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_enuDispINTNumber>
	return Local_enuErrorState;
    3080:	89 81       	ldd	r24, Y+1	; 0x01
}
    3082:	0f 90       	pop	r0
    3084:	0f 90       	pop	r0
    3086:	0f 90       	pop	r0
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	08 95       	ret

00003092 <KYPAD_enuINIT>:
		{'1','2','3','-'},
		{'O','0','=','+'}

};
ES_t KYPAD_enuINIT(void)
{
    3092:	df 93       	push	r29
    3094:	cf 93       	push	r28
    3096:	0f 92       	push	r0
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPINVAL(COL2_PORTID,COL2_PINID,DIO_PULLUP);
	DIO_enuSetPINVAL(COL3_PORTID,COL3_PINID,DIO_PULLUP);
	DIO_enuSetPINVAL(COL4_PORTID,COL4_PINID,DIO_PULLUP);
*/
//#elif	INPUT_SOURCE == COLUMNS
	DIO_enuSetPINDir(COL1_PORTID,COL1_PINID,DIO_OUTPUT);
    30a0:	82 e0       	ldi	r24, 0x02	; 2
    30a2:	60 e0       	ldi	r22, 0x00	; 0
    30a4:	41 e0       	ldi	r20, 0x01	; 1
    30a6:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
	DIO_enuSetPINDir(COL2_PORTID,COL2_PINID,DIO_OUTPUT);
    30aa:	82 e0       	ldi	r24, 0x02	; 2
    30ac:	61 e0       	ldi	r22, 0x01	; 1
    30ae:	41 e0       	ldi	r20, 0x01	; 1
    30b0:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
	DIO_enuSetPINDir(COL3_PORTID,COL3_PINID,DIO_OUTPUT);
    30b4:	82 e0       	ldi	r24, 0x02	; 2
    30b6:	62 e0       	ldi	r22, 0x02	; 2
    30b8:	41 e0       	ldi	r20, 0x01	; 1
    30ba:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
	DIO_enuSetPINDir(COL4_PORTID,COL4_PINID,DIO_OUTPUT);
    30be:	82 e0       	ldi	r24, 0x02	; 2
    30c0:	63 e0       	ldi	r22, 0x03	; 3
    30c2:	41 e0       	ldi	r20, 0x01	; 1
    30c4:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
	DIO_enuSetPINVAL(COL1_PORTID,COL1_PINID,DIO_HIGH);
    30c8:	82 e0       	ldi	r24, 0x02	; 2
    30ca:	60 e0       	ldi	r22, 0x00	; 0
    30cc:	41 e0       	ldi	r20, 0x01	; 1
    30ce:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(COL2_PORTID,COL2_PINID,DIO_HIGH);
    30d2:	82 e0       	ldi	r24, 0x02	; 2
    30d4:	61 e0       	ldi	r22, 0x01	; 1
    30d6:	41 e0       	ldi	r20, 0x01	; 1
    30d8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(COL3_PORTID,COL3_PINID,DIO_HIGH);
    30dc:	82 e0       	ldi	r24, 0x02	; 2
    30de:	62 e0       	ldi	r22, 0x02	; 2
    30e0:	41 e0       	ldi	r20, 0x01	; 1
    30e2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(COL4_PORTID,COL4_PINID,DIO_HIGH);
    30e6:	82 e0       	ldi	r24, 0x02	; 2
    30e8:	63 e0       	ldi	r22, 0x03	; 3
    30ea:	41 e0       	ldi	r20, 0x01	; 1
    30ec:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>

	DIO_enuSetPINDir(ROW1_PORTID,ROW1_PINID,DIO_INPUT);
    30f0:	82 e0       	ldi	r24, 0x02	; 2
    30f2:	64 e0       	ldi	r22, 0x04	; 4
    30f4:	40 e0       	ldi	r20, 0x00	; 0
    30f6:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
	DIO_enuSetPINDir(ROW2_PORTID,ROW2_PINID,DIO_INPUT);
    30fa:	82 e0       	ldi	r24, 0x02	; 2
    30fc:	65 e0       	ldi	r22, 0x05	; 5
    30fe:	40 e0       	ldi	r20, 0x00	; 0
    3100:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
	DIO_enuSetPINDir(ROW3_PORTID,ROW3_PINID,DIO_INPUT);
    3104:	82 e0       	ldi	r24, 0x02	; 2
    3106:	66 e0       	ldi	r22, 0x06	; 6
    3108:	40 e0       	ldi	r20, 0x00	; 0
    310a:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
	DIO_enuSetPINDir(ROW4_PORTID,ROW4_PINID,DIO_INPUT);
    310e:	82 e0       	ldi	r24, 0x02	; 2
    3110:	67 e0       	ldi	r22, 0x07	; 7
    3112:	40 e0       	ldi	r20, 0x00	; 0
    3114:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_enuSetPINDir>
	DIO_enuSetPINVAL(ROW1_PORTID,ROW1_PINID,DIO_PULLUP);
    3118:	82 e0       	ldi	r24, 0x02	; 2
    311a:	64 e0       	ldi	r22, 0x04	; 4
    311c:	41 e0       	ldi	r20, 0x01	; 1
    311e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(ROW2_PORTID,ROW2_PINID,DIO_PULLUP);
    3122:	82 e0       	ldi	r24, 0x02	; 2
    3124:	65 e0       	ldi	r22, 0x05	; 5
    3126:	41 e0       	ldi	r20, 0x01	; 1
    3128:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(ROW3_PORTID,ROW3_PINID,DIO_PULLUP);
    312c:	82 e0       	ldi	r24, 0x02	; 2
    312e:	66 e0       	ldi	r22, 0x06	; 6
    3130:	41 e0       	ldi	r20, 0x01	; 1
    3132:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(ROW4_PORTID,ROW4_PINID,DIO_PULLUP);
    3136:	82 e0       	ldi	r24, 0x02	; 2
    3138:	67 e0       	ldi	r22, 0x07	; 7
    313a:	41 e0       	ldi	r20, 0x01	; 1
    313c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>

/*#endif*/
	 Local_enuErrorState = ES_OK;
    3140:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    3142:	89 81       	ldd	r24, Y+1	; 0x01
}
    3144:	0f 90       	pop	r0
    3146:	cf 91       	pop	r28
    3148:	df 91       	pop	r29
    314a:	08 95       	ret

0000314c <KYPAD_enuGetChar>:

ES_t KYPAD_enuGetChar(u8 * Copy_pu8Char)
{
    314c:	df 93       	push	r29
    314e:	cf 93       	push	r28
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	67 97       	sbiw	r28, 0x17	; 23
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	cd bf       	out	0x3d, r28	; 61
    3160:	9e 8b       	std	Y+22, r25	; 0x16
    3162:	8d 8b       	std	Y+21, r24	; 0x15
	ES_t Local_enuErrorState = ES_NOK;
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	8b 83       	std	Y+3, r24	; 0x03

	u8 Rows_pins[] = {ROW1_PINID,ROW2_PINID,ROW3_PINID,ROW4_PINID};
    3168:	84 e0       	ldi	r24, 0x04	; 4
    316a:	8c 83       	std	Y+4, r24	; 0x04
    316c:	85 e0       	ldi	r24, 0x05	; 5
    316e:	8d 83       	std	Y+5, r24	; 0x05
    3170:	86 e0       	ldi	r24, 0x06	; 6
    3172:	8e 83       	std	Y+6, r24	; 0x06
    3174:	87 e0       	ldi	r24, 0x07	; 7
    3176:	8f 83       	std	Y+7, r24	; 0x07
	u8 Rows_ports[] = {ROW1_PORTID,ROW2_PORTID,ROW3_PORTID,ROW4_PORTID};
    3178:	82 e0       	ldi	r24, 0x02	; 2
    317a:	88 87       	std	Y+8, r24	; 0x08
    317c:	82 e0       	ldi	r24, 0x02	; 2
    317e:	89 87       	std	Y+9, r24	; 0x09
    3180:	82 e0       	ldi	r24, 0x02	; 2
    3182:	8a 87       	std	Y+10, r24	; 0x0a
    3184:	82 e0       	ldi	r24, 0x02	; 2
    3186:	8b 87       	std	Y+11, r24	; 0x0b
	u8 Columns_pins[] = {COL1_PINID,COL2_PINID,COL3_PINID,COL4_PINID};
    3188:	1c 86       	std	Y+12, r1	; 0x0c
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	8d 87       	std	Y+13, r24	; 0x0d
    318e:	82 e0       	ldi	r24, 0x02	; 2
    3190:	8e 87       	std	Y+14, r24	; 0x0e
    3192:	83 e0       	ldi	r24, 0x03	; 3
    3194:	8f 87       	std	Y+15, r24	; 0x0f
	u8 Columns_ports[] = {COL1_PORTID,COL2_PORTID,COL3_PORTID,COL4_PORTID};
    3196:	82 e0       	ldi	r24, 0x02	; 2
    3198:	88 8b       	std	Y+16, r24	; 0x10
    319a:	82 e0       	ldi	r24, 0x02	; 2
    319c:	89 8b       	std	Y+17, r24	; 0x11
    319e:	82 e0       	ldi	r24, 0x02	; 2
    31a0:	8a 8b       	std	Y+18, r24	; 0x12
    31a2:	82 e0       	ldi	r24, 0x02	; 2
    31a4:	8b 8b       	std	Y+19, r24	; 0x13
	u8 Local_u8Rows_iterator = 0;
    31a6:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Columns_iterator = 0;
    31a8:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8TempVAR = 0;
    31aa:	1c 8a       	std	Y+20, r1	; 0x14
	*Copy_pu8Char =0xff;
    31ac:	ed 89       	ldd	r30, Y+21	; 0x15
    31ae:	fe 89       	ldd	r31, Y+22	; 0x16
    31b0:	8f ef       	ldi	r24, 0xFF	; 255
    31b2:	80 83       	st	Z, r24
	for(Local_u8Columns_iterator = 0;Local_u8Columns_iterator <4;Local_u8Columns_iterator++)
    31b4:	19 82       	std	Y+1, r1	; 0x01
    31b6:	8c c0       	rjmp	.+280    	; 0x32d0 <KYPAD_enuGetChar+0x184>
	{
		DIO_enuSetPINVAL(Columns_ports[Local_u8Columns_iterator],Columns_pins[Local_u8Columns_iterator],DIO_LOW);
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	28 2f       	mov	r18, r24
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	ce 01       	movw	r24, r28
    31c0:	40 96       	adiw	r24, 0x10	; 16
    31c2:	fc 01       	movw	r30, r24
    31c4:	e2 0f       	add	r30, r18
    31c6:	f3 1f       	adc	r31, r19
    31c8:	40 81       	ld	r20, Z
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	28 2f       	mov	r18, r24
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	ce 01       	movw	r24, r28
    31d2:	0c 96       	adiw	r24, 0x0c	; 12
    31d4:	fc 01       	movw	r30, r24
    31d6:	e2 0f       	add	r30, r18
    31d8:	f3 1f       	adc	r31, r19
    31da:	90 81       	ld	r25, Z
    31dc:	84 2f       	mov	r24, r20
    31de:	69 2f       	mov	r22, r25
    31e0:	40 e0       	ldi	r20, 0x00	; 0
    31e2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>

		for(Local_u8Rows_iterator = 0;Local_u8Rows_iterator <4;Local_u8Rows_iterator++)
    31e6:	1a 82       	std	Y+2, r1	; 0x02
    31e8:	55 c0       	rjmp	.+170    	; 0x3294 <KYPAD_enuGetChar+0x148>
		{
			DIO_enuGetPINVAL(Rows_ports[Local_u8Rows_iterator],Rows_pins[Local_u8Rows_iterator],&Local_u8TempVAR);
    31ea:	8a 81       	ldd	r24, Y+2	; 0x02
    31ec:	28 2f       	mov	r18, r24
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	ce 01       	movw	r24, r28
    31f2:	08 96       	adiw	r24, 0x08	; 8
    31f4:	fc 01       	movw	r30, r24
    31f6:	e2 0f       	add	r30, r18
    31f8:	f3 1f       	adc	r31, r19
    31fa:	40 81       	ld	r20, Z
    31fc:	8a 81       	ldd	r24, Y+2	; 0x02
    31fe:	28 2f       	mov	r18, r24
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	ce 01       	movw	r24, r28
    3204:	04 96       	adiw	r24, 0x04	; 4
    3206:	fc 01       	movw	r30, r24
    3208:	e2 0f       	add	r30, r18
    320a:	f3 1f       	adc	r31, r19
    320c:	90 81       	ld	r25, Z
    320e:	9e 01       	movw	r18, r28
    3210:	2c 5e       	subi	r18, 0xEC	; 236
    3212:	3f 4f       	sbci	r19, 0xFF	; 255
    3214:	84 2f       	mov	r24, r20
    3216:	69 2f       	mov	r22, r25
    3218:	a9 01       	movw	r20, r18
    321a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_enuGetPINVAL>
			if(Local_u8TempVAR == DIO_LOW)
    321e:	8c 89       	ldd	r24, Y+20	; 0x14
    3220:	88 23       	and	r24, r24
    3222:	a9 f5       	brne	.+106    	; 0x328e <KYPAD_enuGetChar+0x142>
			{
				//DIO_enuGetPINVAL(Rows_ports[Local_u8Rows_iterator],Rows_pins[Local_u8Rows_iterator],&Local_u8TempVAR);
				*Copy_pu8Char = KeyPadPINS[Local_u8Columns_iterator][Local_u8Rows_iterator];
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	48 2f       	mov	r20, r24
    3228:	50 e0       	ldi	r21, 0x00	; 0
    322a:	8a 81       	ldd	r24, Y+2	; 0x02
    322c:	28 2f       	mov	r18, r24
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	ca 01       	movw	r24, r20
    3232:	88 0f       	add	r24, r24
    3234:	99 1f       	adc	r25, r25
    3236:	88 0f       	add	r24, r24
    3238:	99 1f       	adc	r25, r25
    323a:	82 0f       	add	r24, r18
    323c:	93 1f       	adc	r25, r19
    323e:	fc 01       	movw	r30, r24
    3240:	e0 58       	subi	r30, 0x80	; 128
    3242:	fe 4f       	sbci	r31, 0xFE	; 254
    3244:	80 81       	ld	r24, Z
    3246:	ed 89       	ldd	r30, Y+21	; 0x15
    3248:	fe 89       	ldd	r31, Y+22	; 0x16
    324a:	80 83       	st	Z, r24
    324c:	1a c0       	rjmp	.+52     	; 0x3282 <KYPAD_enuGetChar+0x136>
				while(Local_u8TempVAR == DIO_LOW)
					DIO_enuGetPINVAL(Rows_ports[Local_u8Rows_iterator],Rows_pins[Local_u8Rows_iterator],&Local_u8TempVAR);
    324e:	8a 81       	ldd	r24, Y+2	; 0x02
    3250:	28 2f       	mov	r18, r24
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	ce 01       	movw	r24, r28
    3256:	08 96       	adiw	r24, 0x08	; 8
    3258:	fc 01       	movw	r30, r24
    325a:	e2 0f       	add	r30, r18
    325c:	f3 1f       	adc	r31, r19
    325e:	40 81       	ld	r20, Z
    3260:	8a 81       	ldd	r24, Y+2	; 0x02
    3262:	28 2f       	mov	r18, r24
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	ce 01       	movw	r24, r28
    3268:	04 96       	adiw	r24, 0x04	; 4
    326a:	fc 01       	movw	r30, r24
    326c:	e2 0f       	add	r30, r18
    326e:	f3 1f       	adc	r31, r19
    3270:	90 81       	ld	r25, Z
    3272:	9e 01       	movw	r18, r28
    3274:	2c 5e       	subi	r18, 0xEC	; 236
    3276:	3f 4f       	sbci	r19, 0xFF	; 255
    3278:	84 2f       	mov	r24, r20
    327a:	69 2f       	mov	r22, r25
    327c:	a9 01       	movw	r20, r18
    327e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_enuGetPINVAL>
			DIO_enuGetPINVAL(Rows_ports[Local_u8Rows_iterator],Rows_pins[Local_u8Rows_iterator],&Local_u8TempVAR);
			if(Local_u8TempVAR == DIO_LOW)
			{
				//DIO_enuGetPINVAL(Rows_ports[Local_u8Rows_iterator],Rows_pins[Local_u8Rows_iterator],&Local_u8TempVAR);
				*Copy_pu8Char = KeyPadPINS[Local_u8Columns_iterator][Local_u8Rows_iterator];
				while(Local_u8TempVAR == DIO_LOW)
    3282:	8c 89       	ldd	r24, Y+20	; 0x14
    3284:	88 23       	and	r24, r24
    3286:	19 f3       	breq	.-58     	; 0x324e <KYPAD_enuGetChar+0x102>
					DIO_enuGetPINVAL(Rows_ports[Local_u8Rows_iterator],Rows_pins[Local_u8Rows_iterator],&Local_u8TempVAR);
				return Local_enuErrorState;
    3288:	8b 81       	ldd	r24, Y+3	; 0x03
    328a:	8f 8b       	std	Y+23, r24	; 0x17
    328c:	27 c0       	rjmp	.+78     	; 0x32dc <KYPAD_enuGetChar+0x190>
	*Copy_pu8Char =0xff;
	for(Local_u8Columns_iterator = 0;Local_u8Columns_iterator <4;Local_u8Columns_iterator++)
	{
		DIO_enuSetPINVAL(Columns_ports[Local_u8Columns_iterator],Columns_pins[Local_u8Columns_iterator],DIO_LOW);

		for(Local_u8Rows_iterator = 0;Local_u8Rows_iterator <4;Local_u8Rows_iterator++)
    328e:	8a 81       	ldd	r24, Y+2	; 0x02
    3290:	8f 5f       	subi	r24, 0xFF	; 255
    3292:	8a 83       	std	Y+2, r24	; 0x02
    3294:	8a 81       	ldd	r24, Y+2	; 0x02
    3296:	84 30       	cpi	r24, 0x04	; 4
    3298:	08 f4       	brcc	.+2      	; 0x329c <KYPAD_enuGetChar+0x150>
    329a:	a7 cf       	rjmp	.-178    	; 0x31ea <KYPAD_enuGetChar+0x9e>
				while(Local_u8TempVAR == DIO_LOW)
					DIO_enuGetPINVAL(Rows_ports[Local_u8Rows_iterator],Rows_pins[Local_u8Rows_iterator],&Local_u8TempVAR);
				return Local_enuErrorState;
			}
		}
		DIO_enuSetPINVAL(Columns_ports[Local_u8Columns_iterator],Columns_pins[Local_u8Columns_iterator],DIO_HIGH);
    329c:	89 81       	ldd	r24, Y+1	; 0x01
    329e:	28 2f       	mov	r18, r24
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	ce 01       	movw	r24, r28
    32a4:	40 96       	adiw	r24, 0x10	; 16
    32a6:	fc 01       	movw	r30, r24
    32a8:	e2 0f       	add	r30, r18
    32aa:	f3 1f       	adc	r31, r19
    32ac:	40 81       	ld	r20, Z
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	28 2f       	mov	r18, r24
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	ce 01       	movw	r24, r28
    32b6:	0c 96       	adiw	r24, 0x0c	; 12
    32b8:	fc 01       	movw	r30, r24
    32ba:	e2 0f       	add	r30, r18
    32bc:	f3 1f       	adc	r31, r19
    32be:	90 81       	ld	r25, Z
    32c0:	84 2f       	mov	r24, r20
    32c2:	69 2f       	mov	r22, r25
    32c4:	41 e0       	ldi	r20, 0x01	; 1
    32c6:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enuSetPINVAL>
	u8 Columns_ports[] = {COL1_PORTID,COL2_PORTID,COL3_PORTID,COL4_PORTID};
	u8 Local_u8Rows_iterator = 0;
	u8 Local_u8Columns_iterator = 0;
	u8 Local_u8TempVAR = 0;
	*Copy_pu8Char =0xff;
	for(Local_u8Columns_iterator = 0;Local_u8Columns_iterator <4;Local_u8Columns_iterator++)
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	8f 5f       	subi	r24, 0xFF	; 255
    32ce:	89 83       	std	Y+1, r24	; 0x01
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	84 30       	cpi	r24, 0x04	; 4
    32d4:	08 f4       	brcc	.+2      	; 0x32d8 <KYPAD_enuGetChar+0x18c>
    32d6:	70 cf       	rjmp	.-288    	; 0x31b8 <KYPAD_enuGetChar+0x6c>
			}
		}
		DIO_enuSetPINVAL(Columns_ports[Local_u8Columns_iterator],Columns_pins[Local_u8Columns_iterator],DIO_HIGH);
	}

	return Local_enuErrorState;
    32d8:	8b 81       	ldd	r24, Y+3	; 0x03
    32da:	8f 8b       	std	Y+23, r24	; 0x17
    32dc:	8f 89       	ldd	r24, Y+23	; 0x17
}
    32de:	67 96       	adiw	r28, 0x17	; 23
    32e0:	0f b6       	in	r0, 0x3f	; 63
    32e2:	f8 94       	cli
    32e4:	de bf       	out	0x3e, r29	; 62
    32e6:	0f be       	out	0x3f, r0	; 63
    32e8:	cd bf       	out	0x3d, r28	; 61
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	08 95       	ret

000032f0 <CALC_u32precedence>:
#include <ctype.h>



u8 CALC_u32precedence(u8 Copy_u8op)
{
    32f0:	df 93       	push	r29
    32f2:	cf 93       	push	r28
    32f4:	00 d0       	rcall	.+0      	; 0x32f6 <CALC_u32precedence+0x6>
    32f6:	00 d0       	rcall	.+0      	; 0x32f8 <CALC_u32precedence+0x8>
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
    32fc:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8op)
    32fe:	89 81       	ldd	r24, Y+1	; 0x01
    3300:	28 2f       	mov	r18, r24
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	3c 83       	std	Y+4, r19	; 0x04
    3306:	2b 83       	std	Y+3, r18	; 0x03
    3308:	8b 81       	ldd	r24, Y+3	; 0x03
    330a:	9c 81       	ldd	r25, Y+4	; 0x04
    330c:	8b 32       	cpi	r24, 0x2B	; 43
    330e:	91 05       	cpc	r25, r1
    3310:	b1 f0       	breq	.+44     	; 0x333e <CALC_u32precedence+0x4e>
    3312:	2b 81       	ldd	r18, Y+3	; 0x03
    3314:	3c 81       	ldd	r19, Y+4	; 0x04
    3316:	2c 32       	cpi	r18, 0x2C	; 44
    3318:	31 05       	cpc	r19, r1
    331a:	34 f4       	brge	.+12     	; 0x3328 <CALC_u32precedence+0x38>
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
    331e:	9c 81       	ldd	r25, Y+4	; 0x04
    3320:	8a 32       	cpi	r24, 0x2A	; 42
    3322:	91 05       	cpc	r25, r1
    3324:	79 f0       	breq	.+30     	; 0x3344 <CALC_u32precedence+0x54>
    3326:	11 c0       	rjmp	.+34     	; 0x334a <CALC_u32precedence+0x5a>
    3328:	2b 81       	ldd	r18, Y+3	; 0x03
    332a:	3c 81       	ldd	r19, Y+4	; 0x04
    332c:	2d 32       	cpi	r18, 0x2D	; 45
    332e:	31 05       	cpc	r19, r1
    3330:	31 f0       	breq	.+12     	; 0x333e <CALC_u32precedence+0x4e>
    3332:	8b 81       	ldd	r24, Y+3	; 0x03
    3334:	9c 81       	ldd	r25, Y+4	; 0x04
    3336:	8f 32       	cpi	r24, 0x2F	; 47
    3338:	91 05       	cpc	r25, r1
    333a:	21 f0       	breq	.+8      	; 0x3344 <CALC_u32precedence+0x54>
    333c:	06 c0       	rjmp	.+12     	; 0x334a <CALC_u32precedence+0x5a>
	{
	case '+':
	case '-':
		return 1;
    333e:	91 e0       	ldi	r25, 0x01	; 1
    3340:	9a 83       	std	Y+2, r25	; 0x02
    3342:	04 c0       	rjmp	.+8      	; 0x334c <CALC_u32precedence+0x5c>
	case '*':
	case '/':
		return 2;
    3344:	22 e0       	ldi	r18, 0x02	; 2
    3346:	2a 83       	std	Y+2, r18	; 0x02
    3348:	01 c0       	rjmp	.+2      	; 0x334c <CALC_u32precedence+0x5c>
	default:
		return 0;
    334a:	1a 82       	std	Y+2, r1	; 0x02
    334c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    334e:	0f 90       	pop	r0
    3350:	0f 90       	pop	r0
    3352:	0f 90       	pop	r0
    3354:	0f 90       	pop	r0
    3356:	cf 91       	pop	r28
    3358:	df 91       	pop	r29
    335a:	08 95       	ret

0000335c <CALC_u32isOperator>:


u8 CALC_u32isOperator(u8 Copy_u8char)
{
    335c:	df 93       	push	r29
    335e:	cf 93       	push	r28
    3360:	00 d0       	rcall	.+0      	; 0x3362 <CALC_u32isOperator+0x6>
    3362:	0f 92       	push	r0
    3364:	cd b7       	in	r28, 0x3d	; 61
    3366:	de b7       	in	r29, 0x3e	; 62
    3368:	89 83       	std	Y+1, r24	; 0x01
	return (Copy_u8char == '+' || Copy_u8char == '-' || Copy_u8char == '*' || Copy_u8char == '/');
    336a:	89 81       	ldd	r24, Y+1	; 0x01
    336c:	8b 32       	cpi	r24, 0x2B	; 43
    336e:	49 f0       	breq	.+18     	; 0x3382 <CALC_u32isOperator+0x26>
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	8d 32       	cpi	r24, 0x2D	; 45
    3374:	31 f0       	breq	.+12     	; 0x3382 <CALC_u32isOperator+0x26>
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	8a 32       	cpi	r24, 0x2A	; 42
    337a:	19 f0       	breq	.+6      	; 0x3382 <CALC_u32isOperator+0x26>
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	8f 32       	cpi	r24, 0x2F	; 47
    3380:	29 f4       	brne	.+10     	; 0x338c <CALC_u32isOperator+0x30>
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	9b 83       	std	Y+3, r25	; 0x03
    3388:	8a 83       	std	Y+2, r24	; 0x02
    338a:	02 c0       	rjmp	.+4      	; 0x3390 <CALC_u32isOperator+0x34>
    338c:	1b 82       	std	Y+3, r1	; 0x03
    338e:	1a 82       	std	Y+2, r1	; 0x02
    3390:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3392:	0f 90       	pop	r0
    3394:	0f 90       	pop	r0
    3396:	0f 90       	pop	r0
    3398:	cf 91       	pop	r28
    339a:	df 91       	pop	r29
    339c:	08 95       	ret

0000339e <CALC_VidInToPost>:

// Convert infix expression to postfix expression
void CALC_VidInToPost(u8* Copy_Pu8Infix,u8* Copy_Pu8Postfix)
{
    339e:	0f 93       	push	r16
    33a0:	1f 93       	push	r17
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	cd b7       	in	r28, 0x3d	; 61
    33a8:	de b7       	in	r29, 0x3e	; 62
    33aa:	cf 56       	subi	r28, 0x6F	; 111
    33ac:	d0 40       	sbci	r29, 0x00	; 0
    33ae:	0f b6       	in	r0, 0x3f	; 63
    33b0:	f8 94       	cli
    33b2:	de bf       	out	0x3e, r29	; 62
    33b4:	0f be       	out	0x3f, r0	; 63
    33b6:	cd bf       	out	0x3d, r28	; 61
    33b8:	fe 01       	movw	r30, r28
    33ba:	e4 59       	subi	r30, 0x94	; 148
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	91 83       	std	Z+1, r25	; 0x01
    33c0:	80 83       	st	Z, r24
    33c2:	fe 01       	movw	r30, r28
    33c4:	e2 59       	subi	r30, 0x92	; 146
    33c6:	ff 4f       	sbci	r31, 0xFF	; 255
    33c8:	71 83       	std	Z+1, r23	; 0x01
    33ca:	60 83       	st	Z, r22
	struct CharStack stack;
	stack.top = -1;
    33cc:	8f ef       	ldi	r24, 0xFF	; 255
    33ce:	9f ef       	ldi	r25, 0xFF	; 255
    33d0:	9f 83       	std	Y+7, r25	; 0x07
    33d2:	8e 83       	std	Y+6, r24	; 0x06
	int i = 0, j = 0;
    33d4:	1d 82       	std	Y+5, r1	; 0x05
    33d6:	1c 82       	std	Y+4, r1	; 0x04
    33d8:	1b 82       	std	Y+3, r1	; 0x03
    33da:	1a 82       	std	Y+2, r1	; 0x02
    33dc:	3c c1       	rjmp	.+632    	; 0x3656 <CALC_VidInToPost+0x2b8>

	while (Copy_Pu8Infix[i] != '\0')
	{
		char token = Copy_Pu8Infix[i];
    33de:	2c 81       	ldd	r18, Y+4	; 0x04
    33e0:	3d 81       	ldd	r19, Y+5	; 0x05
    33e2:	fe 01       	movw	r30, r28
    33e4:	e4 59       	subi	r30, 0x94	; 148
    33e6:	ff 4f       	sbci	r31, 0xFF	; 255
    33e8:	80 81       	ld	r24, Z
    33ea:	91 81       	ldd	r25, Z+1	; 0x01
    33ec:	fc 01       	movw	r30, r24
    33ee:	e2 0f       	add	r30, r18
    33f0:	f3 1f       	adc	r31, r19
    33f2:	80 81       	ld	r24, Z
    33f4:	89 83       	std	Y+1, r24	; 0x01

		// Handle negative numbers
		if (token == '-' && (i == 0 || CALC_u32isOperator(Copy_Pu8Infix[i - 1])))
    33f6:	89 81       	ldd	r24, Y+1	; 0x01
    33f8:	8d 32       	cpi	r24, 0x2D	; 45
    33fa:	09 f0       	breq	.+2      	; 0x33fe <CALC_VidInToPost+0x60>
    33fc:	7e c0       	rjmp	.+252    	; 0x34fa <CALC_VidInToPost+0x15c>
    33fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3400:	9d 81       	ldd	r25, Y+5	; 0x05
    3402:	00 97       	sbiw	r24, 0x00	; 0
    3404:	99 f0       	breq	.+38     	; 0x342c <CALC_VidInToPost+0x8e>
    3406:	8c 81       	ldd	r24, Y+4	; 0x04
    3408:	9d 81       	ldd	r25, Y+5	; 0x05
    340a:	9c 01       	movw	r18, r24
    340c:	21 50       	subi	r18, 0x01	; 1
    340e:	30 40       	sbci	r19, 0x00	; 0
    3410:	fe 01       	movw	r30, r28
    3412:	e4 59       	subi	r30, 0x94	; 148
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	80 81       	ld	r24, Z
    3418:	91 81       	ldd	r25, Z+1	; 0x01
    341a:	fc 01       	movw	r30, r24
    341c:	e2 0f       	add	r30, r18
    341e:	f3 1f       	adc	r31, r19
    3420:	80 81       	ld	r24, Z
    3422:	0e 94 ae 19 	call	0x335c	; 0x335c <CALC_u32isOperator>
    3426:	88 23       	and	r24, r24
    3428:	09 f4       	brne	.+2      	; 0x342c <CALC_VidInToPost+0x8e>
    342a:	67 c0       	rjmp	.+206    	; 0x34fa <CALC_VidInToPost+0x15c>
		{

			Copy_Pu8Postfix[j++] = token;
    342c:	2a 81       	ldd	r18, Y+2	; 0x02
    342e:	3b 81       	ldd	r19, Y+3	; 0x03
    3430:	fe 01       	movw	r30, r28
    3432:	e2 59       	subi	r30, 0x92	; 146
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	80 81       	ld	r24, Z
    3438:	91 81       	ldd	r25, Z+1	; 0x01
    343a:	fc 01       	movw	r30, r24
    343c:	e2 0f       	add	r30, r18
    343e:	f3 1f       	adc	r31, r19
    3440:	89 81       	ldd	r24, Y+1	; 0x01
    3442:	80 83       	st	Z, r24
    3444:	8a 81       	ldd	r24, Y+2	; 0x02
    3446:	9b 81       	ldd	r25, Y+3	; 0x03
    3448:	01 96       	adiw	r24, 0x01	; 1
    344a:	9b 83       	std	Y+3, r25	; 0x03
    344c:	8a 83       	std	Y+2, r24	; 0x02
			i++;
    344e:	8c 81       	ldd	r24, Y+4	; 0x04
    3450:	9d 81       	ldd	r25, Y+5	; 0x05
    3452:	01 96       	adiw	r24, 0x01	; 1
    3454:	9d 83       	std	Y+5, r25	; 0x05
    3456:	8c 83       	std	Y+4, r24	; 0x04
    3458:	20 c0       	rjmp	.+64     	; 0x349a <CALC_VidInToPost+0xfc>
			// Read the entire negative number
			while (isdigit(Copy_Pu8Infix[i]) || Copy_Pu8Infix[i] == '.')
			{
				Copy_Pu8Postfix[j++] = Copy_Pu8Infix[i++];
    345a:	2a 81       	ldd	r18, Y+2	; 0x02
    345c:	3b 81       	ldd	r19, Y+3	; 0x03
    345e:	fe 01       	movw	r30, r28
    3460:	e2 59       	subi	r30, 0x92	; 146
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	80 81       	ld	r24, Z
    3466:	91 81       	ldd	r25, Z+1	; 0x01
    3468:	dc 01       	movw	r26, r24
    346a:	a2 0f       	add	r26, r18
    346c:	b3 1f       	adc	r27, r19
    346e:	2c 81       	ldd	r18, Y+4	; 0x04
    3470:	3d 81       	ldd	r19, Y+5	; 0x05
    3472:	fe 01       	movw	r30, r28
    3474:	e4 59       	subi	r30, 0x94	; 148
    3476:	ff 4f       	sbci	r31, 0xFF	; 255
    3478:	80 81       	ld	r24, Z
    347a:	91 81       	ldd	r25, Z+1	; 0x01
    347c:	fc 01       	movw	r30, r24
    347e:	e2 0f       	add	r30, r18
    3480:	f3 1f       	adc	r31, r19
    3482:	80 81       	ld	r24, Z
    3484:	8c 93       	st	X, r24
    3486:	8a 81       	ldd	r24, Y+2	; 0x02
    3488:	9b 81       	ldd	r25, Y+3	; 0x03
    348a:	01 96       	adiw	r24, 0x01	; 1
    348c:	9b 83       	std	Y+3, r25	; 0x03
    348e:	8a 83       	std	Y+2, r24	; 0x02
    3490:	8c 81       	ldd	r24, Y+4	; 0x04
    3492:	9d 81       	ldd	r25, Y+5	; 0x05
    3494:	01 96       	adiw	r24, 0x01	; 1
    3496:	9d 83       	std	Y+5, r25	; 0x05
    3498:	8c 83       	std	Y+4, r24	; 0x04
		{

			Copy_Pu8Postfix[j++] = token;
			i++;
			// Read the entire negative number
			while (isdigit(Copy_Pu8Infix[i]) || Copy_Pu8Infix[i] == '.')
    349a:	2c 81       	ldd	r18, Y+4	; 0x04
    349c:	3d 81       	ldd	r19, Y+5	; 0x05
    349e:	fe 01       	movw	r30, r28
    34a0:	e4 59       	subi	r30, 0x94	; 148
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	80 81       	ld	r24, Z
    34a6:	91 81       	ldd	r25, Z+1	; 0x01
    34a8:	fc 01       	movw	r30, r24
    34aa:	e2 0f       	add	r30, r18
    34ac:	f3 1f       	adc	r31, r19
    34ae:	80 81       	ld	r24, Z
    34b0:	88 2f       	mov	r24, r24
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	c0 97       	sbiw	r24, 0x30	; 48
    34b6:	8a 30       	cpi	r24, 0x0A	; 10
    34b8:	91 05       	cpc	r25, r1
    34ba:	78 f2       	brcs	.-98     	; 0x345a <CALC_VidInToPost+0xbc>
    34bc:	2c 81       	ldd	r18, Y+4	; 0x04
    34be:	3d 81       	ldd	r19, Y+5	; 0x05
    34c0:	fe 01       	movw	r30, r28
    34c2:	e4 59       	subi	r30, 0x94	; 148
    34c4:	ff 4f       	sbci	r31, 0xFF	; 255
    34c6:	80 81       	ld	r24, Z
    34c8:	91 81       	ldd	r25, Z+1	; 0x01
    34ca:	fc 01       	movw	r30, r24
    34cc:	e2 0f       	add	r30, r18
    34ce:	f3 1f       	adc	r31, r19
    34d0:	80 81       	ld	r24, Z
    34d2:	8e 32       	cpi	r24, 0x2E	; 46
    34d4:	11 f2       	breq	.-124    	; 0x345a <CALC_VidInToPost+0xbc>
			{
				Copy_Pu8Postfix[j++] = Copy_Pu8Infix[i++];
			}
			Copy_Pu8Postfix[j++] = ' '; // Add a space to separate operands
    34d6:	2a 81       	ldd	r18, Y+2	; 0x02
    34d8:	3b 81       	ldd	r19, Y+3	; 0x03
    34da:	fe 01       	movw	r30, r28
    34dc:	e2 59       	subi	r30, 0x92	; 146
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	80 81       	ld	r24, Z
    34e2:	91 81       	ldd	r25, Z+1	; 0x01
    34e4:	fc 01       	movw	r30, r24
    34e6:	e2 0f       	add	r30, r18
    34e8:	f3 1f       	adc	r31, r19
    34ea:	80 e2       	ldi	r24, 0x20	; 32
    34ec:	80 83       	st	Z, r24
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	9b 81       	ldd	r25, Y+3	; 0x03
    34f2:	01 96       	adiw	r24, 0x01	; 1
    34f4:	9b 83       	std	Y+3, r25	; 0x03
    34f6:	8a 83       	std	Y+2, r24	; 0x02
    34f8:	ae c0       	rjmp	.+348    	; 0x3656 <CALC_VidInToPost+0x2b8>
			continue;
		}

		if (isdigit(token) || token == '.')
    34fa:	89 81       	ldd	r24, Y+1	; 0x01
    34fc:	88 2f       	mov	r24, r24
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	c0 97       	sbiw	r24, 0x30	; 48
    3502:	8a 30       	cpi	r24, 0x0A	; 10
    3504:	91 05       	cpc	r25, r1
    3506:	28 f1       	brcs	.+74     	; 0x3552 <CALC_VidInToPost+0x1b4>
    3508:	89 81       	ldd	r24, Y+1	; 0x01
    350a:	8e 32       	cpi	r24, 0x2E	; 46
    350c:	09 f0       	breq	.+2      	; 0x3510 <CALC_VidInToPost+0x172>
    350e:	56 c0       	rjmp	.+172    	; 0x35bc <CALC_VidInToPost+0x21e>
    3510:	20 c0       	rjmp	.+64     	; 0x3552 <CALC_VidInToPost+0x1b4>
		{

			while (isdigit(Copy_Pu8Infix[i]) || Copy_Pu8Infix[i] == '.')
			{
				Copy_Pu8Postfix[j++] = Copy_Pu8Infix[i++];
    3512:	2a 81       	ldd	r18, Y+2	; 0x02
    3514:	3b 81       	ldd	r19, Y+3	; 0x03
    3516:	fe 01       	movw	r30, r28
    3518:	e2 59       	subi	r30, 0x92	; 146
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	80 81       	ld	r24, Z
    351e:	91 81       	ldd	r25, Z+1	; 0x01
    3520:	dc 01       	movw	r26, r24
    3522:	a2 0f       	add	r26, r18
    3524:	b3 1f       	adc	r27, r19
    3526:	2c 81       	ldd	r18, Y+4	; 0x04
    3528:	3d 81       	ldd	r19, Y+5	; 0x05
    352a:	fe 01       	movw	r30, r28
    352c:	e4 59       	subi	r30, 0x94	; 148
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	80 81       	ld	r24, Z
    3532:	91 81       	ldd	r25, Z+1	; 0x01
    3534:	fc 01       	movw	r30, r24
    3536:	e2 0f       	add	r30, r18
    3538:	f3 1f       	adc	r31, r19
    353a:	80 81       	ld	r24, Z
    353c:	8c 93       	st	X, r24
    353e:	8a 81       	ldd	r24, Y+2	; 0x02
    3540:	9b 81       	ldd	r25, Y+3	; 0x03
    3542:	01 96       	adiw	r24, 0x01	; 1
    3544:	9b 83       	std	Y+3, r25	; 0x03
    3546:	8a 83       	std	Y+2, r24	; 0x02
    3548:	8c 81       	ldd	r24, Y+4	; 0x04
    354a:	9d 81       	ldd	r25, Y+5	; 0x05
    354c:	01 96       	adiw	r24, 0x01	; 1
    354e:	9d 83       	std	Y+5, r25	; 0x05
    3550:	8c 83       	std	Y+4, r24	; 0x04
		}

		if (isdigit(token) || token == '.')
		{

			while (isdigit(Copy_Pu8Infix[i]) || Copy_Pu8Infix[i] == '.')
    3552:	2c 81       	ldd	r18, Y+4	; 0x04
    3554:	3d 81       	ldd	r19, Y+5	; 0x05
    3556:	fe 01       	movw	r30, r28
    3558:	e4 59       	subi	r30, 0x94	; 148
    355a:	ff 4f       	sbci	r31, 0xFF	; 255
    355c:	80 81       	ld	r24, Z
    355e:	91 81       	ldd	r25, Z+1	; 0x01
    3560:	fc 01       	movw	r30, r24
    3562:	e2 0f       	add	r30, r18
    3564:	f3 1f       	adc	r31, r19
    3566:	80 81       	ld	r24, Z
    3568:	88 2f       	mov	r24, r24
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	c0 97       	sbiw	r24, 0x30	; 48
    356e:	8a 30       	cpi	r24, 0x0A	; 10
    3570:	91 05       	cpc	r25, r1
    3572:	78 f2       	brcs	.-98     	; 0x3512 <CALC_VidInToPost+0x174>
    3574:	2c 81       	ldd	r18, Y+4	; 0x04
    3576:	3d 81       	ldd	r19, Y+5	; 0x05
    3578:	fe 01       	movw	r30, r28
    357a:	e4 59       	subi	r30, 0x94	; 148
    357c:	ff 4f       	sbci	r31, 0xFF	; 255
    357e:	80 81       	ld	r24, Z
    3580:	91 81       	ldd	r25, Z+1	; 0x01
    3582:	fc 01       	movw	r30, r24
    3584:	e2 0f       	add	r30, r18
    3586:	f3 1f       	adc	r31, r19
    3588:	80 81       	ld	r24, Z
    358a:	8e 32       	cpi	r24, 0x2E	; 46
    358c:	11 f2       	breq	.-124    	; 0x3512 <CALC_VidInToPost+0x174>
			{
				Copy_Pu8Postfix[j++] = Copy_Pu8Infix[i++];
			}
			Copy_Pu8Postfix[j++] = ' '; // Add a space to separate operands
    358e:	2a 81       	ldd	r18, Y+2	; 0x02
    3590:	3b 81       	ldd	r19, Y+3	; 0x03
    3592:	fe 01       	movw	r30, r28
    3594:	e2 59       	subi	r30, 0x92	; 146
    3596:	ff 4f       	sbci	r31, 0xFF	; 255
    3598:	80 81       	ld	r24, Z
    359a:	91 81       	ldd	r25, Z+1	; 0x01
    359c:	fc 01       	movw	r30, r24
    359e:	e2 0f       	add	r30, r18
    35a0:	f3 1f       	adc	r31, r19
    35a2:	80 e2       	ldi	r24, 0x20	; 32
    35a4:	80 83       	st	Z, r24
    35a6:	8a 81       	ldd	r24, Y+2	; 0x02
    35a8:	9b 81       	ldd	r25, Y+3	; 0x03
    35aa:	01 96       	adiw	r24, 0x01	; 1
    35ac:	9b 83       	std	Y+3, r25	; 0x03
    35ae:	8a 83       	std	Y+2, r24	; 0x02
			i--;
    35b0:	8c 81       	ldd	r24, Y+4	; 0x04
    35b2:	9d 81       	ldd	r25, Y+5	; 0x05
    35b4:	01 97       	sbiw	r24, 0x01	; 1
    35b6:	9d 83       	std	Y+5, r25	; 0x05
    35b8:	8c 83       	std	Y+4, r24	; 0x04
    35ba:	48 c0       	rjmp	.+144    	; 0x364c <CALC_VidInToPost+0x2ae>
		}
		else if (CALC_u32isOperator(token)) 
    35bc:	89 81       	ldd	r24, Y+1	; 0x01
    35be:	0e 94 ae 19 	call	0x335c	; 0x335c <CALC_u32isOperator>
    35c2:	88 23       	and	r24, r24
    35c4:	09 f4       	brne	.+2      	; 0x35c8 <CALC_VidInToPost+0x22a>
    35c6:	42 c0       	rjmp	.+132    	; 0x364c <CALC_VidInToPost+0x2ae>
    35c8:	26 c0       	rjmp	.+76     	; 0x3616 <CALC_VidInToPost+0x278>
		{

			while (!STACK_u32IsEmptyChar(&stack) && CALC_u32precedence(STACK_u8PeekChar(&stack)) >= CALC_u32precedence(token))
			{
				Copy_Pu8Postfix[j++] = STACK_VidPopChar(&stack);
    35ca:	2a 81       	ldd	r18, Y+2	; 0x02
    35cc:	3b 81       	ldd	r19, Y+3	; 0x03
    35ce:	fe 01       	movw	r30, r28
    35d0:	e2 59       	subi	r30, 0x92	; 146
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	80 81       	ld	r24, Z
    35d6:	91 81       	ldd	r25, Z+1	; 0x01
    35d8:	8c 01       	movw	r16, r24
    35da:	02 0f       	add	r16, r18
    35dc:	13 1f       	adc	r17, r19
    35de:	ce 01       	movw	r24, r28
    35e0:	06 96       	adiw	r24, 0x06	; 6
    35e2:	0e 94 48 07 	call	0xe90	; 0xe90 <STACK_VidPopChar>
    35e6:	f8 01       	movw	r30, r16
    35e8:	80 83       	st	Z, r24
    35ea:	8a 81       	ldd	r24, Y+2	; 0x02
    35ec:	9b 81       	ldd	r25, Y+3	; 0x03
    35ee:	01 96       	adiw	r24, 0x01	; 1
    35f0:	9b 83       	std	Y+3, r25	; 0x03
    35f2:	8a 83       	std	Y+2, r24	; 0x02
				Copy_Pu8Postfix[j++] = ' ';
    35f4:	2a 81       	ldd	r18, Y+2	; 0x02
    35f6:	3b 81       	ldd	r19, Y+3	; 0x03
    35f8:	fe 01       	movw	r30, r28
    35fa:	e2 59       	subi	r30, 0x92	; 146
    35fc:	ff 4f       	sbci	r31, 0xFF	; 255
    35fe:	80 81       	ld	r24, Z
    3600:	91 81       	ldd	r25, Z+1	; 0x01
    3602:	fc 01       	movw	r30, r24
    3604:	e2 0f       	add	r30, r18
    3606:	f3 1f       	adc	r31, r19
    3608:	80 e2       	ldi	r24, 0x20	; 32
    360a:	80 83       	st	Z, r24
    360c:	8a 81       	ldd	r24, Y+2	; 0x02
    360e:	9b 81       	ldd	r25, Y+3	; 0x03
    3610:	01 96       	adiw	r24, 0x01	; 1
    3612:	9b 83       	std	Y+3, r25	; 0x03
    3614:	8a 83       	std	Y+2, r24	; 0x02
			i--;
		}
		else if (CALC_u32isOperator(token)) 
		{

			while (!STACK_u32IsEmptyChar(&stack) && CALC_u32precedence(STACK_u8PeekChar(&stack)) >= CALC_u32precedence(token))
    3616:	ce 01       	movw	r24, r28
    3618:	06 96       	adiw	r24, 0x06	; 6
    361a:	0e 94 8b 07 	call	0xf16	; 0xf16 <STACK_u32IsEmptyChar>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	00 97       	sbiw	r24, 0x00	; 0
    3624:	a1 05       	cpc	r26, r1
    3626:	b1 05       	cpc	r27, r1
    3628:	61 f4       	brne	.+24     	; 0x3642 <CALC_VidInToPost+0x2a4>
    362a:	ce 01       	movw	r24, r28
    362c:	06 96       	adiw	r24, 0x06	; 6
    362e:	0e 94 66 07 	call	0xecc	; 0xecc <STACK_u8PeekChar>
    3632:	0e 94 78 19 	call	0x32f0	; 0x32f0 <CALC_u32precedence>
    3636:	18 2f       	mov	r17, r24
    3638:	89 81       	ldd	r24, Y+1	; 0x01
    363a:	0e 94 78 19 	call	0x32f0	; 0x32f0 <CALC_u32precedence>
    363e:	18 17       	cp	r17, r24
    3640:	20 f6       	brcc	.-120    	; 0x35ca <CALC_VidInToPost+0x22c>
			{
				Copy_Pu8Postfix[j++] = STACK_VidPopChar(&stack);
				Copy_Pu8Postfix[j++] = ' ';
			}
			STACK_VidPushChar(&stack, token);
    3642:	ce 01       	movw	r24, r28
    3644:	06 96       	adiw	r24, 0x06	; 6
    3646:	69 81       	ldd	r22, Y+1	; 0x01
    3648:	0e 94 24 07 	call	0xe48	; 0xe48 <STACK_VidPushChar>
		}
		i++;
    364c:	8c 81       	ldd	r24, Y+4	; 0x04
    364e:	9d 81       	ldd	r25, Y+5	; 0x05
    3650:	01 96       	adiw	r24, 0x01	; 1
    3652:	9d 83       	std	Y+5, r25	; 0x05
    3654:	8c 83       	std	Y+4, r24	; 0x04
{
	struct CharStack stack;
	stack.top = -1;
	int i = 0, j = 0;

	while (Copy_Pu8Infix[i] != '\0')
    3656:	2c 81       	ldd	r18, Y+4	; 0x04
    3658:	3d 81       	ldd	r19, Y+5	; 0x05
    365a:	fe 01       	movw	r30, r28
    365c:	e4 59       	subi	r30, 0x94	; 148
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	80 81       	ld	r24, Z
    3662:	91 81       	ldd	r25, Z+1	; 0x01
    3664:	fc 01       	movw	r30, r24
    3666:	e2 0f       	add	r30, r18
    3668:	f3 1f       	adc	r31, r19
    366a:	80 81       	ld	r24, Z
    366c:	88 23       	and	r24, r24
    366e:	09 f0       	breq	.+2      	; 0x3672 <CALC_VidInToPost+0x2d4>
    3670:	b6 ce       	rjmp	.-660    	; 0x33de <CALC_VidInToPost+0x40>
    3672:	26 c0       	rjmp	.+76     	; 0x36c0 <CALC_VidInToPost+0x322>
	}


	while (!STACK_u32IsEmptyChar(&stack))
	{
		Copy_Pu8Postfix[j++] = STACK_VidPopChar(&stack);
    3674:	2a 81       	ldd	r18, Y+2	; 0x02
    3676:	3b 81       	ldd	r19, Y+3	; 0x03
    3678:	fe 01       	movw	r30, r28
    367a:	e2 59       	subi	r30, 0x92	; 146
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	80 81       	ld	r24, Z
    3680:	91 81       	ldd	r25, Z+1	; 0x01
    3682:	8c 01       	movw	r16, r24
    3684:	02 0f       	add	r16, r18
    3686:	13 1f       	adc	r17, r19
    3688:	ce 01       	movw	r24, r28
    368a:	06 96       	adiw	r24, 0x06	; 6
    368c:	0e 94 48 07 	call	0xe90	; 0xe90 <STACK_VidPopChar>
    3690:	f8 01       	movw	r30, r16
    3692:	80 83       	st	Z, r24
    3694:	8a 81       	ldd	r24, Y+2	; 0x02
    3696:	9b 81       	ldd	r25, Y+3	; 0x03
    3698:	01 96       	adiw	r24, 0x01	; 1
    369a:	9b 83       	std	Y+3, r25	; 0x03
    369c:	8a 83       	std	Y+2, r24	; 0x02
		Copy_Pu8Postfix[j++] = ' ';
    369e:	2a 81       	ldd	r18, Y+2	; 0x02
    36a0:	3b 81       	ldd	r19, Y+3	; 0x03
    36a2:	fe 01       	movw	r30, r28
    36a4:	e2 59       	subi	r30, 0x92	; 146
    36a6:	ff 4f       	sbci	r31, 0xFF	; 255
    36a8:	80 81       	ld	r24, Z
    36aa:	91 81       	ldd	r25, Z+1	; 0x01
    36ac:	fc 01       	movw	r30, r24
    36ae:	e2 0f       	add	r30, r18
    36b0:	f3 1f       	adc	r31, r19
    36b2:	80 e2       	ldi	r24, 0x20	; 32
    36b4:	80 83       	st	Z, r24
    36b6:	8a 81       	ldd	r24, Y+2	; 0x02
    36b8:	9b 81       	ldd	r25, Y+3	; 0x03
    36ba:	01 96       	adiw	r24, 0x01	; 1
    36bc:	9b 83       	std	Y+3, r25	; 0x03
    36be:	8a 83       	std	Y+2, r24	; 0x02
		}
		i++;
	}


	while (!STACK_u32IsEmptyChar(&stack))
    36c0:	ce 01       	movw	r24, r28
    36c2:	06 96       	adiw	r24, 0x06	; 6
    36c4:	0e 94 8b 07 	call	0xf16	; 0xf16 <STACK_u32IsEmptyChar>
    36c8:	dc 01       	movw	r26, r24
    36ca:	cb 01       	movw	r24, r22
    36cc:	00 97       	sbiw	r24, 0x00	; 0
    36ce:	a1 05       	cpc	r26, r1
    36d0:	b1 05       	cpc	r27, r1
    36d2:	81 f2       	breq	.-96     	; 0x3674 <CALC_VidInToPost+0x2d6>
	{
		Copy_Pu8Postfix[j++] = STACK_VidPopChar(&stack);
		Copy_Pu8Postfix[j++] = ' ';
	}
	Copy_Pu8Postfix[j] = '\0';
    36d4:	2a 81       	ldd	r18, Y+2	; 0x02
    36d6:	3b 81       	ldd	r19, Y+3	; 0x03
    36d8:	fe 01       	movw	r30, r28
    36da:	e2 59       	subi	r30, 0x92	; 146
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	80 81       	ld	r24, Z
    36e0:	91 81       	ldd	r25, Z+1	; 0x01
    36e2:	fc 01       	movw	r30, r24
    36e4:	e2 0f       	add	r30, r18
    36e6:	f3 1f       	adc	r31, r19
    36e8:	10 82       	st	Z, r1
}
    36ea:	c1 59       	subi	r28, 0x91	; 145
    36ec:	df 4f       	sbci	r29, 0xFF	; 255
    36ee:	0f b6       	in	r0, 0x3f	; 63
    36f0:	f8 94       	cli
    36f2:	de bf       	out	0x3e, r29	; 62
    36f4:	0f be       	out	0x3f, r0	; 63
    36f6:	cd bf       	out	0x3d, r28	; 61
    36f8:	cf 91       	pop	r28
    36fa:	df 91       	pop	r29
    36fc:	1f 91       	pop	r17
    36fe:	0f 91       	pop	r16
    3700:	08 95       	ret

00003702 <CALC_f64Evaluation>:

// Evaluate the postfix expression
f64 CALC_f64Evaluation(u8* Copy_Pu8Postfix)
{
    3702:	ef 92       	push	r14
    3704:	ff 92       	push	r15
    3706:	0f 93       	push	r16
    3708:	1f 93       	push	r17
    370a:	df 93       	push	r29
    370c:	cf 93       	push	r28
    370e:	cd b7       	in	r28, 0x3d	; 61
    3710:	de b7       	in	r29, 0x3e	; 62
    3712:	c4 5c       	subi	r28, 0xC4	; 196
    3714:	d1 40       	sbci	r29, 0x01	; 1
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	f8 94       	cli
    371a:	de bf       	out	0x3e, r29	; 62
    371c:	0f be       	out	0x3f, r0	; 63
    371e:	cd bf       	out	0x3d, r28	; 61
    3720:	fe 01       	movw	r30, r28
    3722:	e3 54       	subi	r30, 0x43	; 67
    3724:	fe 4f       	sbci	r31, 0xFE	; 254
    3726:	91 83       	std	Z+1, r25	; 0x01
    3728:	80 83       	st	Z, r24
	struct DoubleStack stack;
	stack.top = -1;
    372a:	8f ef       	ldi	r24, 0xFF	; 255
    372c:	9f ef       	ldi	r25, 0xFF	; 255
    372e:	9c a7       	std	Y+44, r25	; 0x2c
    3730:	8b a7       	std	Y+43, r24	; 0x2b
	int i = 0;
    3732:	1a a6       	std	Y+42, r1	; 0x2a
    3734:	19 a6       	std	Y+41, r1	; 0x29
    3736:	bf c2       	rjmp	.+1406   	; 0x3cb6 <CALC_f64Evaluation+0x5b4>

	while (Copy_Pu8Postfix[i] != '\0') {
		if (isdigit(Copy_Pu8Postfix[i]) || Copy_Pu8Postfix[i] == '.')
    3738:	29 a5       	ldd	r18, Y+41	; 0x29
    373a:	3a a5       	ldd	r19, Y+42	; 0x2a
    373c:	fe 01       	movw	r30, r28
    373e:	e3 54       	subi	r30, 0x43	; 67
    3740:	fe 4f       	sbci	r31, 0xFE	; 254
    3742:	80 81       	ld	r24, Z
    3744:	91 81       	ldd	r25, Z+1	; 0x01
    3746:	fc 01       	movw	r30, r24
    3748:	e2 0f       	add	r30, r18
    374a:	f3 1f       	adc	r31, r19
    374c:	80 81       	ld	r24, Z
    374e:	88 2f       	mov	r24, r24
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	c0 97       	sbiw	r24, 0x30	; 48
    3754:	8a 30       	cpi	r24, 0x0A	; 10
    3756:	91 05       	cpc	r25, r1
    3758:	70 f0       	brcs	.+28     	; 0x3776 <CALC_f64Evaluation+0x74>
    375a:	29 a5       	ldd	r18, Y+41	; 0x29
    375c:	3a a5       	ldd	r19, Y+42	; 0x2a
    375e:	fe 01       	movw	r30, r28
    3760:	e3 54       	subi	r30, 0x43	; 67
    3762:	fe 4f       	sbci	r31, 0xFE	; 254
    3764:	80 81       	ld	r24, Z
    3766:	91 81       	ldd	r25, Z+1	; 0x01
    3768:	fc 01       	movw	r30, r24
    376a:	e2 0f       	add	r30, r18
    376c:	f3 1f       	adc	r31, r19
    376e:	80 81       	ld	r24, Z
    3770:	8e 32       	cpi	r24, 0x2E	; 46
    3772:	09 f0       	breq	.+2      	; 0x3776 <CALC_f64Evaluation+0x74>
    3774:	cb c0       	rjmp	.+406    	; 0x390c <CALC_f64Evaluation+0x20a>
		{

			double num = 0;
    3776:	80 e0       	ldi	r24, 0x00	; 0
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	a0 e0       	ldi	r26, 0x00	; 0
    377c:	b0 e0       	ldi	r27, 0x00	; 0
    377e:	8d a3       	std	Y+37, r24	; 0x25
    3780:	9e a3       	std	Y+38, r25	; 0x26
    3782:	af a3       	std	Y+39, r26	; 0x27
    3784:	b8 a7       	std	Y+40, r27	; 0x28
			int decimal = 0;
    3786:	1c a2       	std	Y+36, r1	; 0x24
    3788:	1b a2       	std	Y+35, r1	; 0x23
			double fraction = 1.0;
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	a0 e8       	ldi	r26, 0x80	; 128
    3790:	bf e3       	ldi	r27, 0x3F	; 63
    3792:	8f 8f       	std	Y+31, r24	; 0x1f
    3794:	98 a3       	std	Y+32, r25	; 0x20
    3796:	a9 a3       	std	Y+33, r26	; 0x21
    3798:	ba a3       	std	Y+34, r27	; 0x22
    379a:	8d c0       	rjmp	.+282    	; 0x38b6 <CALC_f64Evaluation+0x1b4>

			while (isdigit(Copy_Pu8Postfix[i]) || Copy_Pu8Postfix[i] == '.')
			{
				if (Copy_Pu8Postfix[i] == '.')
    379c:	29 a5       	ldd	r18, Y+41	; 0x29
    379e:	3a a5       	ldd	r19, Y+42	; 0x2a
    37a0:	fe 01       	movw	r30, r28
    37a2:	e3 54       	subi	r30, 0x43	; 67
    37a4:	fe 4f       	sbci	r31, 0xFE	; 254
    37a6:	80 81       	ld	r24, Z
    37a8:	91 81       	ldd	r25, Z+1	; 0x01
    37aa:	fc 01       	movw	r30, r24
    37ac:	e2 0f       	add	r30, r18
    37ae:	f3 1f       	adc	r31, r19
    37b0:	80 81       	ld	r24, Z
    37b2:	8e 32       	cpi	r24, 0x2E	; 46
    37b4:	29 f4       	brne	.+10     	; 0x37c0 <CALC_f64Evaluation+0xbe>
				{
					decimal = 1;
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	9c a3       	std	Y+36, r25	; 0x24
    37bc:	8b a3       	std	Y+35, r24	; 0x23
    37be:	76 c0       	rjmp	.+236    	; 0x38ac <CALC_f64Evaluation+0x1aa>
				}
				else if (decimal)
    37c0:	8b a1       	ldd	r24, Y+35	; 0x23
    37c2:	9c a1       	ldd	r25, Y+36	; 0x24
    37c4:	00 97       	sbiw	r24, 0x00	; 0
    37c6:	09 f4       	brne	.+2      	; 0x37ca <CALC_f64Evaluation+0xc8>
    37c8:	41 c0       	rjmp	.+130    	; 0x384c <CALC_f64Evaluation+0x14a>
				{
					fraction /= 10.0;
    37ca:	6f 8d       	ldd	r22, Y+31	; 0x1f
    37cc:	78 a1       	ldd	r23, Y+32	; 0x20
    37ce:	89 a1       	ldd	r24, Y+33	; 0x21
    37d0:	9a a1       	ldd	r25, Y+34	; 0x22
    37d2:	20 e0       	ldi	r18, 0x00	; 0
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	40 e2       	ldi	r20, 0x20	; 32
    37d8:	51 e4       	ldi	r21, 0x41	; 65
    37da:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	8f 8f       	std	Y+31, r24	; 0x1f
    37e4:	98 a3       	std	Y+32, r25	; 0x20
    37e6:	a9 a3       	std	Y+33, r26	; 0x21
    37e8:	ba a3       	std	Y+34, r27	; 0x22
					num += (Copy_Pu8Postfix[i] - '0') * fraction;
    37ea:	29 a5       	ldd	r18, Y+41	; 0x29
    37ec:	3a a5       	ldd	r19, Y+42	; 0x2a
    37ee:	fe 01       	movw	r30, r28
    37f0:	e3 54       	subi	r30, 0x43	; 67
    37f2:	fe 4f       	sbci	r31, 0xFE	; 254
    37f4:	80 81       	ld	r24, Z
    37f6:	91 81       	ldd	r25, Z+1	; 0x01
    37f8:	fc 01       	movw	r30, r24
    37fa:	e2 0f       	add	r30, r18
    37fc:	f3 1f       	adc	r31, r19
    37fe:	80 81       	ld	r24, Z
    3800:	88 2f       	mov	r24, r24
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	c0 97       	sbiw	r24, 0x30	; 48
    3806:	aa 27       	eor	r26, r26
    3808:	97 fd       	sbrc	r25, 7
    380a:	a0 95       	com	r26
    380c:	ba 2f       	mov	r27, r26
    380e:	bc 01       	movw	r22, r24
    3810:	cd 01       	movw	r24, r26
    3812:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    3816:	dc 01       	movw	r26, r24
    3818:	cb 01       	movw	r24, r22
    381a:	bc 01       	movw	r22, r24
    381c:	cd 01       	movw	r24, r26
    381e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3820:	38 a1       	ldd	r19, Y+32	; 0x20
    3822:	49 a1       	ldd	r20, Y+33	; 0x21
    3824:	5a a1       	ldd	r21, Y+34	; 0x22
    3826:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    382a:	dc 01       	movw	r26, r24
    382c:	cb 01       	movw	r24, r22
    382e:	9c 01       	movw	r18, r24
    3830:	ad 01       	movw	r20, r26
    3832:	6d a1       	ldd	r22, Y+37	; 0x25
    3834:	7e a1       	ldd	r23, Y+38	; 0x26
    3836:	8f a1       	ldd	r24, Y+39	; 0x27
    3838:	98 a5       	ldd	r25, Y+40	; 0x28
    383a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22
    3842:	8d a3       	std	Y+37, r24	; 0x25
    3844:	9e a3       	std	Y+38, r25	; 0x26
    3846:	af a3       	std	Y+39, r26	; 0x27
    3848:	b8 a7       	std	Y+40, r27	; 0x28
    384a:	30 c0       	rjmp	.+96     	; 0x38ac <CALC_f64Evaluation+0x1aa>
				}
				else
				{
					num = num * 10 + (Copy_Pu8Postfix[i] - '0');
    384c:	6d a1       	ldd	r22, Y+37	; 0x25
    384e:	7e a1       	ldd	r23, Y+38	; 0x26
    3850:	8f a1       	ldd	r24, Y+39	; 0x27
    3852:	98 a5       	ldd	r25, Y+40	; 0x28
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	40 e2       	ldi	r20, 0x20	; 32
    385a:	51 e4       	ldi	r21, 0x41	; 65
    385c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3860:	dc 01       	movw	r26, r24
    3862:	cb 01       	movw	r24, r22
    3864:	7c 01       	movw	r14, r24
    3866:	8d 01       	movw	r16, r26
    3868:	29 a5       	ldd	r18, Y+41	; 0x29
    386a:	3a a5       	ldd	r19, Y+42	; 0x2a
    386c:	fe 01       	movw	r30, r28
    386e:	e3 54       	subi	r30, 0x43	; 67
    3870:	fe 4f       	sbci	r31, 0xFE	; 254
    3872:	80 81       	ld	r24, Z
    3874:	91 81       	ldd	r25, Z+1	; 0x01
    3876:	fc 01       	movw	r30, r24
    3878:	e2 0f       	add	r30, r18
    387a:	f3 1f       	adc	r31, r19
    387c:	80 81       	ld	r24, Z
    387e:	88 2f       	mov	r24, r24
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	c0 97       	sbiw	r24, 0x30	; 48
    3884:	aa 27       	eor	r26, r26
    3886:	97 fd       	sbrc	r25, 7
    3888:	a0 95       	com	r26
    388a:	ba 2f       	mov	r27, r26
    388c:	bc 01       	movw	r22, r24
    388e:	cd 01       	movw	r24, r26
    3890:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    3894:	9b 01       	movw	r18, r22
    3896:	ac 01       	movw	r20, r24
    3898:	c8 01       	movw	r24, r16
    389a:	b7 01       	movw	r22, r14
    389c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	8d a3       	std	Y+37, r24	; 0x25
    38a6:	9e a3       	std	Y+38, r25	; 0x26
    38a8:	af a3       	std	Y+39, r26	; 0x27
    38aa:	b8 a7       	std	Y+40, r27	; 0x28
				}
				i++;
    38ac:	89 a5       	ldd	r24, Y+41	; 0x29
    38ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    38b0:	01 96       	adiw	r24, 0x01	; 1
    38b2:	9a a7       	std	Y+42, r25	; 0x2a
    38b4:	89 a7       	std	Y+41, r24	; 0x29

			double num = 0;
			int decimal = 0;
			double fraction = 1.0;

			while (isdigit(Copy_Pu8Postfix[i]) || Copy_Pu8Postfix[i] == '.')
    38b6:	29 a5       	ldd	r18, Y+41	; 0x29
    38b8:	3a a5       	ldd	r19, Y+42	; 0x2a
    38ba:	fe 01       	movw	r30, r28
    38bc:	e3 54       	subi	r30, 0x43	; 67
    38be:	fe 4f       	sbci	r31, 0xFE	; 254
    38c0:	80 81       	ld	r24, Z
    38c2:	91 81       	ldd	r25, Z+1	; 0x01
    38c4:	fc 01       	movw	r30, r24
    38c6:	e2 0f       	add	r30, r18
    38c8:	f3 1f       	adc	r31, r19
    38ca:	80 81       	ld	r24, Z
    38cc:	88 2f       	mov	r24, r24
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	c0 97       	sbiw	r24, 0x30	; 48
    38d2:	8a 30       	cpi	r24, 0x0A	; 10
    38d4:	91 05       	cpc	r25, r1
    38d6:	08 f4       	brcc	.+2      	; 0x38da <CALC_f64Evaluation+0x1d8>
    38d8:	61 cf       	rjmp	.-318    	; 0x379c <CALC_f64Evaluation+0x9a>
    38da:	29 a5       	ldd	r18, Y+41	; 0x29
    38dc:	3a a5       	ldd	r19, Y+42	; 0x2a
    38de:	fe 01       	movw	r30, r28
    38e0:	e3 54       	subi	r30, 0x43	; 67
    38e2:	fe 4f       	sbci	r31, 0xFE	; 254
    38e4:	80 81       	ld	r24, Z
    38e6:	91 81       	ldd	r25, Z+1	; 0x01
    38e8:	fc 01       	movw	r30, r24
    38ea:	e2 0f       	add	r30, r18
    38ec:	f3 1f       	adc	r31, r19
    38ee:	80 81       	ld	r24, Z
    38f0:	8e 32       	cpi	r24, 0x2E	; 46
    38f2:	09 f4       	brne	.+2      	; 0x38f6 <CALC_f64Evaluation+0x1f4>
    38f4:	53 cf       	rjmp	.-346    	; 0x379c <CALC_f64Evaluation+0x9a>
				{
					num = num * 10 + (Copy_Pu8Postfix[i] - '0');
				}
				i++;
			}
			STACK_VidPushDouble(&stack, num);
    38f6:	ce 01       	movw	r24, r28
    38f8:	8b 96       	adiw	r24, 0x2b	; 43
    38fa:	2d a1       	ldd	r18, Y+37	; 0x25
    38fc:	3e a1       	ldd	r19, Y+38	; 0x26
    38fe:	4f a1       	ldd	r20, Y+39	; 0x27
    3900:	58 a5       	ldd	r21, Y+40	; 0x28
    3902:	ba 01       	movw	r22, r20
    3904:	a9 01       	movw	r20, r18
    3906:	0e 94 b7 07 	call	0xf6e	; 0xf6e <STACK_VidPushDouble>
    390a:	d5 c1       	rjmp	.+938    	; 0x3cb6 <CALC_f64Evaluation+0x5b4>
		}
		else if (Copy_Pu8Postfix[i] == '-')
    390c:	29 a5       	ldd	r18, Y+41	; 0x29
    390e:	3a a5       	ldd	r19, Y+42	; 0x2a
    3910:	fe 01       	movw	r30, r28
    3912:	e3 54       	subi	r30, 0x43	; 67
    3914:	fe 4f       	sbci	r31, 0xFE	; 254
    3916:	80 81       	ld	r24, Z
    3918:	91 81       	ldd	r25, Z+1	; 0x01
    391a:	fc 01       	movw	r30, r24
    391c:	e2 0f       	add	r30, r18
    391e:	f3 1f       	adc	r31, r19
    3920:	80 81       	ld	r24, Z
    3922:	8d 32       	cpi	r24, 0x2D	; 45
    3924:	09 f0       	breq	.+2      	; 0x3928 <CALC_f64Evaluation+0x226>
    3926:	16 c1       	rjmp	.+556    	; 0x3b54 <CALC_f64Evaluation+0x452>
		{
			// Handle negative numbers
			if (isdigit(Copy_Pu8Postfix[i + 1]))
    3928:	89 a5       	ldd	r24, Y+41	; 0x29
    392a:	9a a5       	ldd	r25, Y+42	; 0x2a
    392c:	9c 01       	movw	r18, r24
    392e:	2f 5f       	subi	r18, 0xFF	; 255
    3930:	3f 4f       	sbci	r19, 0xFF	; 255
    3932:	fe 01       	movw	r30, r28
    3934:	e3 54       	subi	r30, 0x43	; 67
    3936:	fe 4f       	sbci	r31, 0xFE	; 254
    3938:	80 81       	ld	r24, Z
    393a:	91 81       	ldd	r25, Z+1	; 0x01
    393c:	fc 01       	movw	r30, r24
    393e:	e2 0f       	add	r30, r18
    3940:	f3 1f       	adc	r31, r19
    3942:	80 81       	ld	r24, Z
    3944:	88 2f       	mov	r24, r24
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	c0 97       	sbiw	r24, 0x30	; 48
    394a:	8a 30       	cpi	r24, 0x0A	; 10
    394c:	91 05       	cpc	r25, r1
    394e:	08 f0       	brcs	.+2      	; 0x3952 <CALC_f64Evaluation+0x250>
    3950:	d3 c0       	rjmp	.+422    	; 0x3af8 <CALC_f64Evaluation+0x3f6>
			{

				i++;
    3952:	89 a5       	ldd	r24, Y+41	; 0x29
    3954:	9a a5       	ldd	r25, Y+42	; 0x2a
    3956:	01 96       	adiw	r24, 0x01	; 1
    3958:	9a a7       	std	Y+42, r25	; 0x2a
    395a:	89 a7       	std	Y+41, r24	; 0x29
				double num = 0;
    395c:	80 e0       	ldi	r24, 0x00	; 0
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	a0 e0       	ldi	r26, 0x00	; 0
    3962:	b0 e0       	ldi	r27, 0x00	; 0
    3964:	8b 8f       	std	Y+27, r24	; 0x1b
    3966:	9c 8f       	std	Y+28, r25	; 0x1c
    3968:	ad 8f       	std	Y+29, r26	; 0x1d
    396a:	be 8f       	std	Y+30, r27	; 0x1e
				int decimal = 0;
    396c:	1a 8e       	std	Y+26, r1	; 0x1a
    396e:	19 8e       	std	Y+25, r1	; 0x19
				double fraction = 1.0;
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	a0 e8       	ldi	r26, 0x80	; 128
    3976:	bf e3       	ldi	r27, 0x3F	; 63
    3978:	8d 8b       	std	Y+21, r24	; 0x15
    397a:	9e 8b       	std	Y+22, r25	; 0x16
    397c:	af 8b       	std	Y+23, r26	; 0x17
    397e:	b8 8f       	std	Y+24, r27	; 0x18
    3980:	8d c0       	rjmp	.+282    	; 0x3a9c <CALC_f64Evaluation+0x39a>

				while (isdigit(Copy_Pu8Postfix[i]) || Copy_Pu8Postfix[i] == '.')
				{
					if (Copy_Pu8Postfix[i] == '.')
    3982:	29 a5       	ldd	r18, Y+41	; 0x29
    3984:	3a a5       	ldd	r19, Y+42	; 0x2a
    3986:	fe 01       	movw	r30, r28
    3988:	e3 54       	subi	r30, 0x43	; 67
    398a:	fe 4f       	sbci	r31, 0xFE	; 254
    398c:	80 81       	ld	r24, Z
    398e:	91 81       	ldd	r25, Z+1	; 0x01
    3990:	fc 01       	movw	r30, r24
    3992:	e2 0f       	add	r30, r18
    3994:	f3 1f       	adc	r31, r19
    3996:	80 81       	ld	r24, Z
    3998:	8e 32       	cpi	r24, 0x2E	; 46
    399a:	29 f4       	brne	.+10     	; 0x39a6 <CALC_f64Evaluation+0x2a4>
					{
						decimal = 1;
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	9a 8f       	std	Y+26, r25	; 0x1a
    39a2:	89 8f       	std	Y+25, r24	; 0x19
    39a4:	76 c0       	rjmp	.+236    	; 0x3a92 <CALC_f64Evaluation+0x390>
					}
					else if (decimal)
    39a6:	89 8d       	ldd	r24, Y+25	; 0x19
    39a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    39aa:	00 97       	sbiw	r24, 0x00	; 0
    39ac:	09 f4       	brne	.+2      	; 0x39b0 <CALC_f64Evaluation+0x2ae>
    39ae:	41 c0       	rjmp	.+130    	; 0x3a32 <CALC_f64Evaluation+0x330>
					{
						fraction /= 10.0;
    39b0:	6d 89       	ldd	r22, Y+21	; 0x15
    39b2:	7e 89       	ldd	r23, Y+22	; 0x16
    39b4:	8f 89       	ldd	r24, Y+23	; 0x17
    39b6:	98 8d       	ldd	r25, Y+24	; 0x18
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	40 e2       	ldi	r20, 0x20	; 32
    39be:	51 e4       	ldi	r21, 0x41	; 65
    39c0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	8d 8b       	std	Y+21, r24	; 0x15
    39ca:	9e 8b       	std	Y+22, r25	; 0x16
    39cc:	af 8b       	std	Y+23, r26	; 0x17
    39ce:	b8 8f       	std	Y+24, r27	; 0x18
						num += (Copy_Pu8Postfix[i] - '0') * fraction;
    39d0:	29 a5       	ldd	r18, Y+41	; 0x29
    39d2:	3a a5       	ldd	r19, Y+42	; 0x2a
    39d4:	fe 01       	movw	r30, r28
    39d6:	e3 54       	subi	r30, 0x43	; 67
    39d8:	fe 4f       	sbci	r31, 0xFE	; 254
    39da:	80 81       	ld	r24, Z
    39dc:	91 81       	ldd	r25, Z+1	; 0x01
    39de:	fc 01       	movw	r30, r24
    39e0:	e2 0f       	add	r30, r18
    39e2:	f3 1f       	adc	r31, r19
    39e4:	80 81       	ld	r24, Z
    39e6:	88 2f       	mov	r24, r24
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	c0 97       	sbiw	r24, 0x30	; 48
    39ec:	aa 27       	eor	r26, r26
    39ee:	97 fd       	sbrc	r25, 7
    39f0:	a0 95       	com	r26
    39f2:	ba 2f       	mov	r27, r26
    39f4:	bc 01       	movw	r22, r24
    39f6:	cd 01       	movw	r24, r26
    39f8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	bc 01       	movw	r22, r24
    3a02:	cd 01       	movw	r24, r26
    3a04:	2d 89       	ldd	r18, Y+21	; 0x15
    3a06:	3e 89       	ldd	r19, Y+22	; 0x16
    3a08:	4f 89       	ldd	r20, Y+23	; 0x17
    3a0a:	58 8d       	ldd	r21, Y+24	; 0x18
    3a0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a10:	dc 01       	movw	r26, r24
    3a12:	cb 01       	movw	r24, r22
    3a14:	9c 01       	movw	r18, r24
    3a16:	ad 01       	movw	r20, r26
    3a18:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3a1a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3a1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a20:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    3a24:	dc 01       	movw	r26, r24
    3a26:	cb 01       	movw	r24, r22
    3a28:	8b 8f       	std	Y+27, r24	; 0x1b
    3a2a:	9c 8f       	std	Y+28, r25	; 0x1c
    3a2c:	ad 8f       	std	Y+29, r26	; 0x1d
    3a2e:	be 8f       	std	Y+30, r27	; 0x1e
    3a30:	30 c0       	rjmp	.+96     	; 0x3a92 <CALC_f64Evaluation+0x390>
					}
					else
					{
						num = num * 10 + (Copy_Pu8Postfix[i] - '0');
    3a32:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3a34:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3a36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	40 e2       	ldi	r20, 0x20	; 32
    3a40:	51 e4       	ldi	r21, 0x41	; 65
    3a42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	7c 01       	movw	r14, r24
    3a4c:	8d 01       	movw	r16, r26
    3a4e:	29 a5       	ldd	r18, Y+41	; 0x29
    3a50:	3a a5       	ldd	r19, Y+42	; 0x2a
    3a52:	fe 01       	movw	r30, r28
    3a54:	e3 54       	subi	r30, 0x43	; 67
    3a56:	fe 4f       	sbci	r31, 0xFE	; 254
    3a58:	80 81       	ld	r24, Z
    3a5a:	91 81       	ldd	r25, Z+1	; 0x01
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	e2 0f       	add	r30, r18
    3a60:	f3 1f       	adc	r31, r19
    3a62:	80 81       	ld	r24, Z
    3a64:	88 2f       	mov	r24, r24
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	c0 97       	sbiw	r24, 0x30	; 48
    3a6a:	aa 27       	eor	r26, r26
    3a6c:	97 fd       	sbrc	r25, 7
    3a6e:	a0 95       	com	r26
    3a70:	ba 2f       	mov	r27, r26
    3a72:	bc 01       	movw	r22, r24
    3a74:	cd 01       	movw	r24, r26
    3a76:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    3a7a:	9b 01       	movw	r18, r22
    3a7c:	ac 01       	movw	r20, r24
    3a7e:	c8 01       	movw	r24, r16
    3a80:	b7 01       	movw	r22, r14
    3a82:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    3a86:	dc 01       	movw	r26, r24
    3a88:	cb 01       	movw	r24, r22
    3a8a:	8b 8f       	std	Y+27, r24	; 0x1b
    3a8c:	9c 8f       	std	Y+28, r25	; 0x1c
    3a8e:	ad 8f       	std	Y+29, r26	; 0x1d
    3a90:	be 8f       	std	Y+30, r27	; 0x1e
					}
					i++;
    3a92:	89 a5       	ldd	r24, Y+41	; 0x29
    3a94:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a96:	01 96       	adiw	r24, 0x01	; 1
    3a98:	9a a7       	std	Y+42, r25	; 0x2a
    3a9a:	89 a7       	std	Y+41, r24	; 0x29
				i++;
				double num = 0;
				int decimal = 0;
				double fraction = 1.0;

				while (isdigit(Copy_Pu8Postfix[i]) || Copy_Pu8Postfix[i] == '.')
    3a9c:	29 a5       	ldd	r18, Y+41	; 0x29
    3a9e:	3a a5       	ldd	r19, Y+42	; 0x2a
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	e3 54       	subi	r30, 0x43	; 67
    3aa4:	fe 4f       	sbci	r31, 0xFE	; 254
    3aa6:	80 81       	ld	r24, Z
    3aa8:	91 81       	ldd	r25, Z+1	; 0x01
    3aaa:	fc 01       	movw	r30, r24
    3aac:	e2 0f       	add	r30, r18
    3aae:	f3 1f       	adc	r31, r19
    3ab0:	80 81       	ld	r24, Z
    3ab2:	88 2f       	mov	r24, r24
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	c0 97       	sbiw	r24, 0x30	; 48
    3ab8:	8a 30       	cpi	r24, 0x0A	; 10
    3aba:	91 05       	cpc	r25, r1
    3abc:	08 f4       	brcc	.+2      	; 0x3ac0 <CALC_f64Evaluation+0x3be>
    3abe:	61 cf       	rjmp	.-318    	; 0x3982 <CALC_f64Evaluation+0x280>
    3ac0:	29 a5       	ldd	r18, Y+41	; 0x29
    3ac2:	3a a5       	ldd	r19, Y+42	; 0x2a
    3ac4:	fe 01       	movw	r30, r28
    3ac6:	e3 54       	subi	r30, 0x43	; 67
    3ac8:	fe 4f       	sbci	r31, 0xFE	; 254
    3aca:	80 81       	ld	r24, Z
    3acc:	91 81       	ldd	r25, Z+1	; 0x01
    3ace:	fc 01       	movw	r30, r24
    3ad0:	e2 0f       	add	r30, r18
    3ad2:	f3 1f       	adc	r31, r19
    3ad4:	80 81       	ld	r24, Z
    3ad6:	8e 32       	cpi	r24, 0x2E	; 46
    3ad8:	09 f4       	brne	.+2      	; 0x3adc <CALC_f64Evaluation+0x3da>
    3ada:	53 cf       	rjmp	.-346    	; 0x3982 <CALC_f64Evaluation+0x280>
					{
						num = num * 10 + (Copy_Pu8Postfix[i] - '0');
					}
					i++;
				}
				STACK_VidPushDouble(&stack, -num); // Push the negative number
    3adc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ade:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ae0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3ae2:	be 8d       	ldd	r27, Y+30	; 0x1e
    3ae4:	9c 01       	movw	r18, r24
    3ae6:	ad 01       	movw	r20, r26
    3ae8:	50 58       	subi	r21, 0x80	; 128
    3aea:	ce 01       	movw	r24, r28
    3aec:	8b 96       	adiw	r24, 0x2b	; 43
    3aee:	ba 01       	movw	r22, r20
    3af0:	a9 01       	movw	r20, r18
    3af2:	0e 94 b7 07 	call	0xf6e	; 0xf6e <STACK_VidPushDouble>
    3af6:	df c0       	rjmp	.+446    	; 0x3cb6 <CALC_f64Evaluation+0x5b4>
			}
			else
			{

				double op2 = STACK_f64PopDouble(&stack);
    3af8:	ce 01       	movw	r24, r28
    3afa:	8b 96       	adiw	r24, 0x2b	; 43
    3afc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <STACK_f64PopDouble>
    3b00:	dc 01       	movw	r26, r24
    3b02:	cb 01       	movw	r24, r22
    3b04:	89 8b       	std	Y+17, r24	; 0x11
    3b06:	9a 8b       	std	Y+18, r25	; 0x12
    3b08:	ab 8b       	std	Y+19, r26	; 0x13
    3b0a:	bc 8b       	std	Y+20, r27	; 0x14
				double op1 = STACK_f64PopDouble(&stack);
    3b0c:	ce 01       	movw	r24, r28
    3b0e:	8b 96       	adiw	r24, 0x2b	; 43
    3b10:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <STACK_f64PopDouble>
    3b14:	dc 01       	movw	r26, r24
    3b16:	cb 01       	movw	r24, r22
    3b18:	8d 87       	std	Y+13, r24	; 0x0d
    3b1a:	9e 87       	std	Y+14, r25	; 0x0e
    3b1c:	af 87       	std	Y+15, r26	; 0x0f
    3b1e:	b8 8b       	std	Y+16, r27	; 0x10
				STACK_VidPushDouble(&stack, op1 - op2);
    3b20:	6d 85       	ldd	r22, Y+13	; 0x0d
    3b22:	7e 85       	ldd	r23, Y+14	; 0x0e
    3b24:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b26:	98 89       	ldd	r25, Y+16	; 0x10
    3b28:	29 89       	ldd	r18, Y+17	; 0x11
    3b2a:	3a 89       	ldd	r19, Y+18	; 0x12
    3b2c:	4b 89       	ldd	r20, Y+19	; 0x13
    3b2e:	5c 89       	ldd	r21, Y+20	; 0x14
    3b30:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	9c 01       	movw	r18, r24
    3b3a:	ad 01       	movw	r20, r26
    3b3c:	ce 01       	movw	r24, r28
    3b3e:	8b 96       	adiw	r24, 0x2b	; 43
    3b40:	ba 01       	movw	r22, r20
    3b42:	a9 01       	movw	r20, r18
    3b44:	0e 94 b7 07 	call	0xf6e	; 0xf6e <STACK_VidPushDouble>
				i++;
    3b48:	89 a5       	ldd	r24, Y+41	; 0x29
    3b4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b4c:	01 96       	adiw	r24, 0x01	; 1
    3b4e:	9a a7       	std	Y+42, r25	; 0x2a
    3b50:	89 a7       	std	Y+41, r24	; 0x29
    3b52:	b1 c0       	rjmp	.+354    	; 0x3cb6 <CALC_f64Evaluation+0x5b4>
			}
		}
		else if (Copy_Pu8Postfix[i] == ' ')
    3b54:	29 a5       	ldd	r18, Y+41	; 0x29
    3b56:	3a a5       	ldd	r19, Y+42	; 0x2a
    3b58:	fe 01       	movw	r30, r28
    3b5a:	e3 54       	subi	r30, 0x43	; 67
    3b5c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b5e:	80 81       	ld	r24, Z
    3b60:	91 81       	ldd	r25, Z+1	; 0x01
    3b62:	fc 01       	movw	r30, r24
    3b64:	e2 0f       	add	r30, r18
    3b66:	f3 1f       	adc	r31, r19
    3b68:	80 81       	ld	r24, Z
    3b6a:	80 32       	cpi	r24, 0x20	; 32
    3b6c:	31 f4       	brne	.+12     	; 0x3b7a <CALC_f64Evaluation+0x478>
		{

			i++;
    3b6e:	89 a5       	ldd	r24, Y+41	; 0x29
    3b70:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b72:	01 96       	adiw	r24, 0x01	; 1
    3b74:	9a a7       	std	Y+42, r25	; 0x2a
    3b76:	89 a7       	std	Y+41, r24	; 0x29
    3b78:	9e c0       	rjmp	.+316    	; 0x3cb6 <CALC_f64Evaluation+0x5b4>
		}
		else
		{

			double op2 = STACK_f64PopDouble(&stack);
    3b7a:	ce 01       	movw	r24, r28
    3b7c:	8b 96       	adiw	r24, 0x2b	; 43
    3b7e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <STACK_f64PopDouble>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	89 87       	std	Y+9, r24	; 0x09
    3b88:	9a 87       	std	Y+10, r25	; 0x0a
    3b8a:	ab 87       	std	Y+11, r26	; 0x0b
    3b8c:	bc 87       	std	Y+12, r27	; 0x0c
			double op1 = STACK_f64PopDouble(&stack);
    3b8e:	ce 01       	movw	r24, r28
    3b90:	8b 96       	adiw	r24, 0x2b	; 43
    3b92:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <STACK_f64PopDouble>
    3b96:	dc 01       	movw	r26, r24
    3b98:	cb 01       	movw	r24, r22
    3b9a:	8d 83       	std	Y+5, r24	; 0x05
    3b9c:	9e 83       	std	Y+6, r25	; 0x06
    3b9e:	af 83       	std	Y+7, r26	; 0x07
    3ba0:	b8 87       	std	Y+8, r27	; 0x08
			double result;

			switch (Copy_Pu8Postfix[i])
    3ba2:	29 a5       	ldd	r18, Y+41	; 0x29
    3ba4:	3a a5       	ldd	r19, Y+42	; 0x2a
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	e3 54       	subi	r30, 0x43	; 67
    3baa:	fe 4f       	sbci	r31, 0xFE	; 254
    3bac:	80 81       	ld	r24, Z
    3bae:	91 81       	ldd	r25, Z+1	; 0x01
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	e2 0f       	add	r30, r18
    3bb4:	f3 1f       	adc	r31, r19
    3bb6:	80 81       	ld	r24, Z
    3bb8:	28 2f       	mov	r18, r24
    3bba:	30 e0       	ldi	r19, 0x00	; 0
    3bbc:	cd 53       	subi	r28, 0x3D	; 61
    3bbe:	de 4f       	sbci	r29, 0xFE	; 254
    3bc0:	39 83       	std	Y+1, r19	; 0x01
    3bc2:	28 83       	st	Y, r18
    3bc4:	c3 5c       	subi	r28, 0xC3	; 195
    3bc6:	d1 40       	sbci	r29, 0x01	; 1
    3bc8:	cd 53       	subi	r28, 0x3D	; 61
    3bca:	de 4f       	sbci	r29, 0xFE	; 254
    3bcc:	88 81       	ld	r24, Y
    3bce:	99 81       	ldd	r25, Y+1	; 0x01
    3bd0:	c3 5c       	subi	r28, 0xC3	; 195
    3bd2:	d1 40       	sbci	r29, 0x01	; 1
    3bd4:	8b 32       	cpi	r24, 0x2B	; 43
    3bd6:	91 05       	cpc	r25, r1
    3bd8:	99 f0       	breq	.+38     	; 0x3c00 <CALC_f64Evaluation+0x4fe>
    3bda:	cd 53       	subi	r28, 0x3D	; 61
    3bdc:	de 4f       	sbci	r29, 0xFE	; 254
    3bde:	a8 81       	ld	r26, Y
    3be0:	b9 81       	ldd	r27, Y+1	; 0x01
    3be2:	c3 5c       	subi	r28, 0xC3	; 195
    3be4:	d1 40       	sbci	r29, 0x01	; 1
    3be6:	af 32       	cpi	r26, 0x2F	; 47
    3be8:	b1 05       	cpc	r27, r1
    3bea:	61 f1       	breq	.+88     	; 0x3c44 <CALC_f64Evaluation+0x542>
    3bec:	cd 53       	subi	r28, 0x3D	; 61
    3bee:	de 4f       	sbci	r29, 0xFE	; 254
    3bf0:	28 81       	ld	r18, Y
    3bf2:	39 81       	ldd	r19, Y+1	; 0x01
    3bf4:	c3 5c       	subi	r28, 0xC3	; 195
    3bf6:	d1 40       	sbci	r29, 0x01	; 1
    3bf8:	2a 32       	cpi	r18, 0x2A	; 42
    3bfa:	31 05       	cpc	r19, r1
    3bfc:	91 f0       	breq	.+36     	; 0x3c22 <CALC_f64Evaluation+0x520>
    3bfe:	4c c0       	rjmp	.+152    	; 0x3c98 <CALC_f64Evaluation+0x596>
			{
			case '+':
			result = op1 + op2;
    3c00:	6d 81       	ldd	r22, Y+5	; 0x05
    3c02:	7e 81       	ldd	r23, Y+6	; 0x06
    3c04:	8f 81       	ldd	r24, Y+7	; 0x07
    3c06:	98 85       	ldd	r25, Y+8	; 0x08
    3c08:	29 85       	ldd	r18, Y+9	; 0x09
    3c0a:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c0c:	4b 85       	ldd	r20, Y+11	; 0x0b
    3c0e:	5c 85       	ldd	r21, Y+12	; 0x0c
    3c10:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    3c14:	dc 01       	movw	r26, r24
    3c16:	cb 01       	movw	r24, r22
    3c18:	89 83       	std	Y+1, r24	; 0x01
    3c1a:	9a 83       	std	Y+2, r25	; 0x02
    3c1c:	ab 83       	std	Y+3, r26	; 0x03
    3c1e:	bc 83       	std	Y+4, r27	; 0x04
    3c20:	3b c0       	rjmp	.+118    	; 0x3c98 <CALC_f64Evaluation+0x596>
			break;
			case '*':
				result = op1 * op2;
    3c22:	6d 81       	ldd	r22, Y+5	; 0x05
    3c24:	7e 81       	ldd	r23, Y+6	; 0x06
    3c26:	8f 81       	ldd	r24, Y+7	; 0x07
    3c28:	98 85       	ldd	r25, Y+8	; 0x08
    3c2a:	29 85       	ldd	r18, Y+9	; 0x09
    3c2c:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c2e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3c30:	5c 85       	ldd	r21, Y+12	; 0x0c
    3c32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c36:	dc 01       	movw	r26, r24
    3c38:	cb 01       	movw	r24, r22
    3c3a:	89 83       	std	Y+1, r24	; 0x01
    3c3c:	9a 83       	std	Y+2, r25	; 0x02
    3c3e:	ab 83       	std	Y+3, r26	; 0x03
    3c40:	bc 83       	std	Y+4, r27	; 0x04
    3c42:	2a c0       	rjmp	.+84     	; 0x3c98 <CALC_f64Evaluation+0x596>
				break;
			case '/':
				if(0 != op2)
    3c44:	69 85       	ldd	r22, Y+9	; 0x09
    3c46:	7a 85       	ldd	r23, Y+10	; 0x0a
    3c48:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	40 e0       	ldi	r20, 0x00	; 0
    3c52:	50 e0       	ldi	r21, 0x00	; 0
    3c54:	0e 94 bd 03 	call	0x77a	; 0x77a <__nesf2>
    3c58:	88 23       	and	r24, r24
    3c5a:	89 f0       	breq	.+34     	; 0x3c7e <CALC_f64Evaluation+0x57c>
					result = op1 / op2;
    3c5c:	6d 81       	ldd	r22, Y+5	; 0x05
    3c5e:	7e 81       	ldd	r23, Y+6	; 0x06
    3c60:	8f 81       	ldd	r24, Y+7	; 0x07
    3c62:	98 85       	ldd	r25, Y+8	; 0x08
    3c64:	29 85       	ldd	r18, Y+9	; 0x09
    3c66:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c68:	4b 85       	ldd	r20, Y+11	; 0x0b
    3c6a:	5c 85       	ldd	r21, Y+12	; 0x0c
    3c6c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3c70:	dc 01       	movw	r26, r24
    3c72:	cb 01       	movw	r24, r22
    3c74:	89 83       	std	Y+1, r24	; 0x01
    3c76:	9a 83       	std	Y+2, r25	; 0x02
    3c78:	ab 83       	std	Y+3, r26	; 0x03
    3c7a:	bc 83       	std	Y+4, r27	; 0x04
    3c7c:	0d c0       	rjmp	.+26     	; 0x3c98 <CALC_f64Evaluation+0x596>
				else
					return 0xffff;// divided by zero exception
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	9f ef       	ldi	r25, 0xFF	; 255
    3c82:	af e7       	ldi	r26, 0x7F	; 127
    3c84:	b7 e4       	ldi	r27, 0x47	; 71
    3c86:	c1 54       	subi	r28, 0x41	; 65
    3c88:	de 4f       	sbci	r29, 0xFE	; 254
    3c8a:	88 83       	st	Y, r24
    3c8c:	99 83       	std	Y+1, r25	; 0x01
    3c8e:	aa 83       	std	Y+2, r26	; 0x02
    3c90:	bb 83       	std	Y+3, r27	; 0x03
    3c92:	cf 5b       	subi	r28, 0xBF	; 191
    3c94:	d1 40       	sbci	r29, 0x01	; 1
    3c96:	2b c0       	rjmp	.+86     	; 0x3cee <CALC_f64Evaluation+0x5ec>
				break;

			}
			STACK_VidPushDouble(&stack, result);
    3c98:	ce 01       	movw	r24, r28
    3c9a:	8b 96       	adiw	r24, 0x2b	; 43
    3c9c:	29 81       	ldd	r18, Y+1	; 0x01
    3c9e:	3a 81       	ldd	r19, Y+2	; 0x02
    3ca0:	4b 81       	ldd	r20, Y+3	; 0x03
    3ca2:	5c 81       	ldd	r21, Y+4	; 0x04
    3ca4:	ba 01       	movw	r22, r20
    3ca6:	a9 01       	movw	r20, r18
    3ca8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <STACK_VidPushDouble>
			i++;
    3cac:	89 a5       	ldd	r24, Y+41	; 0x29
    3cae:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cb0:	01 96       	adiw	r24, 0x01	; 1
    3cb2:	9a a7       	std	Y+42, r25	; 0x2a
    3cb4:	89 a7       	std	Y+41, r24	; 0x29
{
	struct DoubleStack stack;
	stack.top = -1;
	int i = 0;

	while (Copy_Pu8Postfix[i] != '\0') {
    3cb6:	29 a5       	ldd	r18, Y+41	; 0x29
    3cb8:	3a a5       	ldd	r19, Y+42	; 0x2a
    3cba:	fe 01       	movw	r30, r28
    3cbc:	e3 54       	subi	r30, 0x43	; 67
    3cbe:	fe 4f       	sbci	r31, 0xFE	; 254
    3cc0:	80 81       	ld	r24, Z
    3cc2:	91 81       	ldd	r25, Z+1	; 0x01
    3cc4:	fc 01       	movw	r30, r24
    3cc6:	e2 0f       	add	r30, r18
    3cc8:	f3 1f       	adc	r31, r19
    3cca:	80 81       	ld	r24, Z
    3ccc:	88 23       	and	r24, r24
    3cce:	09 f0       	breq	.+2      	; 0x3cd2 <CALC_f64Evaluation+0x5d0>
    3cd0:	33 cd       	rjmp	.-1434   	; 0x3738 <CALC_f64Evaluation+0x36>
			STACK_VidPushDouble(&stack, result);
			i++;
		}
	}

	return STACK_f64PopDouble(&stack); // The final result is the only element left in the stack
    3cd2:	ce 01       	movw	r24, r28
    3cd4:	8b 96       	adiw	r24, 0x2b	; 43
    3cd6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <STACK_f64PopDouble>
    3cda:	dc 01       	movw	r26, r24
    3cdc:	cb 01       	movw	r24, r22
    3cde:	c1 54       	subi	r28, 0x41	; 65
    3ce0:	de 4f       	sbci	r29, 0xFE	; 254
    3ce2:	88 83       	st	Y, r24
    3ce4:	99 83       	std	Y+1, r25	; 0x01
    3ce6:	aa 83       	std	Y+2, r26	; 0x02
    3ce8:	bb 83       	std	Y+3, r27	; 0x03
    3cea:	cf 5b       	subi	r28, 0xBF	; 191
    3cec:	d1 40       	sbci	r29, 0x01	; 1
    3cee:	c1 54       	subi	r28, 0x41	; 65
    3cf0:	de 4f       	sbci	r29, 0xFE	; 254
    3cf2:	88 81       	ld	r24, Y
    3cf4:	99 81       	ldd	r25, Y+1	; 0x01
    3cf6:	aa 81       	ldd	r26, Y+2	; 0x02
    3cf8:	bb 81       	ldd	r27, Y+3	; 0x03
    3cfa:	cf 5b       	subi	r28, 0xBF	; 191
    3cfc:	d1 40       	sbci	r29, 0x01	; 1
}
    3cfe:	bc 01       	movw	r22, r24
    3d00:	cd 01       	movw	r24, r26
    3d02:	cc 53       	subi	r28, 0x3C	; 60
    3d04:	de 4f       	sbci	r29, 0xFE	; 254
    3d06:	0f b6       	in	r0, 0x3f	; 63
    3d08:	f8 94       	cli
    3d0a:	de bf       	out	0x3e, r29	; 62
    3d0c:	0f be       	out	0x3f, r0	; 63
    3d0e:	cd bf       	out	0x3d, r28	; 61
    3d10:	cf 91       	pop	r28
    3d12:	df 91       	pop	r29
    3d14:	1f 91       	pop	r17
    3d16:	0f 91       	pop	r16
    3d18:	ff 90       	pop	r15
    3d1a:	ef 90       	pop	r14
    3d1c:	08 95       	ret

00003d1e <Print_vidResult>:



void Print_vidResult(f32 Copy_f32Result)
{
    3d1e:	df 93       	push	r29
    3d20:	cf 93       	push	r28
    3d22:	cd b7       	in	r28, 0x3d	; 61
    3d24:	de b7       	in	r29, 0x3e	; 62
    3d26:	2a 97       	sbiw	r28, 0x0a	; 10
    3d28:	0f b6       	in	r0, 0x3f	; 63
    3d2a:	f8 94       	cli
    3d2c:	de bf       	out	0x3e, r29	; 62
    3d2e:	0f be       	out	0x3f, r0	; 63
    3d30:	cd bf       	out	0x3d, r28	; 61
    3d32:	6f 83       	std	Y+7, r22	; 0x07
    3d34:	78 87       	std	Y+8, r23	; 0x08
    3d36:	89 87       	std	Y+9, r24	; 0x09
    3d38:	9a 87       	std	Y+10, r25	; 0x0a
	u8 Local_u8count = 0;s32 Copy_s32Temp = (s32)Copy_f32Result;
    3d3a:	1e 82       	std	Y+6, r1	; 0x06
    3d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d3e:	78 85       	ldd	r23, Y+8	; 0x08
    3d40:	89 85       	ldd	r24, Y+9	; 0x09
    3d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d44:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	8a 83       	std	Y+2, r24	; 0x02
    3d4e:	9b 83       	std	Y+3, r25	; 0x03
    3d50:	ac 83       	std	Y+4, r26	; 0x04
    3d52:	bd 83       	std	Y+5, r27	; 0x05
	u8 nig_flag = 0;
    3d54:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_f32Result < 0)
    3d56:	6f 81       	ldd	r22, Y+7	; 0x07
    3d58:	78 85       	ldd	r23, Y+8	; 0x08
    3d5a:	89 85       	ldd	r24, Y+9	; 0x09
    3d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e0       	ldi	r20, 0x00	; 0
    3d64:	50 e0       	ldi	r21, 0x00	; 0
    3d66:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    3d6a:	88 23       	and	r24, r24
    3d6c:	2c f5       	brge	.+74     	; 0x3db8 <Print_vidResult+0x9a>
	{
		nig_flag++;
    3d6e:	89 81       	ldd	r24, Y+1	; 0x01
    3d70:	8f 5f       	subi	r24, 0xFF	; 255
    3d72:	89 83       	std	Y+1, r24	; 0x01
		Local_u8count++;
    3d74:	8e 81       	ldd	r24, Y+6	; 0x06
    3d76:	8f 5f       	subi	r24, 0xFF	; 255
    3d78:	8e 83       	std	Y+6, r24	; 0x06
		Copy_f32Result *= -1;
    3d7a:	8f 81       	ldd	r24, Y+7	; 0x07
    3d7c:	98 85       	ldd	r25, Y+8	; 0x08
    3d7e:	a9 85       	ldd	r26, Y+9	; 0x09
    3d80:	ba 85       	ldd	r27, Y+10	; 0x0a
    3d82:	b0 58       	subi	r27, 0x80	; 128
    3d84:	8f 83       	std	Y+7, r24	; 0x07
    3d86:	98 87       	std	Y+8, r25	; 0x08
    3d88:	a9 87       	std	Y+9, r26	; 0x09
    3d8a:	ba 87       	std	Y+10, r27	; 0x0a
    3d8c:	15 c0       	rjmp	.+42     	; 0x3db8 <Print_vidResult+0x9a>
	}
	for(;Copy_s32Temp;)
	{
		Copy_s32Temp/=10;
    3d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d90:	9b 81       	ldd	r25, Y+3	; 0x03
    3d92:	ac 81       	ldd	r26, Y+4	; 0x04
    3d94:	bd 81       	ldd	r27, Y+5	; 0x05
    3d96:	2a e0       	ldi	r18, 0x0A	; 10
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	40 e0       	ldi	r20, 0x00	; 0
    3d9c:	50 e0       	ldi	r21, 0x00	; 0
    3d9e:	bc 01       	movw	r22, r24
    3da0:	cd 01       	movw	r24, r26
    3da2:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <__divmodsi4>
    3da6:	da 01       	movw	r26, r20
    3da8:	c9 01       	movw	r24, r18
    3daa:	8a 83       	std	Y+2, r24	; 0x02
    3dac:	9b 83       	std	Y+3, r25	; 0x03
    3dae:	ac 83       	std	Y+4, r26	; 0x04
    3db0:	bd 83       	std	Y+5, r27	; 0x05
		Local_u8count++;
    3db2:	8e 81       	ldd	r24, Y+6	; 0x06
    3db4:	8f 5f       	subi	r24, 0xFF	; 255
    3db6:	8e 83       	std	Y+6, r24	; 0x06
	{
		nig_flag++;
		Local_u8count++;
		Copy_f32Result *= -1;
	}
	for(;Copy_s32Temp;)
    3db8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dba:	9b 81       	ldd	r25, Y+3	; 0x03
    3dbc:	ac 81       	ldd	r26, Y+4	; 0x04
    3dbe:	bd 81       	ldd	r27, Y+5	; 0x05
    3dc0:	00 97       	sbiw	r24, 0x00	; 0
    3dc2:	a1 05       	cpc	r26, r1
    3dc4:	b1 05       	cpc	r27, r1
    3dc6:	19 f7       	brne	.-58     	; 0x3d8e <Print_vidResult+0x70>
	{
		Copy_s32Temp/=10;
		Local_u8count++;
	}
	if(Copy_f32Result - (s32)Copy_f32Result)
    3dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    3dca:	78 85       	ldd	r23, Y+8	; 0x08
    3dcc:	89 85       	ldd	r24, Y+9	; 0x09
    3dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd0:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	cb 01       	movw	r24, r22
    3dd8:	bc 01       	movw	r22, r24
    3dda:	cd 01       	movw	r24, r26
    3ddc:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    3de0:	9b 01       	movw	r18, r22
    3de2:	ac 01       	movw	r20, r24
    3de4:	6f 81       	ldd	r22, Y+7	; 0x07
    3de6:	78 85       	ldd	r23, Y+8	; 0x08
    3de8:	89 85       	ldd	r24, Y+9	; 0x09
    3dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dec:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    3df0:	dc 01       	movw	r26, r24
    3df2:	cb 01       	movw	r24, r22
    3df4:	bc 01       	movw	r22, r24
    3df6:	cd 01       	movw	r24, r26
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	40 e0       	ldi	r20, 0x00	; 0
    3dfe:	50 e0       	ldi	r21, 0x00	; 0
    3e00:	0e 94 bd 03 	call	0x77a	; 0x77a <__nesf2>
    3e04:	88 23       	and	r24, r24
    3e06:	d1 f0       	breq	.+52     	; 0x3e3c <Print_vidResult+0x11e>
	{
		Local_u8count += 4;
    3e08:	8e 81       	ldd	r24, Y+6	; 0x06
    3e0a:	8c 5f       	subi	r24, 0xFC	; 252
    3e0c:	8e 83       	std	Y+6, r24	; 0x06
		LCD_enuSetCurser(17-Local_u8count,2);
    3e0e:	91 e1       	ldi	r25, 0x11	; 17
    3e10:	8e 81       	ldd	r24, Y+6	; 0x06
    3e12:	29 2f       	mov	r18, r25
    3e14:	28 1b       	sub	r18, r24
    3e16:	82 2f       	mov	r24, r18
    3e18:	62 e0       	ldi	r22, 0x02	; 2
    3e1a:	0e 94 46 13 	call	0x268c	; 0x268c <LCD_enuSetCurser>
		if(nig_flag)
    3e1e:	89 81       	ldd	r24, Y+1	; 0x01
    3e20:	88 23       	and	r24, r24
    3e22:	19 f0       	breq	.+6      	; 0x3e2a <Print_vidResult+0x10c>
			LCD_enuDispChar('-');
    3e24:	8d e2       	ldi	r24, 0x2D	; 45
    3e26:	0e 94 29 15 	call	0x2a52	; 0x2a52 <LCD_enuDispChar>
		//LCD_enuDispINTNumber((s32)Copy_f32Result);
		LCD_enuDispFloatNumber(Copy_f32Result);
    3e2a:	8f 81       	ldd	r24, Y+7	; 0x07
    3e2c:	98 85       	ldd	r25, Y+8	; 0x08
    3e2e:	a9 85       	ldd	r26, Y+9	; 0x09
    3e30:	ba 85       	ldd	r27, Y+10	; 0x0a
    3e32:	bc 01       	movw	r22, r24
    3e34:	cd 01       	movw	r24, r26
    3e36:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <LCD_enuDispFloatNumber>
    3e3a:	1a c0       	rjmp	.+52     	; 0x3e70 <Print_vidResult+0x152>
	}
	else
	{
		LCD_enuSetCurser(17-Local_u8count,2);
    3e3c:	91 e1       	ldi	r25, 0x11	; 17
    3e3e:	8e 81       	ldd	r24, Y+6	; 0x06
    3e40:	29 2f       	mov	r18, r25
    3e42:	28 1b       	sub	r18, r24
    3e44:	82 2f       	mov	r24, r18
    3e46:	62 e0       	ldi	r22, 0x02	; 2
    3e48:	0e 94 46 13 	call	0x268c	; 0x268c <LCD_enuSetCurser>
		if(nig_flag)
    3e4c:	89 81       	ldd	r24, Y+1	; 0x01
    3e4e:	88 23       	and	r24, r24
    3e50:	19 f0       	breq	.+6      	; 0x3e58 <Print_vidResult+0x13a>
			LCD_enuDispChar('-');
    3e52:	8d e2       	ldi	r24, 0x2D	; 45
    3e54:	0e 94 29 15 	call	0x2a52	; 0x2a52 <LCD_enuDispChar>
		LCD_enuDispINTNumber((s32)Copy_f32Result);
    3e58:	6f 81       	ldd	r22, Y+7	; 0x07
    3e5a:	78 85       	ldd	r23, Y+8	; 0x08
    3e5c:	89 85       	ldd	r24, Y+9	; 0x09
    3e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e60:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	bc 01       	movw	r22, r24
    3e6a:	cd 01       	movw	r24, r26
    3e6c:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_enuDispINTNumber>
	}
}
    3e70:	2a 96       	adiw	r28, 0x0a	; 10
    3e72:	0f b6       	in	r0, 0x3f	; 63
    3e74:	f8 94       	cli
    3e76:	de bf       	out	0x3e, r29	; 62
    3e78:	0f be       	out	0x3f, r0	; 63
    3e7a:	cd bf       	out	0x3d, r28	; 61
    3e7c:	cf 91       	pop	r28
    3e7e:	df 91       	pop	r29
    3e80:	08 95       	ret

00003e82 <main>:
#include"../HAL/KEYPAD/KYPAD_Config.h"
#include"CALC_int.h"
#include<util/delay.h>

int main()
{
    3e82:	df 93       	push	r29
    3e84:	cf 93       	push	r28
    3e86:	cd b7       	in	r28, 0x3d	; 61
    3e88:	de b7       	in	r29, 0x3e	; 62
    3e8a:	c6 50       	subi	r28, 0x06	; 6
    3e8c:	d1 40       	sbci	r29, 0x01	; 1
    3e8e:	0f b6       	in	r0, 0x3f	; 63
    3e90:	f8 94       	cli
    3e92:	de bf       	out	0x3e, r29	; 62
    3e94:	0f be       	out	0x3f, r0	; 63
    3e96:	cd bf       	out	0x3d, r28	; 61
	LCD_enuINIT();
    3e98:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_enuINIT>
	KYPAD_enuINIT();
    3e9c:	0e 94 49 18 	call	0x3092	; 0x3092 <KYPAD_enuINIT>
	LCD_enuSetCurser(4,1);
    3ea0:	84 e0       	ldi	r24, 0x04	; 4
    3ea2:	61 e0       	ldi	r22, 0x01	; 1
    3ea4:	0e 94 46 13 	call	0x268c	; 0x268c <LCD_enuSetCurser>
	LCD_enuDispString("Welcome");
    3ea8:	82 e6       	ldi	r24, 0x62	; 98
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_enuDispString>
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	a8 e4       	ldi	r26, 0x48	; 72
    3eb6:	b3 e4       	ldi	r27, 0x43	; 67
    3eb8:	8d ab       	std	Y+53, r24	; 0x35
    3eba:	9e ab       	std	Y+54, r25	; 0x36
    3ebc:	af ab       	std	Y+55, r26	; 0x37
    3ebe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec0:	6d a9       	ldd	r22, Y+53	; 0x35
    3ec2:	7e a9       	ldd	r23, Y+54	; 0x36
    3ec4:	8f a9       	ldd	r24, Y+55	; 0x37
    3ec6:	98 ad       	ldd	r25, Y+56	; 0x38
    3ec8:	20 e0       	ldi	r18, 0x00	; 0
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	4a e7       	ldi	r20, 0x7A	; 122
    3ece:	53 e4       	ldi	r21, 0x43	; 67
    3ed0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ed4:	dc 01       	movw	r26, r24
    3ed6:	cb 01       	movw	r24, r22
    3ed8:	89 ab       	std	Y+49, r24	; 0x31
    3eda:	9a ab       	std	Y+50, r25	; 0x32
    3edc:	ab ab       	std	Y+51, r26	; 0x33
    3ede:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3ee0:	69 a9       	ldd	r22, Y+49	; 0x31
    3ee2:	7a a9       	ldd	r23, Y+50	; 0x32
    3ee4:	8b a9       	ldd	r24, Y+51	; 0x33
    3ee6:	9c a9       	ldd	r25, Y+52	; 0x34
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	40 e8       	ldi	r20, 0x80	; 128
    3eee:	5f e3       	ldi	r21, 0x3F	; 63
    3ef0:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    3ef4:	88 23       	and	r24, r24
    3ef6:	2c f4       	brge	.+10     	; 0x3f02 <main+0x80>
		__ticks = 1;
    3ef8:	81 e0       	ldi	r24, 0x01	; 1
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	98 ab       	std	Y+48, r25	; 0x30
    3efe:	8f a7       	std	Y+47, r24	; 0x2f
    3f00:	3f c0       	rjmp	.+126    	; 0x3f80 <main+0xfe>
	else if (__tmp > 65535)
    3f02:	69 a9       	ldd	r22, Y+49	; 0x31
    3f04:	7a a9       	ldd	r23, Y+50	; 0x32
    3f06:	8b a9       	ldd	r24, Y+51	; 0x33
    3f08:	9c a9       	ldd	r25, Y+52	; 0x34
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	3f ef       	ldi	r19, 0xFF	; 255
    3f0e:	4f e7       	ldi	r20, 0x7F	; 127
    3f10:	57 e4       	ldi	r21, 0x47	; 71
    3f12:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    3f16:	18 16       	cp	r1, r24
    3f18:	4c f5       	brge	.+82     	; 0x3f6c <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f1a:	6d a9       	ldd	r22, Y+53	; 0x35
    3f1c:	7e a9       	ldd	r23, Y+54	; 0x36
    3f1e:	8f a9       	ldd	r24, Y+55	; 0x37
    3f20:	98 ad       	ldd	r25, Y+56	; 0x38
    3f22:	20 e0       	ldi	r18, 0x00	; 0
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	40 e2       	ldi	r20, 0x20	; 32
    3f28:	51 e4       	ldi	r21, 0x41	; 65
    3f2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f2e:	dc 01       	movw	r26, r24
    3f30:	cb 01       	movw	r24, r22
    3f32:	bc 01       	movw	r22, r24
    3f34:	cd 01       	movw	r24, r26
    3f36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f3a:	dc 01       	movw	r26, r24
    3f3c:	cb 01       	movw	r24, r22
    3f3e:	98 ab       	std	Y+48, r25	; 0x30
    3f40:	8f a7       	std	Y+47, r24	; 0x2f
    3f42:	0f c0       	rjmp	.+30     	; 0x3f62 <main+0xe0>
    3f44:	89 e1       	ldi	r24, 0x19	; 25
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	9e a7       	std	Y+46, r25	; 0x2e
    3f4a:	8d a7       	std	Y+45, r24	; 0x2d
    3f4c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f4e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f50:	01 97       	sbiw	r24, 0x01	; 1
    3f52:	f1 f7       	brne	.-4      	; 0x3f50 <main+0xce>
    3f54:	9e a7       	std	Y+46, r25	; 0x2e
    3f56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f58:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f5a:	98 a9       	ldd	r25, Y+48	; 0x30
    3f5c:	01 97       	sbiw	r24, 0x01	; 1
    3f5e:	98 ab       	std	Y+48, r25	; 0x30
    3f60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f62:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f64:	98 a9       	ldd	r25, Y+48	; 0x30
    3f66:	00 97       	sbiw	r24, 0x00	; 0
    3f68:	69 f7       	brne	.-38     	; 0x3f44 <main+0xc2>
    3f6a:	14 c0       	rjmp	.+40     	; 0x3f94 <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f6c:	69 a9       	ldd	r22, Y+49	; 0x31
    3f6e:	7a a9       	ldd	r23, Y+50	; 0x32
    3f70:	8b a9       	ldd	r24, Y+51	; 0x33
    3f72:	9c a9       	ldd	r25, Y+52	; 0x34
    3f74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f78:	dc 01       	movw	r26, r24
    3f7a:	cb 01       	movw	r24, r22
    3f7c:	98 ab       	std	Y+48, r25	; 0x30
    3f7e:	8f a7       	std	Y+47, r24	; 0x2f
    3f80:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f82:	98 a9       	ldd	r25, Y+48	; 0x30
    3f84:	9c a7       	std	Y+44, r25	; 0x2c
    3f86:	8b a7       	std	Y+43, r24	; 0x2b
    3f88:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f8c:	01 97       	sbiw	r24, 0x01	; 1
    3f8e:	f1 f7       	brne	.-4      	; 0x3f8c <main+0x10a>
    3f90:	9c a7       	std	Y+44, r25	; 0x2c
    3f92:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);
	LCD_enuDispString(".");
    3f94:	8a e6       	ldi	r24, 0x6A	; 106
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_enuDispString>
    3f9c:	80 e0       	ldi	r24, 0x00	; 0
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	a8 e4       	ldi	r26, 0x48	; 72
    3fa2:	b3 e4       	ldi	r27, 0x43	; 67
    3fa4:	8f a3       	std	Y+39, r24	; 0x27
    3fa6:	98 a7       	std	Y+40, r25	; 0x28
    3fa8:	a9 a7       	std	Y+41, r26	; 0x29
    3faa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fac:	6f a1       	ldd	r22, Y+39	; 0x27
    3fae:	78 a5       	ldd	r23, Y+40	; 0x28
    3fb0:	89 a5       	ldd	r24, Y+41	; 0x29
    3fb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	4a e7       	ldi	r20, 0x7A	; 122
    3fba:	53 e4       	ldi	r21, 0x43	; 67
    3fbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3fc0:	dc 01       	movw	r26, r24
    3fc2:	cb 01       	movw	r24, r22
    3fc4:	8b a3       	std	Y+35, r24	; 0x23
    3fc6:	9c a3       	std	Y+36, r25	; 0x24
    3fc8:	ad a3       	std	Y+37, r26	; 0x25
    3fca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3fcc:	6b a1       	ldd	r22, Y+35	; 0x23
    3fce:	7c a1       	ldd	r23, Y+36	; 0x24
    3fd0:	8d a1       	ldd	r24, Y+37	; 0x25
    3fd2:	9e a1       	ldd	r25, Y+38	; 0x26
    3fd4:	20 e0       	ldi	r18, 0x00	; 0
    3fd6:	30 e0       	ldi	r19, 0x00	; 0
    3fd8:	40 e8       	ldi	r20, 0x80	; 128
    3fda:	5f e3       	ldi	r21, 0x3F	; 63
    3fdc:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    3fe0:	88 23       	and	r24, r24
    3fe2:	2c f4       	brge	.+10     	; 0x3fee <main+0x16c>
		__ticks = 1;
    3fe4:	81 e0       	ldi	r24, 0x01	; 1
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	9a a3       	std	Y+34, r25	; 0x22
    3fea:	89 a3       	std	Y+33, r24	; 0x21
    3fec:	3f c0       	rjmp	.+126    	; 0x406c <main+0x1ea>
	else if (__tmp > 65535)
    3fee:	6b a1       	ldd	r22, Y+35	; 0x23
    3ff0:	7c a1       	ldd	r23, Y+36	; 0x24
    3ff2:	8d a1       	ldd	r24, Y+37	; 0x25
    3ff4:	9e a1       	ldd	r25, Y+38	; 0x26
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	3f ef       	ldi	r19, 0xFF	; 255
    3ffa:	4f e7       	ldi	r20, 0x7F	; 127
    3ffc:	57 e4       	ldi	r21, 0x47	; 71
    3ffe:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    4002:	18 16       	cp	r1, r24
    4004:	4c f5       	brge	.+82     	; 0x4058 <main+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4006:	6f a1       	ldd	r22, Y+39	; 0x27
    4008:	78 a5       	ldd	r23, Y+40	; 0x28
    400a:	89 a5       	ldd	r24, Y+41	; 0x29
    400c:	9a a5       	ldd	r25, Y+42	; 0x2a
    400e:	20 e0       	ldi	r18, 0x00	; 0
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	40 e2       	ldi	r20, 0x20	; 32
    4014:	51 e4       	ldi	r21, 0x41	; 65
    4016:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    401a:	dc 01       	movw	r26, r24
    401c:	cb 01       	movw	r24, r22
    401e:	bc 01       	movw	r22, r24
    4020:	cd 01       	movw	r24, r26
    4022:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4026:	dc 01       	movw	r26, r24
    4028:	cb 01       	movw	r24, r22
    402a:	9a a3       	std	Y+34, r25	; 0x22
    402c:	89 a3       	std	Y+33, r24	; 0x21
    402e:	0f c0       	rjmp	.+30     	; 0x404e <main+0x1cc>
    4030:	89 e1       	ldi	r24, 0x19	; 25
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	98 a3       	std	Y+32, r25	; 0x20
    4036:	8f 8f       	std	Y+31, r24	; 0x1f
    4038:	8f 8d       	ldd	r24, Y+31	; 0x1f
    403a:	98 a1       	ldd	r25, Y+32	; 0x20
    403c:	01 97       	sbiw	r24, 0x01	; 1
    403e:	f1 f7       	brne	.-4      	; 0x403c <main+0x1ba>
    4040:	98 a3       	std	Y+32, r25	; 0x20
    4042:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4044:	89 a1       	ldd	r24, Y+33	; 0x21
    4046:	9a a1       	ldd	r25, Y+34	; 0x22
    4048:	01 97       	sbiw	r24, 0x01	; 1
    404a:	9a a3       	std	Y+34, r25	; 0x22
    404c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    404e:	89 a1       	ldd	r24, Y+33	; 0x21
    4050:	9a a1       	ldd	r25, Y+34	; 0x22
    4052:	00 97       	sbiw	r24, 0x00	; 0
    4054:	69 f7       	brne	.-38     	; 0x4030 <main+0x1ae>
    4056:	14 c0       	rjmp	.+40     	; 0x4080 <main+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4058:	6b a1       	ldd	r22, Y+35	; 0x23
    405a:	7c a1       	ldd	r23, Y+36	; 0x24
    405c:	8d a1       	ldd	r24, Y+37	; 0x25
    405e:	9e a1       	ldd	r25, Y+38	; 0x26
    4060:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4064:	dc 01       	movw	r26, r24
    4066:	cb 01       	movw	r24, r22
    4068:	9a a3       	std	Y+34, r25	; 0x22
    406a:	89 a3       	std	Y+33, r24	; 0x21
    406c:	89 a1       	ldd	r24, Y+33	; 0x21
    406e:	9a a1       	ldd	r25, Y+34	; 0x22
    4070:	9e 8f       	std	Y+30, r25	; 0x1e
    4072:	8d 8f       	std	Y+29, r24	; 0x1d
    4074:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4076:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4078:	01 97       	sbiw	r24, 0x01	; 1
    407a:	f1 f7       	brne	.-4      	; 0x4078 <main+0x1f6>
    407c:	9e 8f       	std	Y+30, r25	; 0x1e
    407e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);
	LCD_enuDispString(".");
    4080:	8a e6       	ldi	r24, 0x6A	; 106
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_enuDispString>
    4088:	80 e0       	ldi	r24, 0x00	; 0
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	a8 e4       	ldi	r26, 0x48	; 72
    408e:	b3 e4       	ldi	r27, 0x43	; 67
    4090:	89 8f       	std	Y+25, r24	; 0x19
    4092:	9a 8f       	std	Y+26, r25	; 0x1a
    4094:	ab 8f       	std	Y+27, r26	; 0x1b
    4096:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4098:	69 8d       	ldd	r22, Y+25	; 0x19
    409a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    409c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    409e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	4a e7       	ldi	r20, 0x7A	; 122
    40a6:	53 e4       	ldi	r21, 0x43	; 67
    40a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	8d 8b       	std	Y+21, r24	; 0x15
    40b2:	9e 8b       	std	Y+22, r25	; 0x16
    40b4:	af 8b       	std	Y+23, r26	; 0x17
    40b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    40b8:	6d 89       	ldd	r22, Y+21	; 0x15
    40ba:	7e 89       	ldd	r23, Y+22	; 0x16
    40bc:	8f 89       	ldd	r24, Y+23	; 0x17
    40be:	98 8d       	ldd	r25, Y+24	; 0x18
    40c0:	20 e0       	ldi	r18, 0x00	; 0
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	40 e8       	ldi	r20, 0x80	; 128
    40c6:	5f e3       	ldi	r21, 0x3F	; 63
    40c8:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    40cc:	88 23       	and	r24, r24
    40ce:	2c f4       	brge	.+10     	; 0x40da <main+0x258>
		__ticks = 1;
    40d0:	81 e0       	ldi	r24, 0x01	; 1
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	9c 8b       	std	Y+20, r25	; 0x14
    40d6:	8b 8b       	std	Y+19, r24	; 0x13
    40d8:	3f c0       	rjmp	.+126    	; 0x4158 <main+0x2d6>
	else if (__tmp > 65535)
    40da:	6d 89       	ldd	r22, Y+21	; 0x15
    40dc:	7e 89       	ldd	r23, Y+22	; 0x16
    40de:	8f 89       	ldd	r24, Y+23	; 0x17
    40e0:	98 8d       	ldd	r25, Y+24	; 0x18
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	3f ef       	ldi	r19, 0xFF	; 255
    40e6:	4f e7       	ldi	r20, 0x7F	; 127
    40e8:	57 e4       	ldi	r21, 0x47	; 71
    40ea:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    40ee:	18 16       	cp	r1, r24
    40f0:	4c f5       	brge	.+82     	; 0x4144 <main+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40f2:	69 8d       	ldd	r22, Y+25	; 0x19
    40f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40fa:	20 e0       	ldi	r18, 0x00	; 0
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	40 e2       	ldi	r20, 0x20	; 32
    4100:	51 e4       	ldi	r21, 0x41	; 65
    4102:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	bc 01       	movw	r22, r24
    410c:	cd 01       	movw	r24, r26
    410e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4112:	dc 01       	movw	r26, r24
    4114:	cb 01       	movw	r24, r22
    4116:	9c 8b       	std	Y+20, r25	; 0x14
    4118:	8b 8b       	std	Y+19, r24	; 0x13
    411a:	0f c0       	rjmp	.+30     	; 0x413a <main+0x2b8>
    411c:	89 e1       	ldi	r24, 0x19	; 25
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	9a 8b       	std	Y+18, r25	; 0x12
    4122:	89 8b       	std	Y+17, r24	; 0x11
    4124:	89 89       	ldd	r24, Y+17	; 0x11
    4126:	9a 89       	ldd	r25, Y+18	; 0x12
    4128:	01 97       	sbiw	r24, 0x01	; 1
    412a:	f1 f7       	brne	.-4      	; 0x4128 <main+0x2a6>
    412c:	9a 8b       	std	Y+18, r25	; 0x12
    412e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4130:	8b 89       	ldd	r24, Y+19	; 0x13
    4132:	9c 89       	ldd	r25, Y+20	; 0x14
    4134:	01 97       	sbiw	r24, 0x01	; 1
    4136:	9c 8b       	std	Y+20, r25	; 0x14
    4138:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    413a:	8b 89       	ldd	r24, Y+19	; 0x13
    413c:	9c 89       	ldd	r25, Y+20	; 0x14
    413e:	00 97       	sbiw	r24, 0x00	; 0
    4140:	69 f7       	brne	.-38     	; 0x411c <main+0x29a>
    4142:	14 c0       	rjmp	.+40     	; 0x416c <main+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4144:	6d 89       	ldd	r22, Y+21	; 0x15
    4146:	7e 89       	ldd	r23, Y+22	; 0x16
    4148:	8f 89       	ldd	r24, Y+23	; 0x17
    414a:	98 8d       	ldd	r25, Y+24	; 0x18
    414c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	9c 8b       	std	Y+20, r25	; 0x14
    4156:	8b 8b       	std	Y+19, r24	; 0x13
    4158:	8b 89       	ldd	r24, Y+19	; 0x13
    415a:	9c 89       	ldd	r25, Y+20	; 0x14
    415c:	98 8b       	std	Y+16, r25	; 0x10
    415e:	8f 87       	std	Y+15, r24	; 0x0f
    4160:	8f 85       	ldd	r24, Y+15	; 0x0f
    4162:	98 89       	ldd	r25, Y+16	; 0x10
    4164:	01 97       	sbiw	r24, 0x01	; 1
    4166:	f1 f7       	brne	.-4      	; 0x4164 <main+0x2e2>
    4168:	98 8b       	std	Y+16, r25	; 0x10
    416a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	LCD_enuDispString(".");
    416c:	8a e6       	ldi	r24, 0x6A	; 106
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_enuDispString>
    4174:	80 e0       	ldi	r24, 0x00	; 0
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	aa e7       	ldi	r26, 0x7A	; 122
    417a:	b4 e4       	ldi	r27, 0x44	; 68
    417c:	8b 87       	std	Y+11, r24	; 0x0b
    417e:	9c 87       	std	Y+12, r25	; 0x0c
    4180:	ad 87       	std	Y+13, r26	; 0x0d
    4182:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4184:	6b 85       	ldd	r22, Y+11	; 0x0b
    4186:	7c 85       	ldd	r23, Y+12	; 0x0c
    4188:	8d 85       	ldd	r24, Y+13	; 0x0d
    418a:	9e 85       	ldd	r25, Y+14	; 0x0e
    418c:	20 e0       	ldi	r18, 0x00	; 0
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	4a e7       	ldi	r20, 0x7A	; 122
    4192:	53 e4       	ldi	r21, 0x43	; 67
    4194:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4198:	dc 01       	movw	r26, r24
    419a:	cb 01       	movw	r24, r22
    419c:	8f 83       	std	Y+7, r24	; 0x07
    419e:	98 87       	std	Y+8, r25	; 0x08
    41a0:	a9 87       	std	Y+9, r26	; 0x09
    41a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41a4:	6f 81       	ldd	r22, Y+7	; 0x07
    41a6:	78 85       	ldd	r23, Y+8	; 0x08
    41a8:	89 85       	ldd	r24, Y+9	; 0x09
    41aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ac:	20 e0       	ldi	r18, 0x00	; 0
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	40 e8       	ldi	r20, 0x80	; 128
    41b2:	5f e3       	ldi	r21, 0x3F	; 63
    41b4:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    41b8:	88 23       	and	r24, r24
    41ba:	2c f4       	brge	.+10     	; 0x41c6 <main+0x344>
		__ticks = 1;
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	9e 83       	std	Y+6, r25	; 0x06
    41c2:	8d 83       	std	Y+5, r24	; 0x05
    41c4:	3f c0       	rjmp	.+126    	; 0x4244 <main+0x3c2>
	else if (__tmp > 65535)
    41c6:	6f 81       	ldd	r22, Y+7	; 0x07
    41c8:	78 85       	ldd	r23, Y+8	; 0x08
    41ca:	89 85       	ldd	r24, Y+9	; 0x09
    41cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ce:	20 e0       	ldi	r18, 0x00	; 0
    41d0:	3f ef       	ldi	r19, 0xFF	; 255
    41d2:	4f e7       	ldi	r20, 0x7F	; 127
    41d4:	57 e4       	ldi	r21, 0x47	; 71
    41d6:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    41da:	18 16       	cp	r1, r24
    41dc:	4c f5       	brge	.+82     	; 0x4230 <main+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41de:	6b 85       	ldd	r22, Y+11	; 0x0b
    41e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    41e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    41e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    41e6:	20 e0       	ldi	r18, 0x00	; 0
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	40 e2       	ldi	r20, 0x20	; 32
    41ec:	51 e4       	ldi	r21, 0x41	; 65
    41ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    41f2:	dc 01       	movw	r26, r24
    41f4:	cb 01       	movw	r24, r22
    41f6:	bc 01       	movw	r22, r24
    41f8:	cd 01       	movw	r24, r26
    41fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    41fe:	dc 01       	movw	r26, r24
    4200:	cb 01       	movw	r24, r22
    4202:	9e 83       	std	Y+6, r25	; 0x06
    4204:	8d 83       	std	Y+5, r24	; 0x05
    4206:	0f c0       	rjmp	.+30     	; 0x4226 <main+0x3a4>
    4208:	89 e1       	ldi	r24, 0x19	; 25
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	9c 83       	std	Y+4, r25	; 0x04
    420e:	8b 83       	std	Y+3, r24	; 0x03
    4210:	8b 81       	ldd	r24, Y+3	; 0x03
    4212:	9c 81       	ldd	r25, Y+4	; 0x04
    4214:	01 97       	sbiw	r24, 0x01	; 1
    4216:	f1 f7       	brne	.-4      	; 0x4214 <main+0x392>
    4218:	9c 83       	std	Y+4, r25	; 0x04
    421a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    421c:	8d 81       	ldd	r24, Y+5	; 0x05
    421e:	9e 81       	ldd	r25, Y+6	; 0x06
    4220:	01 97       	sbiw	r24, 0x01	; 1
    4222:	9e 83       	std	Y+6, r25	; 0x06
    4224:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4226:	8d 81       	ldd	r24, Y+5	; 0x05
    4228:	9e 81       	ldd	r25, Y+6	; 0x06
    422a:	00 97       	sbiw	r24, 0x00	; 0
    422c:	69 f7       	brne	.-38     	; 0x4208 <main+0x386>
    422e:	14 c0       	rjmp	.+40     	; 0x4258 <main+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4230:	6f 81       	ldd	r22, Y+7	; 0x07
    4232:	78 85       	ldd	r23, Y+8	; 0x08
    4234:	89 85       	ldd	r24, Y+9	; 0x09
    4236:	9a 85       	ldd	r25, Y+10	; 0x0a
    4238:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    423c:	dc 01       	movw	r26, r24
    423e:	cb 01       	movw	r24, r22
    4240:	9e 83       	std	Y+6, r25	; 0x06
    4242:	8d 83       	std	Y+5, r24	; 0x05
    4244:	8d 81       	ldd	r24, Y+5	; 0x05
    4246:	9e 81       	ldd	r25, Y+6	; 0x06
    4248:	9a 83       	std	Y+2, r25	; 0x02
    424a:	89 83       	std	Y+1, r24	; 0x01
    424c:	89 81       	ldd	r24, Y+1	; 0x01
    424e:	9a 81       	ldd	r25, Y+2	; 0x02
    4250:	01 97       	sbiw	r24, 0x01	; 1
    4252:	f1 f7       	brne	.-4      	; 0x4250 <main+0x3ce>
    4254:	9a 83       	std	Y+2, r25	; 0x02
    4256:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_enuClearLCD();
    4258:	0e 94 60 14 	call	0x28c0	; 0x28c0 <LCD_enuClearLCD>
	LCD_enuSetCurser(1,1);
    425c:	81 e0       	ldi	r24, 0x01	; 1
    425e:	61 e0       	ldi	r22, 0x01	; 1
    4260:	0e 94 46 13 	call	0x268c	; 0x268c <LCD_enuSetCurser>
		u8 infix[100], postfix[100],Char,Local_u8Iterator = 0;
    4264:	1d ae       	std	Y+61, r1	; 0x3d
		while(1)
		{



			KYPAD_enuGetChar(&Char);
    4266:	ce 01       	movw	r24, r28
    4268:	8a 5f       	subi	r24, 0xFA	; 250
    426a:	9e 4f       	sbci	r25, 0xFE	; 254
    426c:	0e 94 a6 18 	call	0x314c	; 0x314c <KYPAD_enuGetChar>
			if(0xff != Char && '=' != Char && 'O' != Char)
    4270:	fe 01       	movw	r30, r28
    4272:	ea 5f       	subi	r30, 0xFA	; 250
    4274:	fe 4f       	sbci	r31, 0xFE	; 254
    4276:	80 81       	ld	r24, Z
    4278:	8f 3f       	cpi	r24, 0xFF	; 255
    427a:	11 f1       	breq	.+68     	; 0x42c0 <main+0x43e>
    427c:	fe 01       	movw	r30, r28
    427e:	ea 5f       	subi	r30, 0xFA	; 250
    4280:	fe 4f       	sbci	r31, 0xFE	; 254
    4282:	80 81       	ld	r24, Z
    4284:	8d 33       	cpi	r24, 0x3D	; 61
    4286:	e1 f0       	breq	.+56     	; 0x42c0 <main+0x43e>
    4288:	fe 01       	movw	r30, r28
    428a:	ea 5f       	subi	r30, 0xFA	; 250
    428c:	fe 4f       	sbci	r31, 0xFE	; 254
    428e:	80 81       	ld	r24, Z
    4290:	8f 34       	cpi	r24, 0x4F	; 79
    4292:	b1 f0       	breq	.+44     	; 0x42c0 <main+0x43e>
			{

				LCD_enuDispChar(Char);
    4294:	fe 01       	movw	r30, r28
    4296:	ea 5f       	subi	r30, 0xFA	; 250
    4298:	fe 4f       	sbci	r31, 0xFE	; 254
    429a:	80 81       	ld	r24, Z
    429c:	0e 94 29 15 	call	0x2a52	; 0x2a52 <LCD_enuDispChar>
				infix[Local_u8Iterator++] = Char;
    42a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    42a2:	28 2f       	mov	r18, r24
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	fe 01       	movw	r30, r28
    42a8:	ea 5f       	subi	r30, 0xFA	; 250
    42aa:	fe 4f       	sbci	r31, 0xFE	; 254
    42ac:	40 81       	ld	r20, Z
    42ae:	ce 01       	movw	r24, r28
    42b0:	ce 96       	adiw	r24, 0x3e	; 62
    42b2:	fc 01       	movw	r30, r24
    42b4:	e2 0f       	add	r30, r18
    42b6:	f3 1f       	adc	r31, r19
    42b8:	40 83       	st	Z, r20
    42ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    42bc:	8f 5f       	subi	r24, 0xFF	; 255
    42be:	8d af       	std	Y+61, r24	; 0x3d
			}
			infix[Local_u8Iterator] ='\0';
    42c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    42c2:	28 2f       	mov	r18, r24
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	ce 01       	movw	r24, r28
    42c8:	ce 96       	adiw	r24, 0x3e	; 62
    42ca:	fc 01       	movw	r30, r24
    42cc:	e2 0f       	add	r30, r18
    42ce:	f3 1f       	adc	r31, r19
    42d0:	10 82       	st	Z, r1
			if('=' == Char)
    42d2:	fe 01       	movw	r30, r28
    42d4:	ea 5f       	subi	r30, 0xFA	; 250
    42d6:	fe 4f       	sbci	r31, 0xFE	; 254
    42d8:	80 81       	ld	r24, Z
    42da:	8d 33       	cpi	r24, 0x3D	; 61
    42dc:	09 f0       	breq	.+2      	; 0x42e0 <main+0x45e>
    42de:	3e c0       	rjmp	.+124    	; 0x435c <main+0x4da>
			{
				// Convert infix to postfix
			    CALC_VidInToPost(infix, postfix);
    42e0:	ce 01       	movw	r24, r28
    42e2:	ce 96       	adiw	r24, 0x3e	; 62
    42e4:	9e 01       	movw	r18, r28
    42e6:	2e 55       	subi	r18, 0x5E	; 94
    42e8:	3f 4f       	sbci	r19, 0xFF	; 255
    42ea:	b9 01       	movw	r22, r18
    42ec:	0e 94 cf 19 	call	0x339e	; 0x339e <CALC_VidInToPost>
			    f64 result = CALC_f64Evaluation(postfix);
    42f0:	ce 01       	movw	r24, r28
    42f2:	8e 55       	subi	r24, 0x5E	; 94
    42f4:	9f 4f       	sbci	r25, 0xFF	; 255
    42f6:	0e 94 81 1b 	call	0x3702	; 0x3702 <CALC_f64Evaluation>
    42fa:	dc 01       	movw	r26, r24
    42fc:	cb 01       	movw	r24, r22
    42fe:	89 af       	std	Y+57, r24	; 0x39
    4300:	9a af       	std	Y+58, r25	; 0x3a
    4302:	ab af       	std	Y+59, r26	; 0x3b
    4304:	bc af       	std	Y+60, r27	; 0x3c
			    if(0xffff != result)
    4306:	69 ad       	ldd	r22, Y+57	; 0x39
    4308:	7a ad       	ldd	r23, Y+58	; 0x3a
    430a:	8b ad       	ldd	r24, Y+59	; 0x3b
    430c:	9c ad       	ldd	r25, Y+60	; 0x3c
    430e:	20 e0       	ldi	r18, 0x00	; 0
    4310:	3f ef       	ldi	r19, 0xFF	; 255
    4312:	4f e7       	ldi	r20, 0x7F	; 127
    4314:	57 e4       	ldi	r21, 0x47	; 71
    4316:	0e 94 bd 03 	call	0x77a	; 0x77a <__nesf2>
    431a:	88 23       	and	r24, r24
    431c:	49 f0       	breq	.+18     	; 0x4330 <main+0x4ae>
			       Print_vidResult(result);
    431e:	89 ad       	ldd	r24, Y+57	; 0x39
    4320:	9a ad       	ldd	r25, Y+58	; 0x3a
    4322:	ab ad       	ldd	r26, Y+59	; 0x3b
    4324:	bc ad       	ldd	r27, Y+60	; 0x3c
    4326:	bc 01       	movw	r22, r24
    4328:	cd 01       	movw	r24, r26
    432a:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <Print_vidResult>
    432e:	16 c0       	rjmp	.+44     	; 0x435c <main+0x4da>
			   else
			   {
				   LCD_enuClearLCD();
    4330:	0e 94 60 14 	call	0x28c0	; 0x28c0 <LCD_enuClearLCD>
				   LCD_enuSetCurser(1,1);
    4334:	81 e0       	ldi	r24, 0x01	; 1
    4336:	61 e0       	ldi	r22, 0x01	; 1
    4338:	0e 94 46 13 	call	0x268c	; 0x268c <LCD_enuSetCurser>
				   LCD_enuDispString("Math ERROR");
    433c:	8c e6       	ldi	r24, 0x6C	; 108
    433e:	90 e0       	ldi	r25, 0x00	; 0
    4340:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_enuDispString>
    4344:	05 c0       	rjmp	.+10     	; 0x4350 <main+0x4ce>
				   while('O'!=Char)
				   {
					   KYPAD_enuGetChar(&Char);
    4346:	ce 01       	movw	r24, r28
    4348:	8a 5f       	subi	r24, 0xFA	; 250
    434a:	9e 4f       	sbci	r25, 0xFE	; 254
    434c:	0e 94 a6 18 	call	0x314c	; 0x314c <KYPAD_enuGetChar>
			   else
			   {
				   LCD_enuClearLCD();
				   LCD_enuSetCurser(1,1);
				   LCD_enuDispString("Math ERROR");
				   while('O'!=Char)
    4350:	fe 01       	movw	r30, r28
    4352:	ea 5f       	subi	r30, 0xFA	; 250
    4354:	fe 4f       	sbci	r31, 0xFE	; 254
    4356:	80 81       	ld	r24, Z
    4358:	8f 34       	cpi	r24, 0x4F	; 79
    435a:	a9 f7       	brne	.-22     	; 0x4346 <main+0x4c4>
					   KYPAD_enuGetChar(&Char);
				   }
			   }

			}
			if('O' == Char)
    435c:	fe 01       	movw	r30, r28
    435e:	ea 5f       	subi	r30, 0xFA	; 250
    4360:	fe 4f       	sbci	r31, 0xFE	; 254
    4362:	80 81       	ld	r24, Z
    4364:	8f 34       	cpi	r24, 0x4F	; 79
    4366:	09 f0       	breq	.+2      	; 0x436a <main+0x4e8>
    4368:	7e cf       	rjmp	.-260    	; 0x4266 <main+0x3e4>
			{
				LCD_enuClearLCD();
    436a:	0e 94 60 14 	call	0x28c0	; 0x28c0 <LCD_enuClearLCD>
				LCD_enuSetCurser(1,1);
    436e:	81 e0       	ldi	r24, 0x01	; 1
    4370:	61 e0       	ldi	r22, 0x01	; 1
    4372:	0e 94 46 13 	call	0x268c	; 0x268c <LCD_enuSetCurser>
				Local_u8Iterator = 0;
    4376:	1d ae       	std	Y+61, r1	; 0x3d
    4378:	76 cf       	rjmp	.-276    	; 0x4266 <main+0x3e4>

0000437a <__mulsi3>:
    437a:	62 9f       	mul	r22, r18
    437c:	d0 01       	movw	r26, r0
    437e:	73 9f       	mul	r23, r19
    4380:	f0 01       	movw	r30, r0
    4382:	82 9f       	mul	r24, r18
    4384:	e0 0d       	add	r30, r0
    4386:	f1 1d       	adc	r31, r1
    4388:	64 9f       	mul	r22, r20
    438a:	e0 0d       	add	r30, r0
    438c:	f1 1d       	adc	r31, r1
    438e:	92 9f       	mul	r25, r18
    4390:	f0 0d       	add	r31, r0
    4392:	83 9f       	mul	r24, r19
    4394:	f0 0d       	add	r31, r0
    4396:	74 9f       	mul	r23, r20
    4398:	f0 0d       	add	r31, r0
    439a:	65 9f       	mul	r22, r21
    439c:	f0 0d       	add	r31, r0
    439e:	99 27       	eor	r25, r25
    43a0:	72 9f       	mul	r23, r18
    43a2:	b0 0d       	add	r27, r0
    43a4:	e1 1d       	adc	r30, r1
    43a6:	f9 1f       	adc	r31, r25
    43a8:	63 9f       	mul	r22, r19
    43aa:	b0 0d       	add	r27, r0
    43ac:	e1 1d       	adc	r30, r1
    43ae:	f9 1f       	adc	r31, r25
    43b0:	bd 01       	movw	r22, r26
    43b2:	cf 01       	movw	r24, r30
    43b4:	11 24       	eor	r1, r1
    43b6:	08 95       	ret

000043b8 <__divmodsi4>:
    43b8:	97 fb       	bst	r25, 7
    43ba:	09 2e       	mov	r0, r25
    43bc:	05 26       	eor	r0, r21
    43be:	0e d0       	rcall	.+28     	; 0x43dc <__divmodsi4_neg1>
    43c0:	57 fd       	sbrc	r21, 7
    43c2:	04 d0       	rcall	.+8      	; 0x43cc <__divmodsi4_neg2>
    43c4:	14 d0       	rcall	.+40     	; 0x43ee <__udivmodsi4>
    43c6:	0a d0       	rcall	.+20     	; 0x43dc <__divmodsi4_neg1>
    43c8:	00 1c       	adc	r0, r0
    43ca:	38 f4       	brcc	.+14     	; 0x43da <__divmodsi4_exit>

000043cc <__divmodsi4_neg2>:
    43cc:	50 95       	com	r21
    43ce:	40 95       	com	r20
    43d0:	30 95       	com	r19
    43d2:	21 95       	neg	r18
    43d4:	3f 4f       	sbci	r19, 0xFF	; 255
    43d6:	4f 4f       	sbci	r20, 0xFF	; 255
    43d8:	5f 4f       	sbci	r21, 0xFF	; 255

000043da <__divmodsi4_exit>:
    43da:	08 95       	ret

000043dc <__divmodsi4_neg1>:
    43dc:	f6 f7       	brtc	.-4      	; 0x43da <__divmodsi4_exit>
    43de:	90 95       	com	r25
    43e0:	80 95       	com	r24
    43e2:	70 95       	com	r23
    43e4:	61 95       	neg	r22
    43e6:	7f 4f       	sbci	r23, 0xFF	; 255
    43e8:	8f 4f       	sbci	r24, 0xFF	; 255
    43ea:	9f 4f       	sbci	r25, 0xFF	; 255
    43ec:	08 95       	ret

000043ee <__udivmodsi4>:
    43ee:	a1 e2       	ldi	r26, 0x21	; 33
    43f0:	1a 2e       	mov	r1, r26
    43f2:	aa 1b       	sub	r26, r26
    43f4:	bb 1b       	sub	r27, r27
    43f6:	fd 01       	movw	r30, r26
    43f8:	0d c0       	rjmp	.+26     	; 0x4414 <__udivmodsi4_ep>

000043fa <__udivmodsi4_loop>:
    43fa:	aa 1f       	adc	r26, r26
    43fc:	bb 1f       	adc	r27, r27
    43fe:	ee 1f       	adc	r30, r30
    4400:	ff 1f       	adc	r31, r31
    4402:	a2 17       	cp	r26, r18
    4404:	b3 07       	cpc	r27, r19
    4406:	e4 07       	cpc	r30, r20
    4408:	f5 07       	cpc	r31, r21
    440a:	20 f0       	brcs	.+8      	; 0x4414 <__udivmodsi4_ep>
    440c:	a2 1b       	sub	r26, r18
    440e:	b3 0b       	sbc	r27, r19
    4410:	e4 0b       	sbc	r30, r20
    4412:	f5 0b       	sbc	r31, r21

00004414 <__udivmodsi4_ep>:
    4414:	66 1f       	adc	r22, r22
    4416:	77 1f       	adc	r23, r23
    4418:	88 1f       	adc	r24, r24
    441a:	99 1f       	adc	r25, r25
    441c:	1a 94       	dec	r1
    441e:	69 f7       	brne	.-38     	; 0x43fa <__udivmodsi4_loop>
    4420:	60 95       	com	r22
    4422:	70 95       	com	r23
    4424:	80 95       	com	r24
    4426:	90 95       	com	r25
    4428:	9b 01       	movw	r18, r22
    442a:	ac 01       	movw	r20, r24
    442c:	bd 01       	movw	r22, r26
    442e:	cf 01       	movw	r24, r30
    4430:	08 95       	ret

00004432 <__prologue_saves__>:
    4432:	2f 92       	push	r2
    4434:	3f 92       	push	r3
    4436:	4f 92       	push	r4
    4438:	5f 92       	push	r5
    443a:	6f 92       	push	r6
    443c:	7f 92       	push	r7
    443e:	8f 92       	push	r8
    4440:	9f 92       	push	r9
    4442:	af 92       	push	r10
    4444:	bf 92       	push	r11
    4446:	cf 92       	push	r12
    4448:	df 92       	push	r13
    444a:	ef 92       	push	r14
    444c:	ff 92       	push	r15
    444e:	0f 93       	push	r16
    4450:	1f 93       	push	r17
    4452:	cf 93       	push	r28
    4454:	df 93       	push	r29
    4456:	cd b7       	in	r28, 0x3d	; 61
    4458:	de b7       	in	r29, 0x3e	; 62
    445a:	ca 1b       	sub	r28, r26
    445c:	db 0b       	sbc	r29, r27
    445e:	0f b6       	in	r0, 0x3f	; 63
    4460:	f8 94       	cli
    4462:	de bf       	out	0x3e, r29	; 62
    4464:	0f be       	out	0x3f, r0	; 63
    4466:	cd bf       	out	0x3d, r28	; 61
    4468:	09 94       	ijmp

0000446a <__epilogue_restores__>:
    446a:	2a 88       	ldd	r2, Y+18	; 0x12
    446c:	39 88       	ldd	r3, Y+17	; 0x11
    446e:	48 88       	ldd	r4, Y+16	; 0x10
    4470:	5f 84       	ldd	r5, Y+15	; 0x0f
    4472:	6e 84       	ldd	r6, Y+14	; 0x0e
    4474:	7d 84       	ldd	r7, Y+13	; 0x0d
    4476:	8c 84       	ldd	r8, Y+12	; 0x0c
    4478:	9b 84       	ldd	r9, Y+11	; 0x0b
    447a:	aa 84       	ldd	r10, Y+10	; 0x0a
    447c:	b9 84       	ldd	r11, Y+9	; 0x09
    447e:	c8 84       	ldd	r12, Y+8	; 0x08
    4480:	df 80       	ldd	r13, Y+7	; 0x07
    4482:	ee 80       	ldd	r14, Y+6	; 0x06
    4484:	fd 80       	ldd	r15, Y+5	; 0x05
    4486:	0c 81       	ldd	r16, Y+4	; 0x04
    4488:	1b 81       	ldd	r17, Y+3	; 0x03
    448a:	aa 81       	ldd	r26, Y+2	; 0x02
    448c:	b9 81       	ldd	r27, Y+1	; 0x01
    448e:	ce 0f       	add	r28, r30
    4490:	d1 1d       	adc	r29, r1
    4492:	0f b6       	in	r0, 0x3f	; 63
    4494:	f8 94       	cli
    4496:	de bf       	out	0x3e, r29	; 62
    4498:	0f be       	out	0x3f, r0	; 63
    449a:	cd bf       	out	0x3d, r28	; 61
    449c:	ed 01       	movw	r28, r26
    449e:	08 95       	ret

000044a0 <_exit>:
    44a0:	f8 94       	cli

000044a2 <__stop_program>:
    44a2:	ff cf       	rjmp	.-2      	; 0x44a2 <__stop_program>
